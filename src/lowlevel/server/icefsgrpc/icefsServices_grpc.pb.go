// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: icefsServices.proto

package icefsgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IcefsGRpcClient is the client API for IcefsGRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IcefsGRpcClient interface {
	DoIcefsInit(ctx context.Context, in *IcefsInitReq, opts ...grpc.CallOption) (*IcefsInitRes, error)
	DoIcefsDestroy(ctx context.Context, in *IcefsDestroyReq, opts ...grpc.CallOption) (*IcefsDestroyRes, error)
	DoIcefsLookUp(ctx context.Context, in *IcefsLookUpReq, opts ...grpc.CallOption) (*IcefsLookUpRes, error)
	DoIcefsForget(ctx context.Context, in *IcefsForgetReq, opts ...grpc.CallOption) (*IcefsForgetRes, error)
	DoIcefsGetAttr(ctx context.Context, in *IcefsGetAttrReq, opts ...grpc.CallOption) (*IcefsGetAttrRes, error)
	DoIcefsSetAttr(ctx context.Context, in *IcefsSetAttrReq, opts ...grpc.CallOption) (*IcefsSetAttrRes, error)
	DoIcefsReadLink(ctx context.Context, in *IcefsReadLinkReq, opts ...grpc.CallOption) (*IcefsReadLinkRes, error)
	DoIcefsMknod(ctx context.Context, in *IcefsMknodReq, opts ...grpc.CallOption) (*IcefsMknodRes, error)
	DoIcefsMkDir(ctx context.Context, in *IcefsMkDirReq, opts ...grpc.CallOption) (*IcefsMkDirRes, error)
	DoIcefsUnlink(ctx context.Context, in *IcefsUnlinkReq, opts ...grpc.CallOption) (*IcefsUnlinkRes, error)
	DoIcefsRmDir(ctx context.Context, in *IcefsRmDirReq, opts ...grpc.CallOption) (*IcefsRmDirRes, error)
	DoIcefsSymLink(ctx context.Context, in *IcefsSymLinkReq, opts ...grpc.CallOption) (*IcefsSymLinkRes, error)
	DoIcefsRename(ctx context.Context, in *IcefsRenameReq, opts ...grpc.CallOption) (*IcefsRenameRes, error)
	DoIcefsLink(ctx context.Context, in *IcefsLinkReq, opts ...grpc.CallOption) (*IcefsLinkRes, error)
	DoIcefsOpen(ctx context.Context, in *IcefsOpenReq, opts ...grpc.CallOption) (*IcefsOpenRes, error)
	DoIcefsRead(ctx context.Context, in *IcefsReadReq, opts ...grpc.CallOption) (*IcefsReadRes, error)
	DoIcefsWrite(ctx context.Context, in *IcefsWriteReq, opts ...grpc.CallOption) (*IcefsWriteRes, error)
	DoIcefsFlush(ctx context.Context, in *IcefsFlushReq, opts ...grpc.CallOption) (*IcefsFlushRes, error)
	DoIcefsRelease(ctx context.Context, in *IcefsReleaseReq, opts ...grpc.CallOption) (*IcefsReleaseRes, error)
	DoIcefsFsync(ctx context.Context, in *IcefsFsyncReq, opts ...grpc.CallOption) (*IcefsFsyncRes, error)
	DoIcefsOpenDir(ctx context.Context, in *IcefsOpenDirReq, opts ...grpc.CallOption) (*IcefsOpenDirRes, error)
	DoIcefsReadDir(ctx context.Context, in *IcefsReadDirReq, opts ...grpc.CallOption) (*IcefsReadDirRes, error)
	DoIcefsReleaseDir(ctx context.Context, in *IcefsReleaseDirReq, opts ...grpc.CallOption) (*IcefsReleaseDirRes, error)
	DoIcefsFsyncDir(ctx context.Context, in *IcefsFsyncDirReq, opts ...grpc.CallOption) (*IcefsFsyncDirRes, error)
	DoIcefsStatFS(ctx context.Context, in *IcefsStatFSReq, opts ...grpc.CallOption) (*IcefsStatFSRes, error)
	DoIcefsSetXattr(ctx context.Context, in *IcefsSetXattrReq, opts ...grpc.CallOption) (*IcefsSetXattrRes, error)
	DoIcefsGetXattr(ctx context.Context, in *IcefsGetXattrReq, opts ...grpc.CallOption) (*IcefsGetXattrRes, error)
	DoIcefsListXattr(ctx context.Context, in *IcefsListXattrReq, opts ...grpc.CallOption) (*IcefsListXattrRes, error)
	DoIcefsRemoveXattr(ctx context.Context, in *IcefsRemoveXattrReq, opts ...grpc.CallOption) (*IcefsRemoveXattrRes, error)
	DoIcefsAccess(ctx context.Context, in *IcefsAccessReq, opts ...grpc.CallOption) (*IcefsAccessRes, error)
	DoIcefsCreate(ctx context.Context, in *IcefsCreateReq, opts ...grpc.CallOption) (*IcefsCreateRes, error)
	DoIcefsGetLk(ctx context.Context, in *IcefsGetLkReq, opts ...grpc.CallOption) (*IcefsGetLkRes, error)
	DoIcefsSetLk(ctx context.Context, in *IcefsSetLkReq, opts ...grpc.CallOption) (*IcefsSetLkRes, error)
	DoIcefsBmap(ctx context.Context, in *IcefsBmapReq, opts ...grpc.CallOption) (*IcefsBmapRes, error)
	DoIcefsIoctl(ctx context.Context, in *IcefsIoctlReq, opts ...grpc.CallOption) (*IcefsIoctlRes, error)
	DoIcefsPoll(ctx context.Context, in *IcefsPollReq, opts ...grpc.CallOption) (*IcefsPollRes, error)
	DoIcefsWriteBuf(ctx context.Context, in *IcefsWriteBufReq, opts ...grpc.CallOption) (*IcefsWriteBufRes, error)
	DoIcefsRetrieveReply(ctx context.Context, in *IcefsRetrieveReplyReq, opts ...grpc.CallOption) (*IcefsRetrieveReplyRes, error)
	DoIcefsForgetMulti(ctx context.Context, in *IcefsForgetMultiReq, opts ...grpc.CallOption) (*IcefsForgetMultiRes, error)
	DoIcefsFlock(ctx context.Context, in *IcefsFlockReq, opts ...grpc.CallOption) (*IcefsFlockRes, error)
	DoIcefsFallocate(ctx context.Context, in *IcefsFallocateReq, opts ...grpc.CallOption) (*IcefsFallocateRes, error)
	DoIcefsReadDirPlus(ctx context.Context, in *IcefsReadDirPlusReq, opts ...grpc.CallOption) (*IcefsReadDirPlusRes, error)
	DoIcefsCopyFileRange(ctx context.Context, in *IcefsCopyFileRangeReq, opts ...grpc.CallOption) (*IcefsCopyFileRangeRes, error)
	DoIcefsLseek(ctx context.Context, in *IcefsLseekReq, opts ...grpc.CallOption) (*IcefsLseekRes, error)
}

type icefsGRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewIcefsGRpcClient(cc grpc.ClientConnInterface) IcefsGRpcClient {
	return &icefsGRpcClient{cc}
}

func (c *icefsGRpcClient) DoIcefsInit(ctx context.Context, in *IcefsInitReq, opts ...grpc.CallOption) (*IcefsInitRes, error) {
	out := new(IcefsInitRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsDestroy(ctx context.Context, in *IcefsDestroyReq, opts ...grpc.CallOption) (*IcefsDestroyRes, error) {
	out := new(IcefsDestroyRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsDestroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsLookUp(ctx context.Context, in *IcefsLookUpReq, opts ...grpc.CallOption) (*IcefsLookUpRes, error) {
	out := new(IcefsLookUpRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsLookUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsForget(ctx context.Context, in *IcefsForgetReq, opts ...grpc.CallOption) (*IcefsForgetRes, error) {
	out := new(IcefsForgetRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsForget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsGetAttr(ctx context.Context, in *IcefsGetAttrReq, opts ...grpc.CallOption) (*IcefsGetAttrRes, error) {
	out := new(IcefsGetAttrRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsGetAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsSetAttr(ctx context.Context, in *IcefsSetAttrReq, opts ...grpc.CallOption) (*IcefsSetAttrRes, error) {
	out := new(IcefsSetAttrRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsSetAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsReadLink(ctx context.Context, in *IcefsReadLinkReq, opts ...grpc.CallOption) (*IcefsReadLinkRes, error) {
	out := new(IcefsReadLinkRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsReadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsMknod(ctx context.Context, in *IcefsMknodReq, opts ...grpc.CallOption) (*IcefsMknodRes, error) {
	out := new(IcefsMknodRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsMknod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsMkDir(ctx context.Context, in *IcefsMkDirReq, opts ...grpc.CallOption) (*IcefsMkDirRes, error) {
	out := new(IcefsMkDirRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsMkDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsUnlink(ctx context.Context, in *IcefsUnlinkReq, opts ...grpc.CallOption) (*IcefsUnlinkRes, error) {
	out := new(IcefsUnlinkRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsUnlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsRmDir(ctx context.Context, in *IcefsRmDirReq, opts ...grpc.CallOption) (*IcefsRmDirRes, error) {
	out := new(IcefsRmDirRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsRmDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsSymLink(ctx context.Context, in *IcefsSymLinkReq, opts ...grpc.CallOption) (*IcefsSymLinkRes, error) {
	out := new(IcefsSymLinkRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsSymLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsRename(ctx context.Context, in *IcefsRenameReq, opts ...grpc.CallOption) (*IcefsRenameRes, error) {
	out := new(IcefsRenameRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsRename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsLink(ctx context.Context, in *IcefsLinkReq, opts ...grpc.CallOption) (*IcefsLinkRes, error) {
	out := new(IcefsLinkRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsOpen(ctx context.Context, in *IcefsOpenReq, opts ...grpc.CallOption) (*IcefsOpenRes, error) {
	out := new(IcefsOpenRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsRead(ctx context.Context, in *IcefsReadReq, opts ...grpc.CallOption) (*IcefsReadRes, error) {
	out := new(IcefsReadRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsWrite(ctx context.Context, in *IcefsWriteReq, opts ...grpc.CallOption) (*IcefsWriteRes, error) {
	out := new(IcefsWriteRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsFlush(ctx context.Context, in *IcefsFlushReq, opts ...grpc.CallOption) (*IcefsFlushRes, error) {
	out := new(IcefsFlushRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsFlush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsRelease(ctx context.Context, in *IcefsReleaseReq, opts ...grpc.CallOption) (*IcefsReleaseRes, error) {
	out := new(IcefsReleaseRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsFsync(ctx context.Context, in *IcefsFsyncReq, opts ...grpc.CallOption) (*IcefsFsyncRes, error) {
	out := new(IcefsFsyncRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsFsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsOpenDir(ctx context.Context, in *IcefsOpenDirReq, opts ...grpc.CallOption) (*IcefsOpenDirRes, error) {
	out := new(IcefsOpenDirRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsOpenDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsReadDir(ctx context.Context, in *IcefsReadDirReq, opts ...grpc.CallOption) (*IcefsReadDirRes, error) {
	out := new(IcefsReadDirRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsReadDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsReleaseDir(ctx context.Context, in *IcefsReleaseDirReq, opts ...grpc.CallOption) (*IcefsReleaseDirRes, error) {
	out := new(IcefsReleaseDirRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsReleaseDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsFsyncDir(ctx context.Context, in *IcefsFsyncDirReq, opts ...grpc.CallOption) (*IcefsFsyncDirRes, error) {
	out := new(IcefsFsyncDirRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsFsyncDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsStatFS(ctx context.Context, in *IcefsStatFSReq, opts ...grpc.CallOption) (*IcefsStatFSRes, error) {
	out := new(IcefsStatFSRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsStatFS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsSetXattr(ctx context.Context, in *IcefsSetXattrReq, opts ...grpc.CallOption) (*IcefsSetXattrRes, error) {
	out := new(IcefsSetXattrRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsSetXattr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsGetXattr(ctx context.Context, in *IcefsGetXattrReq, opts ...grpc.CallOption) (*IcefsGetXattrRes, error) {
	out := new(IcefsGetXattrRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsGetXattr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsListXattr(ctx context.Context, in *IcefsListXattrReq, opts ...grpc.CallOption) (*IcefsListXattrRes, error) {
	out := new(IcefsListXattrRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsListXattr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsRemoveXattr(ctx context.Context, in *IcefsRemoveXattrReq, opts ...grpc.CallOption) (*IcefsRemoveXattrRes, error) {
	out := new(IcefsRemoveXattrRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsRemoveXattr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsAccess(ctx context.Context, in *IcefsAccessReq, opts ...grpc.CallOption) (*IcefsAccessRes, error) {
	out := new(IcefsAccessRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsCreate(ctx context.Context, in *IcefsCreateReq, opts ...grpc.CallOption) (*IcefsCreateRes, error) {
	out := new(IcefsCreateRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsGetLk(ctx context.Context, in *IcefsGetLkReq, opts ...grpc.CallOption) (*IcefsGetLkRes, error) {
	out := new(IcefsGetLkRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsGetLk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsSetLk(ctx context.Context, in *IcefsSetLkReq, opts ...grpc.CallOption) (*IcefsSetLkRes, error) {
	out := new(IcefsSetLkRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsSetLk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsBmap(ctx context.Context, in *IcefsBmapReq, opts ...grpc.CallOption) (*IcefsBmapRes, error) {
	out := new(IcefsBmapRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsBmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsIoctl(ctx context.Context, in *IcefsIoctlReq, opts ...grpc.CallOption) (*IcefsIoctlRes, error) {
	out := new(IcefsIoctlRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsIoctl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsPoll(ctx context.Context, in *IcefsPollReq, opts ...grpc.CallOption) (*IcefsPollRes, error) {
	out := new(IcefsPollRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsWriteBuf(ctx context.Context, in *IcefsWriteBufReq, opts ...grpc.CallOption) (*IcefsWriteBufRes, error) {
	out := new(IcefsWriteBufRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsWriteBuf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsRetrieveReply(ctx context.Context, in *IcefsRetrieveReplyReq, opts ...grpc.CallOption) (*IcefsRetrieveReplyRes, error) {
	out := new(IcefsRetrieveReplyRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsRetrieveReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsForgetMulti(ctx context.Context, in *IcefsForgetMultiReq, opts ...grpc.CallOption) (*IcefsForgetMultiRes, error) {
	out := new(IcefsForgetMultiRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsForgetMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsFlock(ctx context.Context, in *IcefsFlockReq, opts ...grpc.CallOption) (*IcefsFlockRes, error) {
	out := new(IcefsFlockRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsFlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsFallocate(ctx context.Context, in *IcefsFallocateReq, opts ...grpc.CallOption) (*IcefsFallocateRes, error) {
	out := new(IcefsFallocateRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsFallocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsReadDirPlus(ctx context.Context, in *IcefsReadDirPlusReq, opts ...grpc.CallOption) (*IcefsReadDirPlusRes, error) {
	out := new(IcefsReadDirPlusRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsReadDirPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsCopyFileRange(ctx context.Context, in *IcefsCopyFileRangeReq, opts ...grpc.CallOption) (*IcefsCopyFileRangeRes, error) {
	out := new(IcefsCopyFileRangeRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsCopyFileRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsGRpcClient) DoIcefsLseek(ctx context.Context, in *IcefsLseekReq, opts ...grpc.CallOption) (*IcefsLseekRes, error) {
	out := new(IcefsLseekRes)
	err := c.cc.Invoke(ctx, "/icefsgrpc.IcefsGRpc/DoIcefsLseek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IcefsGRpcServer is the server API for IcefsGRpc service.
// All implementations must embed UnimplementedIcefsGRpcServer
// for forward compatibility
type IcefsGRpcServer interface {
	DoIcefsInit(context.Context, *IcefsInitReq) (*IcefsInitRes, error)
	DoIcefsDestroy(context.Context, *IcefsDestroyReq) (*IcefsDestroyRes, error)
	DoIcefsLookUp(context.Context, *IcefsLookUpReq) (*IcefsLookUpRes, error)
	DoIcefsForget(context.Context, *IcefsForgetReq) (*IcefsForgetRes, error)
	DoIcefsGetAttr(context.Context, *IcefsGetAttrReq) (*IcefsGetAttrRes, error)
	DoIcefsSetAttr(context.Context, *IcefsSetAttrReq) (*IcefsSetAttrRes, error)
	DoIcefsReadLink(context.Context, *IcefsReadLinkReq) (*IcefsReadLinkRes, error)
	DoIcefsMknod(context.Context, *IcefsMknodReq) (*IcefsMknodRes, error)
	DoIcefsMkDir(context.Context, *IcefsMkDirReq) (*IcefsMkDirRes, error)
	DoIcefsUnlink(context.Context, *IcefsUnlinkReq) (*IcefsUnlinkRes, error)
	DoIcefsRmDir(context.Context, *IcefsRmDirReq) (*IcefsRmDirRes, error)
	DoIcefsSymLink(context.Context, *IcefsSymLinkReq) (*IcefsSymLinkRes, error)
	DoIcefsRename(context.Context, *IcefsRenameReq) (*IcefsRenameRes, error)
	DoIcefsLink(context.Context, *IcefsLinkReq) (*IcefsLinkRes, error)
	DoIcefsOpen(context.Context, *IcefsOpenReq) (*IcefsOpenRes, error)
	DoIcefsRead(context.Context, *IcefsReadReq) (*IcefsReadRes, error)
	DoIcefsWrite(context.Context, *IcefsWriteReq) (*IcefsWriteRes, error)
	DoIcefsFlush(context.Context, *IcefsFlushReq) (*IcefsFlushRes, error)
	DoIcefsRelease(context.Context, *IcefsReleaseReq) (*IcefsReleaseRes, error)
	DoIcefsFsync(context.Context, *IcefsFsyncReq) (*IcefsFsyncRes, error)
	DoIcefsOpenDir(context.Context, *IcefsOpenDirReq) (*IcefsOpenDirRes, error)
	DoIcefsReadDir(context.Context, *IcefsReadDirReq) (*IcefsReadDirRes, error)
	DoIcefsReleaseDir(context.Context, *IcefsReleaseDirReq) (*IcefsReleaseDirRes, error)
	DoIcefsFsyncDir(context.Context, *IcefsFsyncDirReq) (*IcefsFsyncDirRes, error)
	DoIcefsStatFS(context.Context, *IcefsStatFSReq) (*IcefsStatFSRes, error)
	DoIcefsSetXattr(context.Context, *IcefsSetXattrReq) (*IcefsSetXattrRes, error)
	DoIcefsGetXattr(context.Context, *IcefsGetXattrReq) (*IcefsGetXattrRes, error)
	DoIcefsListXattr(context.Context, *IcefsListXattrReq) (*IcefsListXattrRes, error)
	DoIcefsRemoveXattr(context.Context, *IcefsRemoveXattrReq) (*IcefsRemoveXattrRes, error)
	DoIcefsAccess(context.Context, *IcefsAccessReq) (*IcefsAccessRes, error)
	DoIcefsCreate(context.Context, *IcefsCreateReq) (*IcefsCreateRes, error)
	DoIcefsGetLk(context.Context, *IcefsGetLkReq) (*IcefsGetLkRes, error)
	DoIcefsSetLk(context.Context, *IcefsSetLkReq) (*IcefsSetLkRes, error)
	DoIcefsBmap(context.Context, *IcefsBmapReq) (*IcefsBmapRes, error)
	DoIcefsIoctl(context.Context, *IcefsIoctlReq) (*IcefsIoctlRes, error)
	DoIcefsPoll(context.Context, *IcefsPollReq) (*IcefsPollRes, error)
	DoIcefsWriteBuf(context.Context, *IcefsWriteBufReq) (*IcefsWriteBufRes, error)
	DoIcefsRetrieveReply(context.Context, *IcefsRetrieveReplyReq) (*IcefsRetrieveReplyRes, error)
	DoIcefsForgetMulti(context.Context, *IcefsForgetMultiReq) (*IcefsForgetMultiRes, error)
	DoIcefsFlock(context.Context, *IcefsFlockReq) (*IcefsFlockRes, error)
	DoIcefsFallocate(context.Context, *IcefsFallocateReq) (*IcefsFallocateRes, error)
	DoIcefsReadDirPlus(context.Context, *IcefsReadDirPlusReq) (*IcefsReadDirPlusRes, error)
	DoIcefsCopyFileRange(context.Context, *IcefsCopyFileRangeReq) (*IcefsCopyFileRangeRes, error)
	DoIcefsLseek(context.Context, *IcefsLseekReq) (*IcefsLseekRes, error)
	mustEmbedUnimplementedIcefsGRpcServer()
}

// UnimplementedIcefsGRpcServer must be embedded to have forward compatible implementations.
type UnimplementedIcefsGRpcServer struct {
}

func (UnimplementedIcefsGRpcServer) DoIcefsInit(context.Context, *IcefsInitReq) (*IcefsInitRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsInit not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsDestroy(context.Context, *IcefsDestroyReq) (*IcefsDestroyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsDestroy not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsLookUp(context.Context, *IcefsLookUpReq) (*IcefsLookUpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsLookUp not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsForget(context.Context, *IcefsForgetReq) (*IcefsForgetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsForget not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsGetAttr(context.Context, *IcefsGetAttrReq) (*IcefsGetAttrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsGetAttr not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsSetAttr(context.Context, *IcefsSetAttrReq) (*IcefsSetAttrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsSetAttr not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsReadLink(context.Context, *IcefsReadLinkReq) (*IcefsReadLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsReadLink not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsMknod(context.Context, *IcefsMknodReq) (*IcefsMknodRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsMknod not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsMkDir(context.Context, *IcefsMkDirReq) (*IcefsMkDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsMkDir not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsUnlink(context.Context, *IcefsUnlinkReq) (*IcefsUnlinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsUnlink not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsRmDir(context.Context, *IcefsRmDirReq) (*IcefsRmDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsRmDir not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsSymLink(context.Context, *IcefsSymLinkReq) (*IcefsSymLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsSymLink not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsRename(context.Context, *IcefsRenameReq) (*IcefsRenameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsRename not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsLink(context.Context, *IcefsLinkReq) (*IcefsLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsLink not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsOpen(context.Context, *IcefsOpenReq) (*IcefsOpenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsOpen not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsRead(context.Context, *IcefsReadReq) (*IcefsReadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsRead not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsWrite(context.Context, *IcefsWriteReq) (*IcefsWriteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsWrite not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsFlush(context.Context, *IcefsFlushReq) (*IcefsFlushRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsFlush not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsRelease(context.Context, *IcefsReleaseReq) (*IcefsReleaseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsRelease not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsFsync(context.Context, *IcefsFsyncReq) (*IcefsFsyncRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsFsync not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsOpenDir(context.Context, *IcefsOpenDirReq) (*IcefsOpenDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsOpenDir not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsReadDir(context.Context, *IcefsReadDirReq) (*IcefsReadDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsReadDir not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsReleaseDir(context.Context, *IcefsReleaseDirReq) (*IcefsReleaseDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsReleaseDir not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsFsyncDir(context.Context, *IcefsFsyncDirReq) (*IcefsFsyncDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsFsyncDir not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsStatFS(context.Context, *IcefsStatFSReq) (*IcefsStatFSRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsStatFS not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsSetXattr(context.Context, *IcefsSetXattrReq) (*IcefsSetXattrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsSetXattr not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsGetXattr(context.Context, *IcefsGetXattrReq) (*IcefsGetXattrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsGetXattr not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsListXattr(context.Context, *IcefsListXattrReq) (*IcefsListXattrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsListXattr not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsRemoveXattr(context.Context, *IcefsRemoveXattrReq) (*IcefsRemoveXattrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsRemoveXattr not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsAccess(context.Context, *IcefsAccessReq) (*IcefsAccessRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsAccess not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsCreate(context.Context, *IcefsCreateReq) (*IcefsCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsCreate not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsGetLk(context.Context, *IcefsGetLkReq) (*IcefsGetLkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsGetLk not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsSetLk(context.Context, *IcefsSetLkReq) (*IcefsSetLkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsSetLk not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsBmap(context.Context, *IcefsBmapReq) (*IcefsBmapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsBmap not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsIoctl(context.Context, *IcefsIoctlReq) (*IcefsIoctlRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsIoctl not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsPoll(context.Context, *IcefsPollReq) (*IcefsPollRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsPoll not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsWriteBuf(context.Context, *IcefsWriteBufReq) (*IcefsWriteBufRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsWriteBuf not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsRetrieveReply(context.Context, *IcefsRetrieveReplyReq) (*IcefsRetrieveReplyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsRetrieveReply not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsForgetMulti(context.Context, *IcefsForgetMultiReq) (*IcefsForgetMultiRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsForgetMulti not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsFlock(context.Context, *IcefsFlockReq) (*IcefsFlockRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsFlock not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsFallocate(context.Context, *IcefsFallocateReq) (*IcefsFallocateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsFallocate not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsReadDirPlus(context.Context, *IcefsReadDirPlusReq) (*IcefsReadDirPlusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsReadDirPlus not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsCopyFileRange(context.Context, *IcefsCopyFileRangeReq) (*IcefsCopyFileRangeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsCopyFileRange not implemented")
}
func (UnimplementedIcefsGRpcServer) DoIcefsLseek(context.Context, *IcefsLseekReq) (*IcefsLseekRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsLseek not implemented")
}
func (UnimplementedIcefsGRpcServer) mustEmbedUnimplementedIcefsGRpcServer() {}

// UnsafeIcefsGRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IcefsGRpcServer will
// result in compilation errors.
type UnsafeIcefsGRpcServer interface {
	mustEmbedUnimplementedIcefsGRpcServer()
}

func RegisterIcefsGRpcServer(s grpc.ServiceRegistrar, srv IcefsGRpcServer) {
	s.RegisterService(&IcefsGRpc_ServiceDesc, srv)
}

func _IcefsGRpc_DoIcefsInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsInitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsInit(ctx, req.(*IcefsInitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsDestroyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsDestroy(ctx, req.(*IcefsDestroyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsLookUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsLookUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsLookUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsLookUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsLookUp(ctx, req.(*IcefsLookUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsForget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsForgetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsForget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsForget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsForget(ctx, req.(*IcefsForgetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsGetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsGetAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsGetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsGetAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsGetAttr(ctx, req.(*IcefsGetAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsSetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsSetAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsSetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsSetAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsSetAttr(ctx, req.(*IcefsSetAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsReadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsReadLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsReadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsReadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsReadLink(ctx, req.(*IcefsReadLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsMknod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsMknodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsMknod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsMknod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsMknod(ctx, req.(*IcefsMknodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsMkDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsMkDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsMkDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsMkDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsMkDir(ctx, req.(*IcefsMkDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsUnlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsUnlinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsUnlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsUnlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsUnlink(ctx, req.(*IcefsUnlinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsRmDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsRmDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsRmDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsRmDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsRmDir(ctx, req.(*IcefsRmDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsSymLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsSymLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsSymLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsSymLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsSymLink(ctx, req.(*IcefsSymLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsRename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsRenameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsRename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsRename(ctx, req.(*IcefsRenameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsLink(ctx, req.(*IcefsLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsOpenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsOpen(ctx, req.(*IcefsOpenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsRead(ctx, req.(*IcefsReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsWriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsWrite(ctx, req.(*IcefsWriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsFlush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsFlushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsFlush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsFlush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsFlush(ctx, req.(*IcefsFlushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsRelease(ctx, req.(*IcefsReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsFsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsFsyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsFsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsFsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsFsync(ctx, req.(*IcefsFsyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsOpenDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsOpenDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsOpenDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsOpenDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsOpenDir(ctx, req.(*IcefsOpenDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsReadDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsReadDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsReadDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsReadDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsReadDir(ctx, req.(*IcefsReadDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsReleaseDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsReleaseDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsReleaseDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsReleaseDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsReleaseDir(ctx, req.(*IcefsReleaseDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsFsyncDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsFsyncDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsFsyncDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsFsyncDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsFsyncDir(ctx, req.(*IcefsFsyncDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsStatFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsStatFSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsStatFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsStatFS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsStatFS(ctx, req.(*IcefsStatFSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsSetXattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsSetXattrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsSetXattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsSetXattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsSetXattr(ctx, req.(*IcefsSetXattrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsGetXattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsGetXattrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsGetXattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsGetXattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsGetXattr(ctx, req.(*IcefsGetXattrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsListXattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsListXattrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsListXattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsListXattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsListXattr(ctx, req.(*IcefsListXattrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsRemoveXattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsRemoveXattrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsRemoveXattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsRemoveXattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsRemoveXattr(ctx, req.(*IcefsRemoveXattrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsAccessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsAccess(ctx, req.(*IcefsAccessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsCreate(ctx, req.(*IcefsCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsGetLk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsGetLkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsGetLk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsGetLk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsGetLk(ctx, req.(*IcefsGetLkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsSetLk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsSetLkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsSetLk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsSetLk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsSetLk(ctx, req.(*IcefsSetLkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsBmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsBmapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsBmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsBmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsBmap(ctx, req.(*IcefsBmapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsIoctl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsIoctlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsIoctl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsIoctl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsIoctl(ctx, req.(*IcefsIoctlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsPollReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsPoll(ctx, req.(*IcefsPollReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsWriteBuf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsWriteBufReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsWriteBuf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsWriteBuf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsWriteBuf(ctx, req.(*IcefsWriteBufReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsRetrieveReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsRetrieveReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsRetrieveReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsRetrieveReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsRetrieveReply(ctx, req.(*IcefsRetrieveReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsForgetMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsForgetMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsForgetMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsForgetMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsForgetMulti(ctx, req.(*IcefsForgetMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsFlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsFlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsFlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsFlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsFlock(ctx, req.(*IcefsFlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsFallocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsFallocateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsFallocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsFallocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsFallocate(ctx, req.(*IcefsFallocateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsReadDirPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsReadDirPlusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsReadDirPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsReadDirPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsReadDirPlus(ctx, req.(*IcefsReadDirPlusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsCopyFileRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsCopyFileRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsCopyFileRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsCopyFileRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsCopyFileRange(ctx, req.(*IcefsCopyFileRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcefsGRpc_DoIcefsLseek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsLseekReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsGRpcServer).DoIcefsLseek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icefsgrpc.IcefsGRpc/DoIcefsLseek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsGRpcServer).DoIcefsLseek(ctx, req.(*IcefsLseekReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IcefsGRpc_ServiceDesc is the grpc.ServiceDesc for IcefsGRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IcefsGRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "icefsgrpc.IcefsGRpc",
	HandlerType: (*IcefsGRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoIcefsInit",
			Handler:    _IcefsGRpc_DoIcefsInit_Handler,
		},
		{
			MethodName: "DoIcefsDestroy",
			Handler:    _IcefsGRpc_DoIcefsDestroy_Handler,
		},
		{
			MethodName: "DoIcefsLookUp",
			Handler:    _IcefsGRpc_DoIcefsLookUp_Handler,
		},
		{
			MethodName: "DoIcefsForget",
			Handler:    _IcefsGRpc_DoIcefsForget_Handler,
		},
		{
			MethodName: "DoIcefsGetAttr",
			Handler:    _IcefsGRpc_DoIcefsGetAttr_Handler,
		},
		{
			MethodName: "DoIcefsSetAttr",
			Handler:    _IcefsGRpc_DoIcefsSetAttr_Handler,
		},
		{
			MethodName: "DoIcefsReadLink",
			Handler:    _IcefsGRpc_DoIcefsReadLink_Handler,
		},
		{
			MethodName: "DoIcefsMknod",
			Handler:    _IcefsGRpc_DoIcefsMknod_Handler,
		},
		{
			MethodName: "DoIcefsMkDir",
			Handler:    _IcefsGRpc_DoIcefsMkDir_Handler,
		},
		{
			MethodName: "DoIcefsUnlink",
			Handler:    _IcefsGRpc_DoIcefsUnlink_Handler,
		},
		{
			MethodName: "DoIcefsRmDir",
			Handler:    _IcefsGRpc_DoIcefsRmDir_Handler,
		},
		{
			MethodName: "DoIcefsSymLink",
			Handler:    _IcefsGRpc_DoIcefsSymLink_Handler,
		},
		{
			MethodName: "DoIcefsRename",
			Handler:    _IcefsGRpc_DoIcefsRename_Handler,
		},
		{
			MethodName: "DoIcefsLink",
			Handler:    _IcefsGRpc_DoIcefsLink_Handler,
		},
		{
			MethodName: "DoIcefsOpen",
			Handler:    _IcefsGRpc_DoIcefsOpen_Handler,
		},
		{
			MethodName: "DoIcefsRead",
			Handler:    _IcefsGRpc_DoIcefsRead_Handler,
		},
		{
			MethodName: "DoIcefsWrite",
			Handler:    _IcefsGRpc_DoIcefsWrite_Handler,
		},
		{
			MethodName: "DoIcefsFlush",
			Handler:    _IcefsGRpc_DoIcefsFlush_Handler,
		},
		{
			MethodName: "DoIcefsRelease",
			Handler:    _IcefsGRpc_DoIcefsRelease_Handler,
		},
		{
			MethodName: "DoIcefsFsync",
			Handler:    _IcefsGRpc_DoIcefsFsync_Handler,
		},
		{
			MethodName: "DoIcefsOpenDir",
			Handler:    _IcefsGRpc_DoIcefsOpenDir_Handler,
		},
		{
			MethodName: "DoIcefsReadDir",
			Handler:    _IcefsGRpc_DoIcefsReadDir_Handler,
		},
		{
			MethodName: "DoIcefsReleaseDir",
			Handler:    _IcefsGRpc_DoIcefsReleaseDir_Handler,
		},
		{
			MethodName: "DoIcefsFsyncDir",
			Handler:    _IcefsGRpc_DoIcefsFsyncDir_Handler,
		},
		{
			MethodName: "DoIcefsStatFS",
			Handler:    _IcefsGRpc_DoIcefsStatFS_Handler,
		},
		{
			MethodName: "DoIcefsSetXattr",
			Handler:    _IcefsGRpc_DoIcefsSetXattr_Handler,
		},
		{
			MethodName: "DoIcefsGetXattr",
			Handler:    _IcefsGRpc_DoIcefsGetXattr_Handler,
		},
		{
			MethodName: "DoIcefsListXattr",
			Handler:    _IcefsGRpc_DoIcefsListXattr_Handler,
		},
		{
			MethodName: "DoIcefsRemoveXattr",
			Handler:    _IcefsGRpc_DoIcefsRemoveXattr_Handler,
		},
		{
			MethodName: "DoIcefsAccess",
			Handler:    _IcefsGRpc_DoIcefsAccess_Handler,
		},
		{
			MethodName: "DoIcefsCreate",
			Handler:    _IcefsGRpc_DoIcefsCreate_Handler,
		},
		{
			MethodName: "DoIcefsGetLk",
			Handler:    _IcefsGRpc_DoIcefsGetLk_Handler,
		},
		{
			MethodName: "DoIcefsSetLk",
			Handler:    _IcefsGRpc_DoIcefsSetLk_Handler,
		},
		{
			MethodName: "DoIcefsBmap",
			Handler:    _IcefsGRpc_DoIcefsBmap_Handler,
		},
		{
			MethodName: "DoIcefsIoctl",
			Handler:    _IcefsGRpc_DoIcefsIoctl_Handler,
		},
		{
			MethodName: "DoIcefsPoll",
			Handler:    _IcefsGRpc_DoIcefsPoll_Handler,
		},
		{
			MethodName: "DoIcefsWriteBuf",
			Handler:    _IcefsGRpc_DoIcefsWriteBuf_Handler,
		},
		{
			MethodName: "DoIcefsRetrieveReply",
			Handler:    _IcefsGRpc_DoIcefsRetrieveReply_Handler,
		},
		{
			MethodName: "DoIcefsForgetMulti",
			Handler:    _IcefsGRpc_DoIcefsForgetMulti_Handler,
		},
		{
			MethodName: "DoIcefsFlock",
			Handler:    _IcefsGRpc_DoIcefsFlock_Handler,
		},
		{
			MethodName: "DoIcefsFallocate",
			Handler:    _IcefsGRpc_DoIcefsFallocate_Handler,
		},
		{
			MethodName: "DoIcefsReadDirPlus",
			Handler:    _IcefsGRpc_DoIcefsReadDirPlus_Handler,
		},
		{
			MethodName: "DoIcefsCopyFileRange",
			Handler:    _IcefsGRpc_DoIcefsCopyFileRange_Handler,
		},
		{
			MethodName: "DoIcefsLseek",
			Handler:    _IcefsGRpc_DoIcefsLseek_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "icefsServices.proto",
}
