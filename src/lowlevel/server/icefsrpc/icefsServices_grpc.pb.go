// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: icefsServices.proto

package icefsrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IcefsClient is the client API for Icefs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IcefsClient interface {
	DoIcefsInit(ctx context.Context, in *IcefsInitReq, opts ...grpc.CallOption) (*IcefsInitRes, error)
	DoIcefsDestroy(ctx context.Context, in *IcefsDestroyReq, opts ...grpc.CallOption) (*IcefsDestroyRes, error)
	DoIcefsLookUp(ctx context.Context, in *IcefsLookUpReq, opts ...grpc.CallOption) (*IcefsLookUpRes, error)
	DoIcefsForget(ctx context.Context, in *IcefsForgetReq, opts ...grpc.CallOption) (*IcefsForgetRes, error)
	DoIcefsGetAttr(ctx context.Context, in *IcefsGetAttrReq, opts ...grpc.CallOption) (*IcefsGetAttrRes, error)
	DoIcefsSetAttr(ctx context.Context, in *IcefsSetAttrReq, opts ...grpc.CallOption) (*IcefsSetAttrRes, error)
	DoIcefsReadLink(ctx context.Context, in *IcefsReadLinkReq, opts ...grpc.CallOption) (*IcefsReadLinkRes, error)
	DoIcefsMknod(ctx context.Context, in *IcefsMknodReq, opts ...grpc.CallOption) (*IcefsMknodRes, error)
	DoIcefsMkDir(ctx context.Context, in *IcefsMkDirReq, opts ...grpc.CallOption) (*IcefsMkDirRes, error)
	DoIcefsUnlink(ctx context.Context, in *IcefsUnlinkReq, opts ...grpc.CallOption) (*IcefsUnlinkRes, error)
	DoIcefsRmDir(ctx context.Context, in *IcefsRmDirReq, opts ...grpc.CallOption) (*IcefsRmDirRes, error)
	DoIcefsSymLink(ctx context.Context, in *IcefsSymLinkReq, opts ...grpc.CallOption) (*IcefsSymLinkRes, error)
	DoIcefsRename(ctx context.Context, in *IcefsRenameReq, opts ...grpc.CallOption) (*IcefsRenameRes, error)
	DoIcefsLink(ctx context.Context, in *IcefsLinkReq, opts ...grpc.CallOption) (*IcefsLinkRes, error)
	DoIcefsOpen(ctx context.Context, in *IcefsOpenReq, opts ...grpc.CallOption) (*IcefsOpenRes, error)
	DoIcefsRead(ctx context.Context, in *IcefsReadReq, opts ...grpc.CallOption) (*IcefsReadRes, error)
	DoIcefsWrite(ctx context.Context, in *IcefsWriteReq, opts ...grpc.CallOption) (*IcefsWriteRes, error)
	DoIcefsFlush(ctx context.Context, in *IcefsFlushReq, opts ...grpc.CallOption) (*IcefsFlushRes, error)
	DoIcefsRelease(ctx context.Context, in *IcefsReleaseReq, opts ...grpc.CallOption) (*IcefsReleaseRes, error)
	DoIcefsFsync(ctx context.Context, in *IcefsFsyncReq, opts ...grpc.CallOption) (*IcefsFsyncRes, error)
	DoIcefsOpenDir(ctx context.Context, in *IcefsOpenDirReq, opts ...grpc.CallOption) (*IcefsOpenDirRes, error)
	DoIcefsReadDir(ctx context.Context, in *IcefsReadDirReq, opts ...grpc.CallOption) (*IcefsReadDirRes, error)
	DoIcefsReleaseDir(ctx context.Context, in *IcefsReleaseDirReq, opts ...grpc.CallOption) (*IcefsReleaseDirRes, error)
	DoIcefsFsyncDir(ctx context.Context, in *IcefsFsyncDirReq, opts ...grpc.CallOption) (*IcefsFsyncDirRes, error)
	DoIcefsStatFS(ctx context.Context, in *IcefsStatFSReq, opts ...grpc.CallOption) (*IcefsStatFSRes, error)
	DoIcefsSetXattr(ctx context.Context, in *IcefsSetXattrReq, opts ...grpc.CallOption) (*IcefsSetXattrRes, error)
	DoIcefsGetXattr(ctx context.Context, in *IcefsGetXattrReq, opts ...grpc.CallOption) (*IcefsGetXattrRes, error)
	DoIcefsListXattr(ctx context.Context, in *IcefsListXattrReq, opts ...grpc.CallOption) (*IcefsListXattrRes, error)
	DoIcefsRemoveXattr(ctx context.Context, in *IcefsRemoveXattrReq, opts ...grpc.CallOption) (*IcefsRemoveXattrRes, error)
	DoIcefsAccess(ctx context.Context, in *IcefsAccessReq, opts ...grpc.CallOption) (*IcefsAccessRes, error)
	DoIcefsCreate(ctx context.Context, in *IcefsCreateReq, opts ...grpc.CallOption) (*IcefsCreateRes, error)
	DoIcefsGetLk(ctx context.Context, in *IcefsGetLkReq, opts ...grpc.CallOption) (*IcefsGetLkRes, error)
	DoIcefsSetLk(ctx context.Context, in *IcefsSetLkReq, opts ...grpc.CallOption) (*IcefsSetLkRes, error)
	DoIcefsBmap(ctx context.Context, in *IcefsBmapReq, opts ...grpc.CallOption) (*IcefsBmapRes, error)
	DoIcefsIoctl(ctx context.Context, in *IcefsIoctlReq, opts ...grpc.CallOption) (*IcefsIoctlRes, error)
	DoIcefsPoll(ctx context.Context, in *IcefsPollReq, opts ...grpc.CallOption) (*IcefsPollRes, error)
	DoIcefsWriteBuf(ctx context.Context, in *IcefsWriteBufReq, opts ...grpc.CallOption) (*IcefsWriteBufRes, error)
	DoIcefsRetrieveReply(ctx context.Context, in *IcefsRetrieveReplyReq, opts ...grpc.CallOption) (*IcefsRetrieveReplyRes, error)
	DoIcefsForgetMulti(ctx context.Context, in *IcefsForgetMultiReq, opts ...grpc.CallOption) (*IcefsForgetMultiRes, error)
	DoIcefsFlock(ctx context.Context, in *IcefsFlockReq, opts ...grpc.CallOption) (*IcefsFlockRes, error)
	DoIcefsFallocate(ctx context.Context, in *IcefsFallocateReq, opts ...grpc.CallOption) (*IcefsFallocateRes, error)
	DoIcefsReadDirPlus(ctx context.Context, in *IcefsReadDirPlusReq, opts ...grpc.CallOption) (*IcefsReadDirPlusRes, error)
	DoIcefsCopyFileRange(ctx context.Context, in *IcefsCopyFileRangeReq, opts ...grpc.CallOption) (*IcefsCopyFileRangeRes, error)
	DoIcefsLseek(ctx context.Context, in *IcefsLseekReq, opts ...grpc.CallOption) (*IcefsLseekRes, error)
}

type icefsClient struct {
	cc grpc.ClientConnInterface
}

func NewIcefsClient(cc grpc.ClientConnInterface) IcefsClient {
	return &icefsClient{cc}
}

func (c *icefsClient) DoIcefsInit(ctx context.Context, in *IcefsInitReq, opts ...grpc.CallOption) (*IcefsInitRes, error) {
	out := new(IcefsInitRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsDestroy(ctx context.Context, in *IcefsDestroyReq, opts ...grpc.CallOption) (*IcefsDestroyRes, error) {
	out := new(IcefsDestroyRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsDestroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsLookUp(ctx context.Context, in *IcefsLookUpReq, opts ...grpc.CallOption) (*IcefsLookUpRes, error) {
	out := new(IcefsLookUpRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsLookUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsForget(ctx context.Context, in *IcefsForgetReq, opts ...grpc.CallOption) (*IcefsForgetRes, error) {
	out := new(IcefsForgetRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsForget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsGetAttr(ctx context.Context, in *IcefsGetAttrReq, opts ...grpc.CallOption) (*IcefsGetAttrRes, error) {
	out := new(IcefsGetAttrRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsGetAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsSetAttr(ctx context.Context, in *IcefsSetAttrReq, opts ...grpc.CallOption) (*IcefsSetAttrRes, error) {
	out := new(IcefsSetAttrRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsSetAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsReadLink(ctx context.Context, in *IcefsReadLinkReq, opts ...grpc.CallOption) (*IcefsReadLinkRes, error) {
	out := new(IcefsReadLinkRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsReadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsMknod(ctx context.Context, in *IcefsMknodReq, opts ...grpc.CallOption) (*IcefsMknodRes, error) {
	out := new(IcefsMknodRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsMknod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsMkDir(ctx context.Context, in *IcefsMkDirReq, opts ...grpc.CallOption) (*IcefsMkDirRes, error) {
	out := new(IcefsMkDirRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsMkDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsUnlink(ctx context.Context, in *IcefsUnlinkReq, opts ...grpc.CallOption) (*IcefsUnlinkRes, error) {
	out := new(IcefsUnlinkRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsUnlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsRmDir(ctx context.Context, in *IcefsRmDirReq, opts ...grpc.CallOption) (*IcefsRmDirRes, error) {
	out := new(IcefsRmDirRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsRmDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsSymLink(ctx context.Context, in *IcefsSymLinkReq, opts ...grpc.CallOption) (*IcefsSymLinkRes, error) {
	out := new(IcefsSymLinkRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsSymLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsRename(ctx context.Context, in *IcefsRenameReq, opts ...grpc.CallOption) (*IcefsRenameRes, error) {
	out := new(IcefsRenameRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsRename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsLink(ctx context.Context, in *IcefsLinkReq, opts ...grpc.CallOption) (*IcefsLinkRes, error) {
	out := new(IcefsLinkRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsOpen(ctx context.Context, in *IcefsOpenReq, opts ...grpc.CallOption) (*IcefsOpenRes, error) {
	out := new(IcefsOpenRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsRead(ctx context.Context, in *IcefsReadReq, opts ...grpc.CallOption) (*IcefsReadRes, error) {
	out := new(IcefsReadRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsWrite(ctx context.Context, in *IcefsWriteReq, opts ...grpc.CallOption) (*IcefsWriteRes, error) {
	out := new(IcefsWriteRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsFlush(ctx context.Context, in *IcefsFlushReq, opts ...grpc.CallOption) (*IcefsFlushRes, error) {
	out := new(IcefsFlushRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsFlush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsRelease(ctx context.Context, in *IcefsReleaseReq, opts ...grpc.CallOption) (*IcefsReleaseRes, error) {
	out := new(IcefsReleaseRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsFsync(ctx context.Context, in *IcefsFsyncReq, opts ...grpc.CallOption) (*IcefsFsyncRes, error) {
	out := new(IcefsFsyncRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsFsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsOpenDir(ctx context.Context, in *IcefsOpenDirReq, opts ...grpc.CallOption) (*IcefsOpenDirRes, error) {
	out := new(IcefsOpenDirRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsOpenDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsReadDir(ctx context.Context, in *IcefsReadDirReq, opts ...grpc.CallOption) (*IcefsReadDirRes, error) {
	out := new(IcefsReadDirRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsReadDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsReleaseDir(ctx context.Context, in *IcefsReleaseDirReq, opts ...grpc.CallOption) (*IcefsReleaseDirRes, error) {
	out := new(IcefsReleaseDirRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsReleaseDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsFsyncDir(ctx context.Context, in *IcefsFsyncDirReq, opts ...grpc.CallOption) (*IcefsFsyncDirRes, error) {
	out := new(IcefsFsyncDirRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsFsyncDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsStatFS(ctx context.Context, in *IcefsStatFSReq, opts ...grpc.CallOption) (*IcefsStatFSRes, error) {
	out := new(IcefsStatFSRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsStatFS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsSetXattr(ctx context.Context, in *IcefsSetXattrReq, opts ...grpc.CallOption) (*IcefsSetXattrRes, error) {
	out := new(IcefsSetXattrRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsSetXattr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsGetXattr(ctx context.Context, in *IcefsGetXattrReq, opts ...grpc.CallOption) (*IcefsGetXattrRes, error) {
	out := new(IcefsGetXattrRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsGetXattr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsListXattr(ctx context.Context, in *IcefsListXattrReq, opts ...grpc.CallOption) (*IcefsListXattrRes, error) {
	out := new(IcefsListXattrRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsListXattr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsRemoveXattr(ctx context.Context, in *IcefsRemoveXattrReq, opts ...grpc.CallOption) (*IcefsRemoveXattrRes, error) {
	out := new(IcefsRemoveXattrRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsRemoveXattr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsAccess(ctx context.Context, in *IcefsAccessReq, opts ...grpc.CallOption) (*IcefsAccessRes, error) {
	out := new(IcefsAccessRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsCreate(ctx context.Context, in *IcefsCreateReq, opts ...grpc.CallOption) (*IcefsCreateRes, error) {
	out := new(IcefsCreateRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsGetLk(ctx context.Context, in *IcefsGetLkReq, opts ...grpc.CallOption) (*IcefsGetLkRes, error) {
	out := new(IcefsGetLkRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsGetLk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsSetLk(ctx context.Context, in *IcefsSetLkReq, opts ...grpc.CallOption) (*IcefsSetLkRes, error) {
	out := new(IcefsSetLkRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsSetLk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsBmap(ctx context.Context, in *IcefsBmapReq, opts ...grpc.CallOption) (*IcefsBmapRes, error) {
	out := new(IcefsBmapRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsBmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsIoctl(ctx context.Context, in *IcefsIoctlReq, opts ...grpc.CallOption) (*IcefsIoctlRes, error) {
	out := new(IcefsIoctlRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsIoctl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsPoll(ctx context.Context, in *IcefsPollReq, opts ...grpc.CallOption) (*IcefsPollRes, error) {
	out := new(IcefsPollRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsWriteBuf(ctx context.Context, in *IcefsWriteBufReq, opts ...grpc.CallOption) (*IcefsWriteBufRes, error) {
	out := new(IcefsWriteBufRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsWriteBuf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsRetrieveReply(ctx context.Context, in *IcefsRetrieveReplyReq, opts ...grpc.CallOption) (*IcefsRetrieveReplyRes, error) {
	out := new(IcefsRetrieveReplyRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsRetrieveReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsForgetMulti(ctx context.Context, in *IcefsForgetMultiReq, opts ...grpc.CallOption) (*IcefsForgetMultiRes, error) {
	out := new(IcefsForgetMultiRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsForgetMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsFlock(ctx context.Context, in *IcefsFlockReq, opts ...grpc.CallOption) (*IcefsFlockRes, error) {
	out := new(IcefsFlockRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsFlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsFallocate(ctx context.Context, in *IcefsFallocateReq, opts ...grpc.CallOption) (*IcefsFallocateRes, error) {
	out := new(IcefsFallocateRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsFallocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsReadDirPlus(ctx context.Context, in *IcefsReadDirPlusReq, opts ...grpc.CallOption) (*IcefsReadDirPlusRes, error) {
	out := new(IcefsReadDirPlusRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsReadDirPlus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsCopyFileRange(ctx context.Context, in *IcefsCopyFileRangeReq, opts ...grpc.CallOption) (*IcefsCopyFileRangeRes, error) {
	out := new(IcefsCopyFileRangeRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsCopyFileRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icefsClient) DoIcefsLseek(ctx context.Context, in *IcefsLseekReq, opts ...grpc.CallOption) (*IcefsLseekRes, error) {
	out := new(IcefsLseekRes)
	err := c.cc.Invoke(ctx, "/Icefs/DoIcefsLseek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IcefsServer is the server API for Icefs service.
// All implementations must embed UnimplementedIcefsServer
// for forward compatibility
type IcefsServer interface {
	DoIcefsInit(context.Context, *IcefsInitReq) (*IcefsInitRes, error)
	DoIcefsDestroy(context.Context, *IcefsDestroyReq) (*IcefsDestroyRes, error)
	DoIcefsLookUp(context.Context, *IcefsLookUpReq) (*IcefsLookUpRes, error)
	DoIcefsForget(context.Context, *IcefsForgetReq) (*IcefsForgetRes, error)
	DoIcefsGetAttr(context.Context, *IcefsGetAttrReq) (*IcefsGetAttrRes, error)
	DoIcefsSetAttr(context.Context, *IcefsSetAttrReq) (*IcefsSetAttrRes, error)
	DoIcefsReadLink(context.Context, *IcefsReadLinkReq) (*IcefsReadLinkRes, error)
	DoIcefsMknod(context.Context, *IcefsMknodReq) (*IcefsMknodRes, error)
	DoIcefsMkDir(context.Context, *IcefsMkDirReq) (*IcefsMkDirRes, error)
	DoIcefsUnlink(context.Context, *IcefsUnlinkReq) (*IcefsUnlinkRes, error)
	DoIcefsRmDir(context.Context, *IcefsRmDirReq) (*IcefsRmDirRes, error)
	DoIcefsSymLink(context.Context, *IcefsSymLinkReq) (*IcefsSymLinkRes, error)
	DoIcefsRename(context.Context, *IcefsRenameReq) (*IcefsRenameRes, error)
	DoIcefsLink(context.Context, *IcefsLinkReq) (*IcefsLinkRes, error)
	DoIcefsOpen(context.Context, *IcefsOpenReq) (*IcefsOpenRes, error)
	DoIcefsRead(context.Context, *IcefsReadReq) (*IcefsReadRes, error)
	DoIcefsWrite(context.Context, *IcefsWriteReq) (*IcefsWriteRes, error)
	DoIcefsFlush(context.Context, *IcefsFlushReq) (*IcefsFlushRes, error)
	DoIcefsRelease(context.Context, *IcefsReleaseReq) (*IcefsReleaseRes, error)
	DoIcefsFsync(context.Context, *IcefsFsyncReq) (*IcefsFsyncRes, error)
	DoIcefsOpenDir(context.Context, *IcefsOpenDirReq) (*IcefsOpenDirRes, error)
	DoIcefsReadDir(context.Context, *IcefsReadDirReq) (*IcefsReadDirRes, error)
	DoIcefsReleaseDir(context.Context, *IcefsReleaseDirReq) (*IcefsReleaseDirRes, error)
	DoIcefsFsyncDir(context.Context, *IcefsFsyncDirReq) (*IcefsFsyncDirRes, error)
	DoIcefsStatFS(context.Context, *IcefsStatFSReq) (*IcefsStatFSRes, error)
	DoIcefsSetXattr(context.Context, *IcefsSetXattrReq) (*IcefsSetXattrRes, error)
	DoIcefsGetXattr(context.Context, *IcefsGetXattrReq) (*IcefsGetXattrRes, error)
	DoIcefsListXattr(context.Context, *IcefsListXattrReq) (*IcefsListXattrRes, error)
	DoIcefsRemoveXattr(context.Context, *IcefsRemoveXattrReq) (*IcefsRemoveXattrRes, error)
	DoIcefsAccess(context.Context, *IcefsAccessReq) (*IcefsAccessRes, error)
	DoIcefsCreate(context.Context, *IcefsCreateReq) (*IcefsCreateRes, error)
	DoIcefsGetLk(context.Context, *IcefsGetLkReq) (*IcefsGetLkRes, error)
	DoIcefsSetLk(context.Context, *IcefsSetLkReq) (*IcefsSetLkRes, error)
	DoIcefsBmap(context.Context, *IcefsBmapReq) (*IcefsBmapRes, error)
	DoIcefsIoctl(context.Context, *IcefsIoctlReq) (*IcefsIoctlRes, error)
	DoIcefsPoll(context.Context, *IcefsPollReq) (*IcefsPollRes, error)
	DoIcefsWriteBuf(context.Context, *IcefsWriteBufReq) (*IcefsWriteBufRes, error)
	DoIcefsRetrieveReply(context.Context, *IcefsRetrieveReplyReq) (*IcefsRetrieveReplyRes, error)
	DoIcefsForgetMulti(context.Context, *IcefsForgetMultiReq) (*IcefsForgetMultiRes, error)
	DoIcefsFlock(context.Context, *IcefsFlockReq) (*IcefsFlockRes, error)
	DoIcefsFallocate(context.Context, *IcefsFallocateReq) (*IcefsFallocateRes, error)
	DoIcefsReadDirPlus(context.Context, *IcefsReadDirPlusReq) (*IcefsReadDirPlusRes, error)
	DoIcefsCopyFileRange(context.Context, *IcefsCopyFileRangeReq) (*IcefsCopyFileRangeRes, error)
	DoIcefsLseek(context.Context, *IcefsLseekReq) (*IcefsLseekRes, error)
	mustEmbedUnimplementedIcefsServer()
}

// UnimplementedIcefsServer must be embedded to have forward compatible implementations.
type UnimplementedIcefsServer struct {
}

func (UnimplementedIcefsServer) DoIcefsInit(context.Context, *IcefsInitReq) (*IcefsInitRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsInit not implemented")
}
func (UnimplementedIcefsServer) DoIcefsDestroy(context.Context, *IcefsDestroyReq) (*IcefsDestroyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsDestroy not implemented")
}
func (UnimplementedIcefsServer) DoIcefsLookUp(context.Context, *IcefsLookUpReq) (*IcefsLookUpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsLookUp not implemented")
}
func (UnimplementedIcefsServer) DoIcefsForget(context.Context, *IcefsForgetReq) (*IcefsForgetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsForget not implemented")
}
func (UnimplementedIcefsServer) DoIcefsGetAttr(context.Context, *IcefsGetAttrReq) (*IcefsGetAttrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsGetAttr not implemented")
}
func (UnimplementedIcefsServer) DoIcefsSetAttr(context.Context, *IcefsSetAttrReq) (*IcefsSetAttrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsSetAttr not implemented")
}
func (UnimplementedIcefsServer) DoIcefsReadLink(context.Context, *IcefsReadLinkReq) (*IcefsReadLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsReadLink not implemented")
}
func (UnimplementedIcefsServer) DoIcefsMknod(context.Context, *IcefsMknodReq) (*IcefsMknodRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsMknod not implemented")
}
func (UnimplementedIcefsServer) DoIcefsMkDir(context.Context, *IcefsMkDirReq) (*IcefsMkDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsMkDir not implemented")
}
func (UnimplementedIcefsServer) DoIcefsUnlink(context.Context, *IcefsUnlinkReq) (*IcefsUnlinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsUnlink not implemented")
}
func (UnimplementedIcefsServer) DoIcefsRmDir(context.Context, *IcefsRmDirReq) (*IcefsRmDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsRmDir not implemented")
}
func (UnimplementedIcefsServer) DoIcefsSymLink(context.Context, *IcefsSymLinkReq) (*IcefsSymLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsSymLink not implemented")
}
func (UnimplementedIcefsServer) DoIcefsRename(context.Context, *IcefsRenameReq) (*IcefsRenameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsRename not implemented")
}
func (UnimplementedIcefsServer) DoIcefsLink(context.Context, *IcefsLinkReq) (*IcefsLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsLink not implemented")
}
func (UnimplementedIcefsServer) DoIcefsOpen(context.Context, *IcefsOpenReq) (*IcefsOpenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsOpen not implemented")
}
func (UnimplementedIcefsServer) DoIcefsRead(context.Context, *IcefsReadReq) (*IcefsReadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsRead not implemented")
}
func (UnimplementedIcefsServer) DoIcefsWrite(context.Context, *IcefsWriteReq) (*IcefsWriteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsWrite not implemented")
}
func (UnimplementedIcefsServer) DoIcefsFlush(context.Context, *IcefsFlushReq) (*IcefsFlushRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsFlush not implemented")
}
func (UnimplementedIcefsServer) DoIcefsRelease(context.Context, *IcefsReleaseReq) (*IcefsReleaseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsRelease not implemented")
}
func (UnimplementedIcefsServer) DoIcefsFsync(context.Context, *IcefsFsyncReq) (*IcefsFsyncRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsFsync not implemented")
}
func (UnimplementedIcefsServer) DoIcefsOpenDir(context.Context, *IcefsOpenDirReq) (*IcefsOpenDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsOpenDir not implemented")
}
func (UnimplementedIcefsServer) DoIcefsReadDir(context.Context, *IcefsReadDirReq) (*IcefsReadDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsReadDir not implemented")
}
func (UnimplementedIcefsServer) DoIcefsReleaseDir(context.Context, *IcefsReleaseDirReq) (*IcefsReleaseDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsReleaseDir not implemented")
}
func (UnimplementedIcefsServer) DoIcefsFsyncDir(context.Context, *IcefsFsyncDirReq) (*IcefsFsyncDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsFsyncDir not implemented")
}
func (UnimplementedIcefsServer) DoIcefsStatFS(context.Context, *IcefsStatFSReq) (*IcefsStatFSRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsStatFS not implemented")
}
func (UnimplementedIcefsServer) DoIcefsSetXattr(context.Context, *IcefsSetXattrReq) (*IcefsSetXattrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsSetXattr not implemented")
}
func (UnimplementedIcefsServer) DoIcefsGetXattr(context.Context, *IcefsGetXattrReq) (*IcefsGetXattrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsGetXattr not implemented")
}
func (UnimplementedIcefsServer) DoIcefsListXattr(context.Context, *IcefsListXattrReq) (*IcefsListXattrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsListXattr not implemented")
}
func (UnimplementedIcefsServer) DoIcefsRemoveXattr(context.Context, *IcefsRemoveXattrReq) (*IcefsRemoveXattrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsRemoveXattr not implemented")
}
func (UnimplementedIcefsServer) DoIcefsAccess(context.Context, *IcefsAccessReq) (*IcefsAccessRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsAccess not implemented")
}
func (UnimplementedIcefsServer) DoIcefsCreate(context.Context, *IcefsCreateReq) (*IcefsCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsCreate not implemented")
}
func (UnimplementedIcefsServer) DoIcefsGetLk(context.Context, *IcefsGetLkReq) (*IcefsGetLkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsGetLk not implemented")
}
func (UnimplementedIcefsServer) DoIcefsSetLk(context.Context, *IcefsSetLkReq) (*IcefsSetLkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsSetLk not implemented")
}
func (UnimplementedIcefsServer) DoIcefsBmap(context.Context, *IcefsBmapReq) (*IcefsBmapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsBmap not implemented")
}
func (UnimplementedIcefsServer) DoIcefsIoctl(context.Context, *IcefsIoctlReq) (*IcefsIoctlRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsIoctl not implemented")
}
func (UnimplementedIcefsServer) DoIcefsPoll(context.Context, *IcefsPollReq) (*IcefsPollRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsPoll not implemented")
}
func (UnimplementedIcefsServer) DoIcefsWriteBuf(context.Context, *IcefsWriteBufReq) (*IcefsWriteBufRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsWriteBuf not implemented")
}
func (UnimplementedIcefsServer) DoIcefsRetrieveReply(context.Context, *IcefsRetrieveReplyReq) (*IcefsRetrieveReplyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsRetrieveReply not implemented")
}
func (UnimplementedIcefsServer) DoIcefsForgetMulti(context.Context, *IcefsForgetMultiReq) (*IcefsForgetMultiRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsForgetMulti not implemented")
}
func (UnimplementedIcefsServer) DoIcefsFlock(context.Context, *IcefsFlockReq) (*IcefsFlockRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsFlock not implemented")
}
func (UnimplementedIcefsServer) DoIcefsFallocate(context.Context, *IcefsFallocateReq) (*IcefsFallocateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsFallocate not implemented")
}
func (UnimplementedIcefsServer) DoIcefsReadDirPlus(context.Context, *IcefsReadDirPlusReq) (*IcefsReadDirPlusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsReadDirPlus not implemented")
}
func (UnimplementedIcefsServer) DoIcefsCopyFileRange(context.Context, *IcefsCopyFileRangeReq) (*IcefsCopyFileRangeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsCopyFileRange not implemented")
}
func (UnimplementedIcefsServer) DoIcefsLseek(context.Context, *IcefsLseekReq) (*IcefsLseekRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoIcefsLseek not implemented")
}
func (UnimplementedIcefsServer) mustEmbedUnimplementedIcefsServer() {}

// UnsafeIcefsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IcefsServer will
// result in compilation errors.
type UnsafeIcefsServer interface {
	mustEmbedUnimplementedIcefsServer()
}

func RegisterIcefsServer(s grpc.ServiceRegistrar, srv IcefsServer) {
	s.RegisterService(&Icefs_ServiceDesc, srv)
}

func _Icefs_DoIcefsInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsInitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsInit(ctx, req.(*IcefsInitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsDestroyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsDestroy(ctx, req.(*IcefsDestroyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsLookUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsLookUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsLookUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsLookUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsLookUp(ctx, req.(*IcefsLookUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsForget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsForgetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsForget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsForget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsForget(ctx, req.(*IcefsForgetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsGetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsGetAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsGetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsGetAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsGetAttr(ctx, req.(*IcefsGetAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsSetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsSetAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsSetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsSetAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsSetAttr(ctx, req.(*IcefsSetAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsReadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsReadLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsReadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsReadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsReadLink(ctx, req.(*IcefsReadLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsMknod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsMknodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsMknod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsMknod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsMknod(ctx, req.(*IcefsMknodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsMkDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsMkDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsMkDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsMkDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsMkDir(ctx, req.(*IcefsMkDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsUnlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsUnlinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsUnlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsUnlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsUnlink(ctx, req.(*IcefsUnlinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsRmDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsRmDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsRmDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsRmDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsRmDir(ctx, req.(*IcefsRmDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsSymLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsSymLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsSymLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsSymLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsSymLink(ctx, req.(*IcefsSymLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsRename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsRenameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsRename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsRename(ctx, req.(*IcefsRenameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsLink(ctx, req.(*IcefsLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsOpenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsOpen(ctx, req.(*IcefsOpenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsRead(ctx, req.(*IcefsReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsWriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsWrite(ctx, req.(*IcefsWriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsFlush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsFlushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsFlush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsFlush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsFlush(ctx, req.(*IcefsFlushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsRelease(ctx, req.(*IcefsReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsFsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsFsyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsFsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsFsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsFsync(ctx, req.(*IcefsFsyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsOpenDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsOpenDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsOpenDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsOpenDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsOpenDir(ctx, req.(*IcefsOpenDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsReadDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsReadDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsReadDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsReadDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsReadDir(ctx, req.(*IcefsReadDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsReleaseDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsReleaseDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsReleaseDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsReleaseDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsReleaseDir(ctx, req.(*IcefsReleaseDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsFsyncDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsFsyncDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsFsyncDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsFsyncDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsFsyncDir(ctx, req.(*IcefsFsyncDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsStatFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsStatFSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsStatFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsStatFS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsStatFS(ctx, req.(*IcefsStatFSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsSetXattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsSetXattrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsSetXattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsSetXattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsSetXattr(ctx, req.(*IcefsSetXattrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsGetXattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsGetXattrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsGetXattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsGetXattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsGetXattr(ctx, req.(*IcefsGetXattrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsListXattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsListXattrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsListXattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsListXattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsListXattr(ctx, req.(*IcefsListXattrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsRemoveXattr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsRemoveXattrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsRemoveXattr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsRemoveXattr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsRemoveXattr(ctx, req.(*IcefsRemoveXattrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsAccessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsAccess(ctx, req.(*IcefsAccessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsCreate(ctx, req.(*IcefsCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsGetLk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsGetLkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsGetLk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsGetLk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsGetLk(ctx, req.(*IcefsGetLkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsSetLk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsSetLkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsSetLk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsSetLk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsSetLk(ctx, req.(*IcefsSetLkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsBmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsBmapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsBmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsBmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsBmap(ctx, req.(*IcefsBmapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsIoctl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsIoctlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsIoctl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsIoctl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsIoctl(ctx, req.(*IcefsIoctlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsPollReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsPoll(ctx, req.(*IcefsPollReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsWriteBuf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsWriteBufReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsWriteBuf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsWriteBuf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsWriteBuf(ctx, req.(*IcefsWriteBufReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsRetrieveReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsRetrieveReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsRetrieveReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsRetrieveReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsRetrieveReply(ctx, req.(*IcefsRetrieveReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsForgetMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsForgetMultiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsForgetMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsForgetMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsForgetMulti(ctx, req.(*IcefsForgetMultiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsFlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsFlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsFlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsFlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsFlock(ctx, req.(*IcefsFlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsFallocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsFallocateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsFallocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsFallocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsFallocate(ctx, req.(*IcefsFallocateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsReadDirPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsReadDirPlusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsReadDirPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsReadDirPlus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsReadDirPlus(ctx, req.(*IcefsReadDirPlusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsCopyFileRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsCopyFileRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsCopyFileRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsCopyFileRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsCopyFileRange(ctx, req.(*IcefsCopyFileRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icefs_DoIcefsLseek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcefsLseekReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcefsServer).DoIcefsLseek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icefs/DoIcefsLseek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcefsServer).DoIcefsLseek(ctx, req.(*IcefsLseekReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Icefs_ServiceDesc is the grpc.ServiceDesc for Icefs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Icefs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Icefs",
	HandlerType: (*IcefsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoIcefsInit",
			Handler:    _Icefs_DoIcefsInit_Handler,
		},
		{
			MethodName: "DoIcefsDestroy",
			Handler:    _Icefs_DoIcefsDestroy_Handler,
		},
		{
			MethodName: "DoIcefsLookUp",
			Handler:    _Icefs_DoIcefsLookUp_Handler,
		},
		{
			MethodName: "DoIcefsForget",
			Handler:    _Icefs_DoIcefsForget_Handler,
		},
		{
			MethodName: "DoIcefsGetAttr",
			Handler:    _Icefs_DoIcefsGetAttr_Handler,
		},
		{
			MethodName: "DoIcefsSetAttr",
			Handler:    _Icefs_DoIcefsSetAttr_Handler,
		},
		{
			MethodName: "DoIcefsReadLink",
			Handler:    _Icefs_DoIcefsReadLink_Handler,
		},
		{
			MethodName: "DoIcefsMknod",
			Handler:    _Icefs_DoIcefsMknod_Handler,
		},
		{
			MethodName: "DoIcefsMkDir",
			Handler:    _Icefs_DoIcefsMkDir_Handler,
		},
		{
			MethodName: "DoIcefsUnlink",
			Handler:    _Icefs_DoIcefsUnlink_Handler,
		},
		{
			MethodName: "DoIcefsRmDir",
			Handler:    _Icefs_DoIcefsRmDir_Handler,
		},
		{
			MethodName: "DoIcefsSymLink",
			Handler:    _Icefs_DoIcefsSymLink_Handler,
		},
		{
			MethodName: "DoIcefsRename",
			Handler:    _Icefs_DoIcefsRename_Handler,
		},
		{
			MethodName: "DoIcefsLink",
			Handler:    _Icefs_DoIcefsLink_Handler,
		},
		{
			MethodName: "DoIcefsOpen",
			Handler:    _Icefs_DoIcefsOpen_Handler,
		},
		{
			MethodName: "DoIcefsRead",
			Handler:    _Icefs_DoIcefsRead_Handler,
		},
		{
			MethodName: "DoIcefsWrite",
			Handler:    _Icefs_DoIcefsWrite_Handler,
		},
		{
			MethodName: "DoIcefsFlush",
			Handler:    _Icefs_DoIcefsFlush_Handler,
		},
		{
			MethodName: "DoIcefsRelease",
			Handler:    _Icefs_DoIcefsRelease_Handler,
		},
		{
			MethodName: "DoIcefsFsync",
			Handler:    _Icefs_DoIcefsFsync_Handler,
		},
		{
			MethodName: "DoIcefsOpenDir",
			Handler:    _Icefs_DoIcefsOpenDir_Handler,
		},
		{
			MethodName: "DoIcefsReadDir",
			Handler:    _Icefs_DoIcefsReadDir_Handler,
		},
		{
			MethodName: "DoIcefsReleaseDir",
			Handler:    _Icefs_DoIcefsReleaseDir_Handler,
		},
		{
			MethodName: "DoIcefsFsyncDir",
			Handler:    _Icefs_DoIcefsFsyncDir_Handler,
		},
		{
			MethodName: "DoIcefsStatFS",
			Handler:    _Icefs_DoIcefsStatFS_Handler,
		},
		{
			MethodName: "DoIcefsSetXattr",
			Handler:    _Icefs_DoIcefsSetXattr_Handler,
		},
		{
			MethodName: "DoIcefsGetXattr",
			Handler:    _Icefs_DoIcefsGetXattr_Handler,
		},
		{
			MethodName: "DoIcefsListXattr",
			Handler:    _Icefs_DoIcefsListXattr_Handler,
		},
		{
			MethodName: "DoIcefsRemoveXattr",
			Handler:    _Icefs_DoIcefsRemoveXattr_Handler,
		},
		{
			MethodName: "DoIcefsAccess",
			Handler:    _Icefs_DoIcefsAccess_Handler,
		},
		{
			MethodName: "DoIcefsCreate",
			Handler:    _Icefs_DoIcefsCreate_Handler,
		},
		{
			MethodName: "DoIcefsGetLk",
			Handler:    _Icefs_DoIcefsGetLk_Handler,
		},
		{
			MethodName: "DoIcefsSetLk",
			Handler:    _Icefs_DoIcefsSetLk_Handler,
		},
		{
			MethodName: "DoIcefsBmap",
			Handler:    _Icefs_DoIcefsBmap_Handler,
		},
		{
			MethodName: "DoIcefsIoctl",
			Handler:    _Icefs_DoIcefsIoctl_Handler,
		},
		{
			MethodName: "DoIcefsPoll",
			Handler:    _Icefs_DoIcefsPoll_Handler,
		},
		{
			MethodName: "DoIcefsWriteBuf",
			Handler:    _Icefs_DoIcefsWriteBuf_Handler,
		},
		{
			MethodName: "DoIcefsRetrieveReply",
			Handler:    _Icefs_DoIcefsRetrieveReply_Handler,
		},
		{
			MethodName: "DoIcefsForgetMulti",
			Handler:    _Icefs_DoIcefsForgetMulti_Handler,
		},
		{
			MethodName: "DoIcefsFlock",
			Handler:    _Icefs_DoIcefsFlock_Handler,
		},
		{
			MethodName: "DoIcefsFallocate",
			Handler:    _Icefs_DoIcefsFallocate_Handler,
		},
		{
			MethodName: "DoIcefsReadDirPlus",
			Handler:    _Icefs_DoIcefsReadDirPlus_Handler,
		},
		{
			MethodName: "DoIcefsCopyFileRange",
			Handler:    _Icefs_DoIcefsCopyFileRange_Handler,
		},
		{
			MethodName: "DoIcefsLseek",
			Handler:    _Icefs_DoIcefsLseek_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "icefsServices.proto",
}
