// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package icefsthrift

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type Ui8 int8

func Ui8Ptr(v Ui8) *Ui8 { return &v }

type Ui16 int16

func Ui16Ptr(v Ui16) *Ui16 { return &v }

type Ui32 int32

func Ui32Ptr(v Ui32) *Ui32 { return &v }

type Ui64 int64

func Ui64Ptr(v Ui64) *Ui64 { return &v }

// Attributes:
//  - UID
//  - Gid
//  - Pid
//  - Umask
type FuseCtx struct {
  UID Ui32 `thrift:"uid,1" db:"uid" json:"uid"`
  Gid Ui32 `thrift:"gid,2" db:"gid" json:"gid"`
  Pid int32 `thrift:"pid,3" db:"pid" json:"pid"`
  Umask Ui32 `thrift:"umask,4" db:"umask" json:"umask"`
}

func NewFuseCtx() *FuseCtx {
  return &FuseCtx{}
}


func (p *FuseCtx) GetUID() Ui32 {
  return p.UID
}

func (p *FuseCtx) GetGid() Ui32 {
  return p.Gid
}

func (p *FuseCtx) GetPid() int32 {
  return p.Pid
}

func (p *FuseCtx) GetUmask() Ui32 {
  return p.Umask
}
func (p *FuseCtx) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FuseCtx)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui32(v)
  p.UID = temp
}
  return nil
}

func (p *FuseCtx)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui32(v)
  p.Gid = temp
}
  return nil
}

func (p *FuseCtx)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pid = v
}
  return nil
}

func (p *FuseCtx)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Ui32(v)
  p.Umask = temp
}
  return nil
}

func (p *FuseCtx) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FuseCtx"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FuseCtx) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uid", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *FuseCtx) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Gid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gid: ", p), err) }
  return err
}

func (p *FuseCtx) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Pid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pid: ", p), err) }
  return err
}

func (p *FuseCtx) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "umask", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:umask: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Umask)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.umask (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:umask: ", p), err) }
  return err
}

func (p *FuseCtx) Equals(other *FuseCtx) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UID != other.UID { return false }
  if p.Gid != other.Gid { return false }
  if p.Pid != other.Pid { return false }
  if p.Umask != other.Umask { return false }
  return true
}

func (p *FuseCtx) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FuseCtx(%+v)", *p)
}

// Attributes:
//  - Unique
//  - Ctx
type FuseReq struct {
  Unique Ui64 `thrift:"unique,1" db:"unique" json:"unique"`
  Ctx *FuseCtx `thrift:"ctx,2" db:"ctx" json:"ctx"`
}

func NewFuseReq() *FuseReq {
  return &FuseReq{}
}


func (p *FuseReq) GetUnique() Ui64 {
  return p.Unique
}
var FuseReq_Ctx_DEFAULT *FuseCtx
func (p *FuseReq) GetCtx() *FuseCtx {
  if !p.IsSetCtx() {
    return FuseReq_Ctx_DEFAULT
  }
return p.Ctx
}
func (p *FuseReq) IsSetCtx() bool {
  return p.Ctx != nil
}

func (p *FuseReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FuseReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Unique = temp
}
  return nil
}

func (p *FuseReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ctx = &FuseCtx{}
  if err := p.Ctx.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ctx), err)
  }
  return nil
}

func (p *FuseReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FuseReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FuseReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "unique", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unique: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Unique)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unique (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unique: ", p), err) }
  return err
}

func (p *FuseReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ctx", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ctx: ", p), err) }
  if err := p.Ctx.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ctx), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ctx: ", p), err) }
  return err
}

func (p *FuseReq) Equals(other *FuseReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Unique != other.Unique { return false }
  if !p.Ctx.Equals(other.Ctx) { return false }
  return true
}

func (p *FuseReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FuseReq(%+v)", *p)
}

// Attributes:
//  - Flags
//  - Writepage
//  - DirectIo
//  - KeepCache
//  - Flush
//  - Nonseekable
//  - FlockRelease
//  - CacheReaddir
//  - Noflush
//  - Fh
//  - LockOwner
//  - PollEvents
type FuseFileInfo struct {
  Flags int32 `thrift:"flags,1" db:"flags" json:"flags"`
  Writepage bool `thrift:"writepage,2" db:"writepage" json:"writepage"`
  DirectIo bool `thrift:"direct_io,3" db:"direct_io" json:"direct_io"`
  KeepCache bool `thrift:"keep_cache,4" db:"keep_cache" json:"keep_cache"`
  Flush bool `thrift:"flush,5" db:"flush" json:"flush"`
  Nonseekable bool `thrift:"nonseekable,6" db:"nonseekable" json:"nonseekable"`
  FlockRelease bool `thrift:"flock_release,7" db:"flock_release" json:"flock_release"`
  CacheReaddir bool `thrift:"cache_readdir,8" db:"cache_readdir" json:"cache_readdir"`
  Noflush bool `thrift:"noflush,9" db:"noflush" json:"noflush"`
  Fh Ui64 `thrift:"fh,10" db:"fh" json:"fh"`
  LockOwner Ui64 `thrift:"lock_owner,11" db:"lock_owner" json:"lock_owner"`
  PollEvents Ui32 `thrift:"poll_events,12" db:"poll_events" json:"poll_events"`
}

func NewFuseFileInfo() *FuseFileInfo {
  return &FuseFileInfo{}
}


func (p *FuseFileInfo) GetFlags() int32 {
  return p.Flags
}

func (p *FuseFileInfo) GetWritepage() bool {
  return p.Writepage
}

func (p *FuseFileInfo) GetDirectIo() bool {
  return p.DirectIo
}

func (p *FuseFileInfo) GetKeepCache() bool {
  return p.KeepCache
}

func (p *FuseFileInfo) GetFlush() bool {
  return p.Flush
}

func (p *FuseFileInfo) GetNonseekable() bool {
  return p.Nonseekable
}

func (p *FuseFileInfo) GetFlockRelease() bool {
  return p.FlockRelease
}

func (p *FuseFileInfo) GetCacheReaddir() bool {
  return p.CacheReaddir
}

func (p *FuseFileInfo) GetNoflush() bool {
  return p.Noflush
}

func (p *FuseFileInfo) GetFh() Ui64 {
  return p.Fh
}

func (p *FuseFileInfo) GetLockOwner() Ui64 {
  return p.LockOwner
}

func (p *FuseFileInfo) GetPollEvents() Ui32 {
  return p.PollEvents
}
func (p *FuseFileInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FuseFileInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Flags = v
}
  return nil
}

func (p *FuseFileInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Writepage = v
}
  return nil
}

func (p *FuseFileInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DirectIo = v
}
  return nil
}

func (p *FuseFileInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KeepCache = v
}
  return nil
}

func (p *FuseFileInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Flush = v
}
  return nil
}

func (p *FuseFileInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Nonseekable = v
}
  return nil
}

func (p *FuseFileInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.FlockRelease = v
}
  return nil
}

func (p *FuseFileInfo)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CacheReaddir = v
}
  return nil
}

func (p *FuseFileInfo)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Noflush = v
}
  return nil
}

func (p *FuseFileInfo)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *FuseFileInfo)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := Ui64(v)
  p.LockOwner = temp
}
  return nil
}

func (p *FuseFileInfo)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := Ui32(v)
  p.PollEvents = temp
}
  return nil
}

func (p *FuseFileInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FuseFileInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FuseFileInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flags", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:flags: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Flags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flags (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:flags: ", p), err) }
  return err
}

func (p *FuseFileInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "writepage", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:writepage: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Writepage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.writepage (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:writepage: ", p), err) }
  return err
}

func (p *FuseFileInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "direct_io", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:direct_io: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.DirectIo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direct_io (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:direct_io: ", p), err) }
  return err
}

func (p *FuseFileInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keep_cache", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:keep_cache: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.KeepCache)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keep_cache (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:keep_cache: ", p), err) }
  return err
}

func (p *FuseFileInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flush", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:flush: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Flush)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flush (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:flush: ", p), err) }
  return err
}

func (p *FuseFileInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nonseekable", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nonseekable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Nonseekable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nonseekable (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nonseekable: ", p), err) }
  return err
}

func (p *FuseFileInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flock_release", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:flock_release: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.FlockRelease)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flock_release (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:flock_release: ", p), err) }
  return err
}

func (p *FuseFileInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cache_readdir", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:cache_readdir: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CacheReaddir)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cache_readdir (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:cache_readdir: ", p), err) }
  return err
}

func (p *FuseFileInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "noflush", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:noflush: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Noflush)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.noflush (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:noflush: ", p), err) }
  return err
}

func (p *FuseFileInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:fh: ", p), err) }
  return err
}

func (p *FuseFileInfo) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lock_owner", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:lock_owner: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LockOwner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lock_owner (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:lock_owner: ", p), err) }
  return err
}

func (p *FuseFileInfo) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "poll_events", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:poll_events: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PollEvents)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.poll_events (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:poll_events: ", p), err) }
  return err
}

func (p *FuseFileInfo) Equals(other *FuseFileInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Flags != other.Flags { return false }
  if p.Writepage != other.Writepage { return false }
  if p.DirectIo != other.DirectIo { return false }
  if p.KeepCache != other.KeepCache { return false }
  if p.Flush != other.Flush { return false }
  if p.Nonseekable != other.Nonseekable { return false }
  if p.FlockRelease != other.FlockRelease { return false }
  if p.CacheReaddir != other.CacheReaddir { return false }
  if p.Noflush != other.Noflush { return false }
  if p.Fh != other.Fh { return false }
  if p.LockOwner != other.LockOwner { return false }
  if p.PollEvents != other.PollEvents { return false }
  return true
}

func (p *FuseFileInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FuseFileInfo(%+v)", *p)
}

// Attributes:
//  - LockType
//  - LockWhence
//  - LockStart
//  - LockLen
//  - LockPid
type FlockStruct struct {
  LockType int32 `thrift:"lock_type,1" db:"lock_type" json:"lock_type"`
  LockWhence int32 `thrift:"lock_whence,2" db:"lock_whence" json:"lock_whence"`
  LockStart int64 `thrift:"lock_start,3" db:"lock_start" json:"lock_start"`
  LockLen int64 `thrift:"lock_len,4" db:"lock_len" json:"lock_len"`
  LockPid int32 `thrift:"lock_pid,5" db:"lock_pid" json:"lock_pid"`
}

func NewFlockStruct() *FlockStruct {
  return &FlockStruct{}
}


func (p *FlockStruct) GetLockType() int32 {
  return p.LockType
}

func (p *FlockStruct) GetLockWhence() int32 {
  return p.LockWhence
}

func (p *FlockStruct) GetLockStart() int64 {
  return p.LockStart
}

func (p *FlockStruct) GetLockLen() int64 {
  return p.LockLen
}

func (p *FlockStruct) GetLockPid() int32 {
  return p.LockPid
}
func (p *FlockStruct) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FlockStruct)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LockType = v
}
  return nil
}

func (p *FlockStruct)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LockWhence = v
}
  return nil
}

func (p *FlockStruct)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LockStart = v
}
  return nil
}

func (p *FlockStruct)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LockLen = v
}
  return nil
}

func (p *FlockStruct)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LockPid = v
}
  return nil
}

func (p *FlockStruct) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "flockStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FlockStruct) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lock_type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lock_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.LockType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lock_type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lock_type: ", p), err) }
  return err
}

func (p *FlockStruct) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lock_whence", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lock_whence: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.LockWhence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lock_whence (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lock_whence: ", p), err) }
  return err
}

func (p *FlockStruct) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lock_start", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lock_start: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LockStart)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lock_start (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lock_start: ", p), err) }
  return err
}

func (p *FlockStruct) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lock_len", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lock_len: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LockLen)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lock_len (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lock_len: ", p), err) }
  return err
}

func (p *FlockStruct) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lock_pid", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lock_pid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.LockPid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lock_pid (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lock_pid: ", p), err) }
  return err
}

func (p *FlockStruct) Equals(other *FlockStruct) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.LockType != other.LockType { return false }
  if p.LockWhence != other.LockWhence { return false }
  if p.LockStart != other.LockStart { return false }
  if p.LockLen != other.LockLen { return false }
  if p.LockPid != other.LockPid { return false }
  return true
}

func (p *FlockStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FlockStruct(%+v)", *p)
}

// Attributes:
//  - TimeSec
//  - TimeNSec
type TimeStruct struct {
  TimeSec int64 `thrift:"time_sec,1" db:"time_sec" json:"time_sec"`
  TimeNSec int64 `thrift:"time_n_sec,2" db:"time_n_sec" json:"time_n_sec"`
}

func NewTimeStruct() *TimeStruct {
  return &TimeStruct{}
}


func (p *TimeStruct) GetTimeSec() int64 {
  return p.TimeSec
}

func (p *TimeStruct) GetTimeNSec() int64 {
  return p.TimeNSec
}
func (p *TimeStruct) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimeStruct)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TimeSec = v
}
  return nil
}

func (p *TimeStruct)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeNSec = v
}
  return nil
}

func (p *TimeStruct) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timeStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimeStruct) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "time_sec", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:time_sec: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TimeSec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time_sec (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:time_sec: ", p), err) }
  return err
}

func (p *TimeStruct) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "time_n_sec", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:time_n_sec: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TimeNSec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time_n_sec (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:time_n_sec: ", p), err) }
  return err
}

func (p *TimeStruct) Equals(other *TimeStruct) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TimeSec != other.TimeSec { return false }
  if p.TimeNSec != other.TimeNSec { return false }
  return true
}

func (p *TimeStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimeStruct(%+v)", *p)
}

// Attributes:
//  - StDev
//  - StIno
//  - StMode
//  - StNlink
//  - StUID
//  - StGid
//  - StRdev
//  - StSize
//  - StAtim
//  - StMtim
//  - StCtim
//  - StBlksize
//  - StBlocks
type StatStruct struct {
  StDev Ui64 `thrift:"st_dev,1" db:"st_dev" json:"st_dev"`
  StIno Ui64 `thrift:"st_ino,2" db:"st_ino" json:"st_ino"`
  StMode Ui32 `thrift:"st_mode,3" db:"st_mode" json:"st_mode"`
  StNlink Ui64 `thrift:"st_nlink,4" db:"st_nlink" json:"st_nlink"`
  StUID Ui32 `thrift:"st_uid,5" db:"st_uid" json:"st_uid"`
  StGid Ui32 `thrift:"st_gid,6" db:"st_gid" json:"st_gid"`
  StRdev Ui64 `thrift:"st_rdev,7" db:"st_rdev" json:"st_rdev"`
  StSize int64 `thrift:"st_size,8" db:"st_size" json:"st_size"`
  StAtim *TimeStruct `thrift:"st_atim,9" db:"st_atim" json:"st_atim"`
  StMtim *TimeStruct `thrift:"st_mtim,10" db:"st_mtim" json:"st_mtim"`
  StCtim *TimeStruct `thrift:"st_ctim,11" db:"st_ctim" json:"st_ctim"`
  StBlksize int64 `thrift:"st_blksize,12" db:"st_blksize" json:"st_blksize"`
  StBlocks int64 `thrift:"st_blocks,13" db:"st_blocks" json:"st_blocks"`
}

func NewStatStruct() *StatStruct {
  return &StatStruct{}
}


func (p *StatStruct) GetStDev() Ui64 {
  return p.StDev
}

func (p *StatStruct) GetStIno() Ui64 {
  return p.StIno
}

func (p *StatStruct) GetStMode() Ui32 {
  return p.StMode
}

func (p *StatStruct) GetStNlink() Ui64 {
  return p.StNlink
}

func (p *StatStruct) GetStUID() Ui32 {
  return p.StUID
}

func (p *StatStruct) GetStGid() Ui32 {
  return p.StGid
}

func (p *StatStruct) GetStRdev() Ui64 {
  return p.StRdev
}

func (p *StatStruct) GetStSize() int64 {
  return p.StSize
}
var StatStruct_StAtim_DEFAULT *TimeStruct
func (p *StatStruct) GetStAtim() *TimeStruct {
  if !p.IsSetStAtim() {
    return StatStruct_StAtim_DEFAULT
  }
return p.StAtim
}
var StatStruct_StMtim_DEFAULT *TimeStruct
func (p *StatStruct) GetStMtim() *TimeStruct {
  if !p.IsSetStMtim() {
    return StatStruct_StMtim_DEFAULT
  }
return p.StMtim
}
var StatStruct_StCtim_DEFAULT *TimeStruct
func (p *StatStruct) GetStCtim() *TimeStruct {
  if !p.IsSetStCtim() {
    return StatStruct_StCtim_DEFAULT
  }
return p.StCtim
}

func (p *StatStruct) GetStBlksize() int64 {
  return p.StBlksize
}

func (p *StatStruct) GetStBlocks() int64 {
  return p.StBlocks
}
func (p *StatStruct) IsSetStAtim() bool {
  return p.StAtim != nil
}

func (p *StatStruct) IsSetStMtim() bool {
  return p.StMtim != nil
}

func (p *StatStruct) IsSetStCtim() bool {
  return p.StCtim != nil
}

func (p *StatStruct) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StatStruct)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.StDev = temp
}
  return nil
}

func (p *StatStruct)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.StIno = temp
}
  return nil
}

func (p *StatStruct)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui32(v)
  p.StMode = temp
}
  return nil
}

func (p *StatStruct)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Ui64(v)
  p.StNlink = temp
}
  return nil
}

func (p *StatStruct)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Ui32(v)
  p.StUID = temp
}
  return nil
}

func (p *StatStruct)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Ui32(v)
  p.StGid = temp
}
  return nil
}

func (p *StatStruct)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Ui64(v)
  p.StRdev = temp
}
  return nil
}

func (p *StatStruct)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.StSize = v
}
  return nil
}

func (p *StatStruct)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  p.StAtim = &TimeStruct{}
  if err := p.StAtim.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StAtim), err)
  }
  return nil
}

func (p *StatStruct)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  p.StMtim = &TimeStruct{}
  if err := p.StMtim.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StMtim), err)
  }
  return nil
}

func (p *StatStruct)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  p.StCtim = &TimeStruct{}
  if err := p.StCtim.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StCtim), err)
  }
  return nil
}

func (p *StatStruct)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.StBlksize = v
}
  return nil
}

func (p *StatStruct)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.StBlocks = v
}
  return nil
}

func (p *StatStruct) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "statStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StatStruct) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "st_dev", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:st_dev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StDev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.st_dev (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:st_dev: ", p), err) }
  return err
}

func (p *StatStruct) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "st_ino", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:st_ino: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StIno)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.st_ino (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:st_ino: ", p), err) }
  return err
}

func (p *StatStruct) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "st_mode", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:st_mode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.StMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.st_mode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:st_mode: ", p), err) }
  return err
}

func (p *StatStruct) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "st_nlink", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:st_nlink: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StNlink)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.st_nlink (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:st_nlink: ", p), err) }
  return err
}

func (p *StatStruct) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "st_uid", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:st_uid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.StUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.st_uid (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:st_uid: ", p), err) }
  return err
}

func (p *StatStruct) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "st_gid", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:st_gid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.StGid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.st_gid (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:st_gid: ", p), err) }
  return err
}

func (p *StatStruct) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "st_rdev", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:st_rdev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StRdev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.st_rdev (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:st_rdev: ", p), err) }
  return err
}

func (p *StatStruct) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "st_size", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:st_size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.st_size (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:st_size: ", p), err) }
  return err
}

func (p *StatStruct) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "st_atim", thrift.STRUCT, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:st_atim: ", p), err) }
  if err := p.StAtim.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StAtim), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:st_atim: ", p), err) }
  return err
}

func (p *StatStruct) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "st_mtim", thrift.STRUCT, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:st_mtim: ", p), err) }
  if err := p.StMtim.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StMtim), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:st_mtim: ", p), err) }
  return err
}

func (p *StatStruct) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "st_ctim", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:st_ctim: ", p), err) }
  if err := p.StCtim.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StCtim), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:st_ctim: ", p), err) }
  return err
}

func (p *StatStruct) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "st_blksize", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:st_blksize: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StBlksize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.st_blksize (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:st_blksize: ", p), err) }
  return err
}

func (p *StatStruct) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "st_blocks", thrift.I64, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:st_blocks: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StBlocks)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.st_blocks (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:st_blocks: ", p), err) }
  return err
}

func (p *StatStruct) Equals(other *StatStruct) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StDev != other.StDev { return false }
  if p.StIno != other.StIno { return false }
  if p.StMode != other.StMode { return false }
  if p.StNlink != other.StNlink { return false }
  if p.StUID != other.StUID { return false }
  if p.StGid != other.StGid { return false }
  if p.StRdev != other.StRdev { return false }
  if p.StSize != other.StSize { return false }
  if !p.StAtim.Equals(other.StAtim) { return false }
  if !p.StMtim.Equals(other.StMtim) { return false }
  if !p.StCtim.Equals(other.StCtim) { return false }
  if p.StBlksize != other.StBlksize { return false }
  if p.StBlocks != other.StBlocks { return false }
  return true
}

func (p *StatStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StatStruct(%+v)", *p)
}

// Attributes:
//  - Inode
//  - Generation
//  - Attr
//  - AttrTimeout
//  - EntryTimeout
type FuseEntryParam struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
  Generation Ui64 `thrift:"generation,2" db:"generation" json:"generation"`
  Attr *StatStruct `thrift:"attr,3" db:"attr" json:"attr"`
  AttrTimeout float64 `thrift:"attr_timeout,4" db:"attr_timeout" json:"attr_timeout"`
  EntryTimeout float64 `thrift:"entry_timeout,5" db:"entry_timeout" json:"entry_timeout"`
}

func NewFuseEntryParam() *FuseEntryParam {
  return &FuseEntryParam{}
}


func (p *FuseEntryParam) GetInode() Ui64 {
  return p.Inode
}

func (p *FuseEntryParam) GetGeneration() Ui64 {
  return p.Generation
}
var FuseEntryParam_Attr_DEFAULT *StatStruct
func (p *FuseEntryParam) GetAttr() *StatStruct {
  if !p.IsSetAttr() {
    return FuseEntryParam_Attr_DEFAULT
  }
return p.Attr
}

func (p *FuseEntryParam) GetAttrTimeout() float64 {
  return p.AttrTimeout
}

func (p *FuseEntryParam) GetEntryTimeout() float64 {
  return p.EntryTimeout
}
func (p *FuseEntryParam) IsSetAttr() bool {
  return p.Attr != nil
}

func (p *FuseEntryParam) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FuseEntryParam)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *FuseEntryParam)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Generation = temp
}
  return nil
}

func (p *FuseEntryParam)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Attr = &StatStruct{}
  if err := p.Attr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Attr), err)
  }
  return nil
}

func (p *FuseEntryParam)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AttrTimeout = v
}
  return nil
}

func (p *FuseEntryParam)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.EntryTimeout = v
}
  return nil
}

func (p *FuseEntryParam) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FuseEntryParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FuseEntryParam) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *FuseEntryParam) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "generation", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:generation: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Generation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.generation (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:generation: ", p), err) }
  return err
}

func (p *FuseEntryParam) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attr", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:attr: ", p), err) }
  if err := p.Attr.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Attr), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:attr: ", p), err) }
  return err
}

func (p *FuseEntryParam) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attr_timeout", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attr_timeout: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.AttrTimeout)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attr_timeout (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attr_timeout: ", p), err) }
  return err
}

func (p *FuseEntryParam) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entry_timeout", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:entry_timeout: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.EntryTimeout)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.entry_timeout (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:entry_timeout: ", p), err) }
  return err
}

func (p *FuseEntryParam) Equals(other *FuseEntryParam) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  if p.Generation != other.Generation { return false }
  if !p.Attr.Equals(other.Attr) { return false }
  if p.AttrTimeout != other.AttrTimeout { return false }
  if p.EntryTimeout != other.EntryTimeout { return false }
  return true
}

func (p *FuseEntryParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FuseEntryParam(%+v)", *p)
}

// Attributes:
//  - Ino
//  - Off
//  - Reclen
//  - Type
//  - Name
type DirentStruct struct {
  Ino Ui64 `thrift:"ino,1" db:"ino" json:"ino"`
  Off int64 `thrift:"off,2" db:"off" json:"off"`
  Reclen Ui32 `thrift:"reclen,3" db:"reclen" json:"reclen"`
  Type Ui32 `thrift:"type,4" db:"type" json:"type"`
  Name string `thrift:"name,5" db:"name" json:"name"`
}

func NewDirentStruct() *DirentStruct {
  return &DirentStruct{}
}


func (p *DirentStruct) GetIno() Ui64 {
  return p.Ino
}

func (p *DirentStruct) GetOff() int64 {
  return p.Off
}

func (p *DirentStruct) GetReclen() Ui32 {
  return p.Reclen
}

func (p *DirentStruct) GetType() Ui32 {
  return p.Type
}

func (p *DirentStruct) GetName() string {
  return p.Name
}
func (p *DirentStruct) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DirentStruct)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Ino = temp
}
  return nil
}

func (p *DirentStruct)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Off = v
}
  return nil
}

func (p *DirentStruct)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui32(v)
  p.Reclen = temp
}
  return nil
}

func (p *DirentStruct)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Ui32(v)
  p.Type = temp
}
  return nil
}

func (p *DirentStruct)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *DirentStruct) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DirentStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DirentStruct) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ino", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ino: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Ino)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ino (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ino: ", p), err) }
  return err
}

func (p *DirentStruct) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "off", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:off: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Off)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.off (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:off: ", p), err) }
  return err
}

func (p *DirentStruct) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reclen", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reclen: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Reclen)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reclen (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reclen: ", p), err) }
  return err
}

func (p *DirentStruct) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err) }
  return err
}

func (p *DirentStruct) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:name: ", p), err) }
  return err
}

func (p *DirentStruct) Equals(other *DirentStruct) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Ino != other.Ino { return false }
  if p.Off != other.Off { return false }
  if p.Reclen != other.Reclen { return false }
  if p.Type != other.Type { return false }
  if p.Name != other.Name { return false }
  return true
}

func (p *DirentStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DirentStruct(%+v)", *p)
}

// Attributes:
//  - FBsize
//  - FFrsize
//  - FBlocks
//  - FBfree
//  - FBavail
//  - FFiles
//  - FFfree
//  - FFavail
//  - FFsid
//  - Unused
//  - FFlag
//  - FNamemax
type StatvfsStruct struct {
  FBsize Ui64 `thrift:"f_bsize,1" db:"f_bsize" json:"f_bsize"`
  FFrsize Ui64 `thrift:"f_frsize,2" db:"f_frsize" json:"f_frsize"`
  FBlocks Ui64 `thrift:"f_blocks,3" db:"f_blocks" json:"f_blocks"`
  FBfree Ui64 `thrift:"f_bfree,4" db:"f_bfree" json:"f_bfree"`
  FBavail Ui64 `thrift:"f_bavail,5" db:"f_bavail" json:"f_bavail"`
  FFiles Ui64 `thrift:"f_files,6" db:"f_files" json:"f_files"`
  FFfree Ui64 `thrift:"f_ffree,7" db:"f_ffree" json:"f_ffree"`
  FFavail Ui64 `thrift:"f_favail,8" db:"f_favail" json:"f_favail"`
  FFsid Ui64 `thrift:"f_fsid,9" db:"f_fsid" json:"f_fsid"`
  Unused int32 `thrift:"unused,10" db:"unused" json:"unused"`
  FFlag Ui64 `thrift:"f_flag,11" db:"f_flag" json:"f_flag"`
  FNamemax Ui64 `thrift:"f_namemax,12" db:"f_namemax" json:"f_namemax"`
}

func NewStatvfsStruct() *StatvfsStruct {
  return &StatvfsStruct{}
}


func (p *StatvfsStruct) GetFBsize() Ui64 {
  return p.FBsize
}

func (p *StatvfsStruct) GetFFrsize() Ui64 {
  return p.FFrsize
}

func (p *StatvfsStruct) GetFBlocks() Ui64 {
  return p.FBlocks
}

func (p *StatvfsStruct) GetFBfree() Ui64 {
  return p.FBfree
}

func (p *StatvfsStruct) GetFBavail() Ui64 {
  return p.FBavail
}

func (p *StatvfsStruct) GetFFiles() Ui64 {
  return p.FFiles
}

func (p *StatvfsStruct) GetFFfree() Ui64 {
  return p.FFfree
}

func (p *StatvfsStruct) GetFFavail() Ui64 {
  return p.FFavail
}

func (p *StatvfsStruct) GetFFsid() Ui64 {
  return p.FFsid
}

func (p *StatvfsStruct) GetUnused() int32 {
  return p.Unused
}

func (p *StatvfsStruct) GetFFlag() Ui64 {
  return p.FFlag
}

func (p *StatvfsStruct) GetFNamemax() Ui64 {
  return p.FNamemax
}
func (p *StatvfsStruct) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StatvfsStruct)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.FBsize = temp
}
  return nil
}

func (p *StatvfsStruct)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.FFrsize = temp
}
  return nil
}

func (p *StatvfsStruct)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui64(v)
  p.FBlocks = temp
}
  return nil
}

func (p *StatvfsStruct)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Ui64(v)
  p.FBfree = temp
}
  return nil
}

func (p *StatvfsStruct)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Ui64(v)
  p.FBavail = temp
}
  return nil
}

func (p *StatvfsStruct)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Ui64(v)
  p.FFiles = temp
}
  return nil
}

func (p *StatvfsStruct)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Ui64(v)
  p.FFfree = temp
}
  return nil
}

func (p *StatvfsStruct)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := Ui64(v)
  p.FFavail = temp
}
  return nil
}

func (p *StatvfsStruct)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := Ui64(v)
  p.FFsid = temp
}
  return nil
}

func (p *StatvfsStruct)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Unused = v
}
  return nil
}

func (p *StatvfsStruct)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := Ui64(v)
  p.FFlag = temp
}
  return nil
}

func (p *StatvfsStruct)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := Ui64(v)
  p.FNamemax = temp
}
  return nil
}

func (p *StatvfsStruct) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "statvfsStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StatvfsStruct) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "f_bsize", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:f_bsize: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FBsize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.f_bsize (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:f_bsize: ", p), err) }
  return err
}

func (p *StatvfsStruct) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "f_frsize", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:f_frsize: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FFrsize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.f_frsize (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:f_frsize: ", p), err) }
  return err
}

func (p *StatvfsStruct) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "f_blocks", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:f_blocks: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FBlocks)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.f_blocks (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:f_blocks: ", p), err) }
  return err
}

func (p *StatvfsStruct) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "f_bfree", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:f_bfree: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FBfree)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.f_bfree (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:f_bfree: ", p), err) }
  return err
}

func (p *StatvfsStruct) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "f_bavail", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:f_bavail: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FBavail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.f_bavail (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:f_bavail: ", p), err) }
  return err
}

func (p *StatvfsStruct) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "f_files", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:f_files: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FFiles)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.f_files (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:f_files: ", p), err) }
  return err
}

func (p *StatvfsStruct) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "f_ffree", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:f_ffree: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FFfree)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.f_ffree (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:f_ffree: ", p), err) }
  return err
}

func (p *StatvfsStruct) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "f_favail", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:f_favail: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FFavail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.f_favail (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:f_favail: ", p), err) }
  return err
}

func (p *StatvfsStruct) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "f_fsid", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:f_fsid: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FFsid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.f_fsid (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:f_fsid: ", p), err) }
  return err
}

func (p *StatvfsStruct) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "unused", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:unused: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Unused)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unused (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:unused: ", p), err) }
  return err
}

func (p *StatvfsStruct) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "f_flag", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:f_flag: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FFlag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.f_flag (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:f_flag: ", p), err) }
  return err
}

func (p *StatvfsStruct) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "f_namemax", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:f_namemax: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FNamemax)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.f_namemax (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:f_namemax: ", p), err) }
  return err
}

func (p *StatvfsStruct) Equals(other *StatvfsStruct) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.FBsize != other.FBsize { return false }
  if p.FFrsize != other.FFrsize { return false }
  if p.FBlocks != other.FBlocks { return false }
  if p.FBfree != other.FBfree { return false }
  if p.FBavail != other.FBavail { return false }
  if p.FFiles != other.FFiles { return false }
  if p.FFfree != other.FFfree { return false }
  if p.FFavail != other.FFavail { return false }
  if p.FFsid != other.FFsid { return false }
  if p.Unused != other.Unused { return false }
  if p.FFlag != other.FFlag { return false }
  if p.FNamemax != other.FNamemax { return false }
  return true
}

func (p *StatvfsStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StatvfsStruct(%+v)", *p)
}

// Attributes:
//  - Size
//  - Data
type IoVector struct {
  Size Ui64 `thrift:"size,1" db:"size" json:"size"`
  Data []byte `thrift:"data,2" db:"data" json:"data"`
}

func NewIoVector() *IoVector {
  return &IoVector{}
}


func (p *IoVector) GetSize() Ui64 {
  return p.Size
}

func (p *IoVector) GetData() []byte {
  return p.Data
}
func (p *IoVector) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IoVector)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Size = temp
}
  return nil
}

func (p *IoVector)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *IoVector) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ioVector"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IoVector) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:size: ", p), err) }
  return err
}

func (p *IoVector) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Data); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *IoVector) Equals(other *IoVector) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Size != other.Size { return false }
  if bytes.Compare(p.Data, other.Data) != 0 { return false }
  return true
}

func (p *IoVector) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IoVector(%+v)", *p)
}

// Attributes:
//  - Inode
//  - Mask
type IcefsAccessReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
  Mask int32 `thrift:"mask,2" db:"mask" json:"mask"`
}

func NewIcefsAccessReq() *IcefsAccessReq {
  return &IcefsAccessReq{}
}


func (p *IcefsAccessReq) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsAccessReq) GetMask() int32 {
  return p.Mask
}
func (p *IcefsAccessReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsAccessReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsAccessReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mask = v
}
  return nil
}

func (p *IcefsAccessReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsAccessReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsAccessReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsAccessReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mask", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mask: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Mask)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mask (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mask: ", p), err) }
  return err
}

func (p *IcefsAccessReq) Equals(other *IcefsAccessReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  if p.Mask != other.Mask { return false }
  return true
}

func (p *IcefsAccessReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsAccessReq(%+v)", *p)
}

// Attributes:
//  - Req
//  - Inode
//  - BlockSize
//  - Index
type IcefsBmapReq struct {
  Req *FuseReq `thrift:"req,1" db:"req" json:"req"`
  Inode Ui64 `thrift:"inode,2" db:"inode" json:"inode"`
  BlockSize Ui64 `thrift:"block_size,3" db:"block_size" json:"block_size"`
  Index Ui64 `thrift:"index,4" db:"index" json:"index"`
}

func NewIcefsBmapReq() *IcefsBmapReq {
  return &IcefsBmapReq{}
}

var IcefsBmapReq_Req_DEFAULT *FuseReq
func (p *IcefsBmapReq) GetReq() *FuseReq {
  if !p.IsSetReq() {
    return IcefsBmapReq_Req_DEFAULT
  }
return p.Req
}

func (p *IcefsBmapReq) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsBmapReq) GetBlockSize() Ui64 {
  return p.BlockSize
}

func (p *IcefsBmapReq) GetIndex() Ui64 {
  return p.Index
}
func (p *IcefsBmapReq) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsBmapReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsBmapReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &FuseReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsBmapReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsBmapReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui64(v)
  p.BlockSize = temp
}
  return nil
}

func (p *IcefsBmapReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Ui64(v)
  p.Index = temp
}
  return nil
}

func (p *IcefsBmapReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsBmapReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsBmapReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsBmapReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inode: ", p), err) }
  return err
}

func (p *IcefsBmapReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "block_size", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:block_size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BlockSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.block_size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:block_size: ", p), err) }
  return err
}

func (p *IcefsBmapReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:index: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Index)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:index: ", p), err) }
  return err
}

func (p *IcefsBmapReq) Equals(other *IcefsBmapReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Req.Equals(other.Req) { return false }
  if p.Inode != other.Inode { return false }
  if p.BlockSize != other.BlockSize { return false }
  if p.Index != other.Index { return false }
  return true
}

func (p *IcefsBmapReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsBmapReq(%+v)", *p)
}

// Attributes:
//  - OffsetIn
//  - FhIn
//  - OffsetOut
//  - FhOut
//  - Len
//  - Flags
type IcefsCopyFileRangeReq struct {
  OffsetIn int64 `thrift:"offset_in,1" db:"offset_in" json:"offset_in"`
  FhIn Ui64 `thrift:"fh_in,2" db:"fh_in" json:"fh_in"`
  OffsetOut int64 `thrift:"offset_out,3" db:"offset_out" json:"offset_out"`
  FhOut Ui64 `thrift:"fh_out,4" db:"fh_out" json:"fh_out"`
  Len Ui64 `thrift:"len,5" db:"len" json:"len"`
  Flags int32 `thrift:"flags,6" db:"flags" json:"flags"`
}

func NewIcefsCopyFileRangeReq() *IcefsCopyFileRangeReq {
  return &IcefsCopyFileRangeReq{}
}


func (p *IcefsCopyFileRangeReq) GetOffsetIn() int64 {
  return p.OffsetIn
}

func (p *IcefsCopyFileRangeReq) GetFhIn() Ui64 {
  return p.FhIn
}

func (p *IcefsCopyFileRangeReq) GetOffsetOut() int64 {
  return p.OffsetOut
}

func (p *IcefsCopyFileRangeReq) GetFhOut() Ui64 {
  return p.FhOut
}

func (p *IcefsCopyFileRangeReq) GetLen() Ui64 {
  return p.Len
}

func (p *IcefsCopyFileRangeReq) GetFlags() int32 {
  return p.Flags
}
func (p *IcefsCopyFileRangeReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsCopyFileRangeReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OffsetIn = v
}
  return nil
}

func (p *IcefsCopyFileRangeReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.FhIn = temp
}
  return nil
}

func (p *IcefsCopyFileRangeReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OffsetOut = v
}
  return nil
}

func (p *IcefsCopyFileRangeReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Ui64(v)
  p.FhOut = temp
}
  return nil
}

func (p *IcefsCopyFileRangeReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Ui64(v)
  p.Len = temp
}
  return nil
}

func (p *IcefsCopyFileRangeReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Flags = v
}
  return nil
}

func (p *IcefsCopyFileRangeReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsCopyFileRangeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsCopyFileRangeReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset_in", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:offset_in: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.OffsetIn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset_in (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:offset_in: ", p), err) }
  return err
}

func (p *IcefsCopyFileRangeReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh_in", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fh_in: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FhIn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh_in (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fh_in: ", p), err) }
  return err
}

func (p *IcefsCopyFileRangeReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset_out", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:offset_out: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.OffsetOut)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset_out (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:offset_out: ", p), err) }
  return err
}

func (p *IcefsCopyFileRangeReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh_out", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fh_out: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FhOut)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh_out (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fh_out: ", p), err) }
  return err
}

func (p *IcefsCopyFileRangeReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "len", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:len: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Len)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.len (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:len: ", p), err) }
  return err
}

func (p *IcefsCopyFileRangeReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flags", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:flags: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Flags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flags (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:flags: ", p), err) }
  return err
}

func (p *IcefsCopyFileRangeReq) Equals(other *IcefsCopyFileRangeReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.OffsetIn != other.OffsetIn { return false }
  if p.FhIn != other.FhIn { return false }
  if p.OffsetOut != other.OffsetOut { return false }
  if p.FhOut != other.FhOut { return false }
  if p.Len != other.Len { return false }
  if p.Flags != other.Flags { return false }
  return true
}

func (p *IcefsCopyFileRangeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsCopyFileRangeReq(%+v)", *p)
}

// Attributes:
//  - ParentInode
//  - Name
//  - Mode
//  - Flags
type IcefsCreateReq struct {
  ParentInode Ui64 `thrift:"parent_inode,1" db:"parent_inode" json:"parent_inode"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Mode Ui32 `thrift:"mode,3" db:"mode" json:"mode"`
  Flags int32 `thrift:"flags,4" db:"flags" json:"flags"`
}

func NewIcefsCreateReq() *IcefsCreateReq {
  return &IcefsCreateReq{}
}


func (p *IcefsCreateReq) GetParentInode() Ui64 {
  return p.ParentInode
}

func (p *IcefsCreateReq) GetName() string {
  return p.Name
}

func (p *IcefsCreateReq) GetMode() Ui32 {
  return p.Mode
}

func (p *IcefsCreateReq) GetFlags() int32 {
  return p.Flags
}
func (p *IcefsCreateReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsCreateReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.ParentInode = temp
}
  return nil
}

func (p *IcefsCreateReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcefsCreateReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui32(v)
  p.Mode = temp
}
  return nil
}

func (p *IcefsCreateReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Flags = v
}
  return nil
}

func (p *IcefsCreateReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsCreateReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsCreateReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent_inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ParentInode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent_inode: ", p), err) }
  return err
}

func (p *IcefsCreateReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IcefsCreateReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mode", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Mode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mode: ", p), err) }
  return err
}

func (p *IcefsCreateReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flags", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:flags: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Flags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flags (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:flags: ", p), err) }
  return err
}

func (p *IcefsCreateReq) Equals(other *IcefsCreateReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ParentInode != other.ParentInode { return false }
  if p.Name != other.Name { return false }
  if p.Mode != other.Mode { return false }
  if p.Flags != other.Flags { return false }
  return true
}

func (p *IcefsCreateReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsCreateReq(%+v)", *p)
}

// Attributes:
//  - HostName
//  - Info
type IcefsDestroyReq struct {
  HostName string `thrift:"host_name,1" db:"host_name" json:"host_name"`
  Info string `thrift:"info,2" db:"info" json:"info"`
}

func NewIcefsDestroyReq() *IcefsDestroyReq {
  return &IcefsDestroyReq{}
}


func (p *IcefsDestroyReq) GetHostName() string {
  return p.HostName
}

func (p *IcefsDestroyReq) GetInfo() string {
  return p.Info
}
func (p *IcefsDestroyReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsDestroyReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HostName = v
}
  return nil
}

func (p *IcefsDestroyReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Info = v
}
  return nil
}

func (p *IcefsDestroyReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsDestroyReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsDestroyReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HostName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host_name: ", p), err) }
  return err
}

func (p *IcefsDestroyReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Info)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.info (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  return err
}

func (p *IcefsDestroyReq) Equals(other *IcefsDestroyReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HostName != other.HostName { return false }
  if p.Info != other.Info { return false }
  return true
}

func (p *IcefsDestroyReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsDestroyReq(%+v)", *p)
}

// Attributes:
//  - Mode
//  - Offset
//  - Length
//  - Fh
type IcefsFallocateReq struct {
  Mode int32 `thrift:"mode,1" db:"mode" json:"mode"`
  Offset int64 `thrift:"offset,2" db:"offset" json:"offset"`
  Length int64 `thrift:"length,3" db:"length" json:"length"`
  Fh Ui64 `thrift:"fh,4" db:"fh" json:"fh"`
}

func NewIcefsFallocateReq() *IcefsFallocateReq {
  return &IcefsFallocateReq{}
}


func (p *IcefsFallocateReq) GetMode() int32 {
  return p.Mode
}

func (p *IcefsFallocateReq) GetOffset() int64 {
  return p.Offset
}

func (p *IcefsFallocateReq) GetLength() int64 {
  return p.Length
}

func (p *IcefsFallocateReq) GetFh() Ui64 {
  return p.Fh
}
func (p *IcefsFallocateReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsFallocateReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mode = v
}
  return nil
}

func (p *IcefsFallocateReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *IcefsFallocateReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Length = v
}
  return nil
}

func (p *IcefsFallocateReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsFallocateReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsFallocateReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsFallocateReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Mode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mode: ", p), err) }
  return err
}

func (p *IcefsFallocateReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *IcefsFallocateReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "length", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:length: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Length)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.length (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:length: ", p), err) }
  return err
}

func (p *IcefsFallocateReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fh: ", p), err) }
  return err
}

func (p *IcefsFallocateReq) Equals(other *IcefsFallocateReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mode != other.Mode { return false }
  if p.Offset != other.Offset { return false }
  if p.Length != other.Length { return false }
  if p.Fh != other.Fh { return false }
  return true
}

func (p *IcefsFallocateReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsFallocateReq(%+v)", *p)
}

// Attributes:
//  - Fh
//  - Op
type IcefsFlockReq struct {
  Fh Ui64 `thrift:"fh,1" db:"fh" json:"fh"`
  Op int32 `thrift:"op,2" db:"op" json:"op"`
}

func NewIcefsFlockReq() *IcefsFlockReq {
  return &IcefsFlockReq{}
}


func (p *IcefsFlockReq) GetFh() Ui64 {
  return p.Fh
}

func (p *IcefsFlockReq) GetOp() int32 {
  return p.Op
}
func (p *IcefsFlockReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsFlockReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsFlockReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Op = v
}
  return nil
}

func (p *IcefsFlockReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsFlockReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsFlockReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fh: ", p), err) }
  return err
}

func (p *IcefsFlockReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "op", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Op)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err) }
  return err
}

func (p *IcefsFlockReq) Equals(other *IcefsFlockReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Fh != other.Fh { return false }
  if p.Op != other.Op { return false }
  return true
}

func (p *IcefsFlockReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsFlockReq(%+v)", *p)
}

// Attributes:
//  - Fh
type IcefsFlushReq struct {
  Fh Ui64 `thrift:"fh,1" db:"fh" json:"fh"`
}

func NewIcefsFlushReq() *IcefsFlushReq {
  return &IcefsFlushReq{}
}


func (p *IcefsFlushReq) GetFh() Ui64 {
  return p.Fh
}
func (p *IcefsFlushReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsFlushReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsFlushReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsFlushReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsFlushReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fh: ", p), err) }
  return err
}

func (p *IcefsFlushReq) Equals(other *IcefsFlushReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Fh != other.Fh { return false }
  return true
}

func (p *IcefsFlushReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsFlushReq(%+v)", *p)
}

// Attributes:
//  - Inode
//  - Nlookup
type IcefsForgetData struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
  Nlookup Ui64 `thrift:"nlookup,2" db:"nlookup" json:"nlookup"`
}

func NewIcefsForgetData() *IcefsForgetData {
  return &IcefsForgetData{}
}


func (p *IcefsForgetData) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsForgetData) GetNlookup() Ui64 {
  return p.Nlookup
}
func (p *IcefsForgetData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsForgetData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsForgetData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Nlookup = temp
}
  return nil
}

func (p *IcefsForgetData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "icefsForgetData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsForgetData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsForgetData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nlookup", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nlookup: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Nlookup)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nlookup (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nlookup: ", p), err) }
  return err
}

func (p *IcefsForgetData) Equals(other *IcefsForgetData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  if p.Nlookup != other.Nlookup { return false }
  return true
}

func (p *IcefsForgetData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsForgetData(%+v)", *p)
}

// Attributes:
//  - Count
//  - ToForget
type IcefsForgetMultiReq struct {
  Count Ui64 `thrift:"count,1" db:"count" json:"count"`
  ToForget []*IcefsForgetData `thrift:"to_forget,2" db:"to_forget" json:"to_forget"`
}

func NewIcefsForgetMultiReq() *IcefsForgetMultiReq {
  return &IcefsForgetMultiReq{}
}


func (p *IcefsForgetMultiReq) GetCount() Ui64 {
  return p.Count
}

func (p *IcefsForgetMultiReq) GetToForget() []*IcefsForgetData {
  return p.ToForget
}
func (p *IcefsForgetMultiReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsForgetMultiReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Count = temp
}
  return nil
}

func (p *IcefsForgetMultiReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IcefsForgetData, 0, size)
  p.ToForget =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &IcefsForgetData{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ToForget = append(p.ToForget, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IcefsForgetMultiReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsForgetMultiReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsForgetMultiReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:count: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:count: ", p), err) }
  return err
}

func (p *IcefsForgetMultiReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "to_forget", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to_forget: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ToForget)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ToForget {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to_forget: ", p), err) }
  return err
}

func (p *IcefsForgetMultiReq) Equals(other *IcefsForgetMultiReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Count != other.Count { return false }
  if len(p.ToForget) != len(other.ToForget) { return false }
  for i, _tgt := range p.ToForget {
    _src1 := other.ToForget[i]
    if !_tgt.Equals(_src1) { return false }
  }
  return true
}

func (p *IcefsForgetMultiReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsForgetMultiReq(%+v)", *p)
}

// Attributes:
//  - Inode
//  - Nlookup
type IcefsForgetReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
  Nlookup Ui64 `thrift:"nlookup,2" db:"nlookup" json:"nlookup"`
}

func NewIcefsForgetReq() *IcefsForgetReq {
  return &IcefsForgetReq{}
}


func (p *IcefsForgetReq) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsForgetReq) GetNlookup() Ui64 {
  return p.Nlookup
}
func (p *IcefsForgetReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsForgetReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsForgetReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Nlookup = temp
}
  return nil
}

func (p *IcefsForgetReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsForgetReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsForgetReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsForgetReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nlookup", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nlookup: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Nlookup)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nlookup (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nlookup: ", p), err) }
  return err
}

func (p *IcefsForgetReq) Equals(other *IcefsForgetReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  if p.Nlookup != other.Nlookup { return false }
  return true
}

func (p *IcefsForgetReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsForgetReq(%+v)", *p)
}

// Attributes:
//  - DataSync
//  - Fh
type IcefsFsyncReq struct {
  DataSync int32 `thrift:"data_sync,1" db:"data_sync" json:"data_sync"`
  Fh Ui64 `thrift:"fh,2" db:"fh" json:"fh"`
}

func NewIcefsFsyncReq() *IcefsFsyncReq {
  return &IcefsFsyncReq{}
}


func (p *IcefsFsyncReq) GetDataSync() int32 {
  return p.DataSync
}

func (p *IcefsFsyncReq) GetFh() Ui64 {
  return p.Fh
}
func (p *IcefsFsyncReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsFsyncReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DataSync = v
}
  return nil
}

func (p *IcefsFsyncReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsFsyncReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsFsyncReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsFsyncReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data_sync", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data_sync: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.DataSync)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data_sync (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data_sync: ", p), err) }
  return err
}

func (p *IcefsFsyncReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fh: ", p), err) }
  return err
}

func (p *IcefsFsyncReq) Equals(other *IcefsFsyncReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DataSync != other.DataSync { return false }
  if p.Fh != other.Fh { return false }
  return true
}

func (p *IcefsFsyncReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsFsyncReq(%+v)", *p)
}

// Attributes:
//  - DataSync
//  - Fh
type IcefsFsyncDirReq struct {
  DataSync int32 `thrift:"data_sync,1" db:"data_sync" json:"data_sync"`
  Fh Ui64 `thrift:"fh,2" db:"fh" json:"fh"`
}

func NewIcefsFsyncDirReq() *IcefsFsyncDirReq {
  return &IcefsFsyncDirReq{}
}


func (p *IcefsFsyncDirReq) GetDataSync() int32 {
  return p.DataSync
}

func (p *IcefsFsyncDirReq) GetFh() Ui64 {
  return p.Fh
}
func (p *IcefsFsyncDirReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsFsyncDirReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DataSync = v
}
  return nil
}

func (p *IcefsFsyncDirReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsFsyncDirReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsFsyncDirReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsFsyncDirReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data_sync", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data_sync: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.DataSync)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data_sync (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data_sync: ", p), err) }
  return err
}

func (p *IcefsFsyncDirReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fh: ", p), err) }
  return err
}

func (p *IcefsFsyncDirReq) Equals(other *IcefsFsyncDirReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DataSync != other.DataSync { return false }
  if p.Fh != other.Fh { return false }
  return true
}

func (p *IcefsFsyncDirReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsFsyncDirReq(%+v)", *p)
}

// Attributes:
//  - Inode
type IcefsGetAttrReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
}

func NewIcefsGetAttrReq() *IcefsGetAttrReq {
  return &IcefsGetAttrReq{}
}


func (p *IcefsGetAttrReq) GetInode() Ui64 {
  return p.Inode
}
func (p *IcefsGetAttrReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsGetAttrReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsGetAttrReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsGetAttrReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsGetAttrReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsGetAttrReq) Equals(other *IcefsGetAttrReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  return true
}

func (p *IcefsGetAttrReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsGetAttrReq(%+v)", *p)
}

// Attributes:
//  - Req
//  - Inode
//  - FileInfo
//  - Lock
type IcefsGetLkReq struct {
  Req *FuseReq `thrift:"req,1" db:"req" json:"req"`
  Inode Ui64 `thrift:"inode,2" db:"inode" json:"inode"`
  FileInfo *FuseFileInfo `thrift:"file_info,3" db:"file_info" json:"file_info"`
  Lock *FlockStruct `thrift:"lock,4" db:"lock" json:"lock"`
}

func NewIcefsGetLkReq() *IcefsGetLkReq {
  return &IcefsGetLkReq{}
}

var IcefsGetLkReq_Req_DEFAULT *FuseReq
func (p *IcefsGetLkReq) GetReq() *FuseReq {
  if !p.IsSetReq() {
    return IcefsGetLkReq_Req_DEFAULT
  }
return p.Req
}

func (p *IcefsGetLkReq) GetInode() Ui64 {
  return p.Inode
}
var IcefsGetLkReq_FileInfo_DEFAULT *FuseFileInfo
func (p *IcefsGetLkReq) GetFileInfo() *FuseFileInfo {
  if !p.IsSetFileInfo() {
    return IcefsGetLkReq_FileInfo_DEFAULT
  }
return p.FileInfo
}
var IcefsGetLkReq_Lock_DEFAULT *FlockStruct
func (p *IcefsGetLkReq) GetLock() *FlockStruct {
  if !p.IsSetLock() {
    return IcefsGetLkReq_Lock_DEFAULT
  }
return p.Lock
}
func (p *IcefsGetLkReq) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsGetLkReq) IsSetFileInfo() bool {
  return p.FileInfo != nil
}

func (p *IcefsGetLkReq) IsSetLock() bool {
  return p.Lock != nil
}

func (p *IcefsGetLkReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsGetLkReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &FuseReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsGetLkReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsGetLkReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.FileInfo = &FuseFileInfo{}
  if err := p.FileInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FileInfo), err)
  }
  return nil
}

func (p *IcefsGetLkReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Lock = &FlockStruct{}
  if err := p.Lock.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Lock), err)
  }
  return nil
}

func (p *IcefsGetLkReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsGetLkReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsGetLkReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsGetLkReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inode: ", p), err) }
  return err
}

func (p *IcefsGetLkReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "file_info", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:file_info: ", p), err) }
  if err := p.FileInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FileInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:file_info: ", p), err) }
  return err
}

func (p *IcefsGetLkReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lock", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lock: ", p), err) }
  if err := p.Lock.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Lock), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lock: ", p), err) }
  return err
}

func (p *IcefsGetLkReq) Equals(other *IcefsGetLkReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Req.Equals(other.Req) { return false }
  if p.Inode != other.Inode { return false }
  if !p.FileInfo.Equals(other.FileInfo) { return false }
  if !p.Lock.Equals(other.Lock) { return false }
  return true
}

func (p *IcefsGetLkReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsGetLkReq(%+v)", *p)
}

// Attributes:
//  - Inode
//  - Name
//  - Size
type IcefsGetXattrReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Size Ui64 `thrift:"size,3" db:"size" json:"size"`
}

func NewIcefsGetXattrReq() *IcefsGetXattrReq {
  return &IcefsGetXattrReq{}
}


func (p *IcefsGetXattrReq) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsGetXattrReq) GetName() string {
  return p.Name
}

func (p *IcefsGetXattrReq) GetSize() Ui64 {
  return p.Size
}
func (p *IcefsGetXattrReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsGetXattrReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsGetXattrReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcefsGetXattrReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui64(v)
  p.Size = temp
}
  return nil
}

func (p *IcefsGetXattrReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsGetXattrReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsGetXattrReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsGetXattrReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IcefsGetXattrReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *IcefsGetXattrReq) Equals(other *IcefsGetXattrReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  if p.Name != other.Name { return false }
  if p.Size != other.Size { return false }
  return true
}

func (p *IcefsGetXattrReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsGetXattrReq(%+v)", *p)
}

// Attributes:
//  - UUID
//  - Info
//  - Want
//  - Timeout
type IcefsInitReq struct {
  UUID string `thrift:"uuid,1" db:"uuid" json:"uuid"`
  Info string `thrift:"info,2" db:"info" json:"info"`
  Want Ui32 `thrift:"want,3" db:"want" json:"want"`
  Timeout float64 `thrift:"timeout,4" db:"timeout" json:"timeout"`
}

func NewIcefsInitReq() *IcefsInitReq {
  return &IcefsInitReq{}
}


func (p *IcefsInitReq) GetUUID() string {
  return p.UUID
}

func (p *IcefsInitReq) GetInfo() string {
  return p.Info
}

func (p *IcefsInitReq) GetWant() Ui32 {
  return p.Want
}

func (p *IcefsInitReq) GetTimeout() float64 {
  return p.Timeout
}
func (p *IcefsInitReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsInitReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UUID = v
}
  return nil
}

func (p *IcefsInitReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Info = v
}
  return nil
}

func (p *IcefsInitReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui32(v)
  p.Want = temp
}
  return nil
}

func (p *IcefsInitReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Timeout = v
}
  return nil
}

func (p *IcefsInitReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsInitReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsInitReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uuid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uuid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *IcefsInitReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Info)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.info (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  return err
}

func (p *IcefsInitReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "want", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:want: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Want)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.want (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:want: ", p), err) }
  return err
}

func (p *IcefsInitReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timeout", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timeout: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Timeout)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timeout (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timeout: ", p), err) }
  return err
}

func (p *IcefsInitReq) Equals(other *IcefsInitReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UUID != other.UUID { return false }
  if p.Info != other.Info { return false }
  if p.Want != other.Want { return false }
  if p.Timeout != other.Timeout { return false }
  return true
}

func (p *IcefsInitReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsInitReq(%+v)", *p)
}

// Attributes:
//  - Req
//  - Inode
//  - Cmd
//  - Arg
//  - FileInfo
//  - Flags
//  - InBufSize
//  - OutBufSize
type IcefsIoctlReq struct {
  Req *FuseReq `thrift:"req,1" db:"req" json:"req"`
  Inode Ui64 `thrift:"inode,2" db:"inode" json:"inode"`
  Cmd Ui32 `thrift:"cmd,3" db:"cmd" json:"cmd"`
  Arg []byte `thrift:"arg,4" db:"arg" json:"arg"`
  FileInfo *FuseFileInfo `thrift:"file_info,5" db:"file_info" json:"file_info"`
  Flags Ui32 `thrift:"flags,6" db:"flags" json:"flags"`
  InBufSize Ui64 `thrift:"in_buf_size,7" db:"in_buf_size" json:"in_buf_size"`
  OutBufSize Ui64 `thrift:"out_buf_size,8" db:"out_buf_size" json:"out_buf_size"`
}

func NewIcefsIoctlReq() *IcefsIoctlReq {
  return &IcefsIoctlReq{}
}

var IcefsIoctlReq_Req_DEFAULT *FuseReq
func (p *IcefsIoctlReq) GetReq() *FuseReq {
  if !p.IsSetReq() {
    return IcefsIoctlReq_Req_DEFAULT
  }
return p.Req
}

func (p *IcefsIoctlReq) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsIoctlReq) GetCmd() Ui32 {
  return p.Cmd
}

func (p *IcefsIoctlReq) GetArg() []byte {
  return p.Arg
}
var IcefsIoctlReq_FileInfo_DEFAULT *FuseFileInfo
func (p *IcefsIoctlReq) GetFileInfo() *FuseFileInfo {
  if !p.IsSetFileInfo() {
    return IcefsIoctlReq_FileInfo_DEFAULT
  }
return p.FileInfo
}

func (p *IcefsIoctlReq) GetFlags() Ui32 {
  return p.Flags
}

func (p *IcefsIoctlReq) GetInBufSize() Ui64 {
  return p.InBufSize
}

func (p *IcefsIoctlReq) GetOutBufSize() Ui64 {
  return p.OutBufSize
}
func (p *IcefsIoctlReq) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsIoctlReq) IsSetFileInfo() bool {
  return p.FileInfo != nil
}

func (p *IcefsIoctlReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsIoctlReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &FuseReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsIoctlReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsIoctlReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui32(v)
  p.Cmd = temp
}
  return nil
}

func (p *IcefsIoctlReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Arg = v
}
  return nil
}

func (p *IcefsIoctlReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.FileInfo = &FuseFileInfo{}
  if err := p.FileInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FileInfo), err)
  }
  return nil
}

func (p *IcefsIoctlReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Ui32(v)
  p.Flags = temp
}
  return nil
}

func (p *IcefsIoctlReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Ui64(v)
  p.InBufSize = temp
}
  return nil
}

func (p *IcefsIoctlReq)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := Ui64(v)
  p.OutBufSize = temp
}
  return nil
}

func (p *IcefsIoctlReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsIoctlReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsIoctlReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsIoctlReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inode: ", p), err) }
  return err
}

func (p *IcefsIoctlReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cmd", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cmd: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Cmd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cmd (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cmd: ", p), err) }
  return err
}

func (p *IcefsIoctlReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "arg", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:arg: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Arg); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.arg (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:arg: ", p), err) }
  return err
}

func (p *IcefsIoctlReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "file_info", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:file_info: ", p), err) }
  if err := p.FileInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FileInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:file_info: ", p), err) }
  return err
}

func (p *IcefsIoctlReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flags", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:flags: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Flags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flags (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:flags: ", p), err) }
  return err
}

func (p *IcefsIoctlReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "in_buf_size", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:in_buf_size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.InBufSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.in_buf_size (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:in_buf_size: ", p), err) }
  return err
}

func (p *IcefsIoctlReq) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "out_buf_size", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:out_buf_size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.OutBufSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.out_buf_size (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:out_buf_size: ", p), err) }
  return err
}

func (p *IcefsIoctlReq) Equals(other *IcefsIoctlReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Req.Equals(other.Req) { return false }
  if p.Inode != other.Inode { return false }
  if p.Cmd != other.Cmd { return false }
  if bytes.Compare(p.Arg, other.Arg) != 0 { return false }
  if !p.FileInfo.Equals(other.FileInfo) { return false }
  if p.Flags != other.Flags { return false }
  if p.InBufSize != other.InBufSize { return false }
  if p.OutBufSize != other.OutBufSize { return false }
  return true
}

func (p *IcefsIoctlReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsIoctlReq(%+v)", *p)
}

// Attributes:
//  - Inode
//  - NewParentInode_
//  - NewName_
type IcefsLinkReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
  NewParentInode_ Ui64 `thrift:"new_parent_inode,2" db:"new_parent_inode" json:"new_parent_inode"`
  NewName_ string `thrift:"new_name,3" db:"new_name" json:"new_name"`
}

func NewIcefsLinkReq() *IcefsLinkReq {
  return &IcefsLinkReq{}
}


func (p *IcefsLinkReq) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsLinkReq) GetNewParentInode_() Ui64 {
  return p.NewParentInode_
}

func (p *IcefsLinkReq) GetNewName_() string {
  return p.NewName_
}
func (p *IcefsLinkReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsLinkReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsLinkReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.NewParentInode_ = temp
}
  return nil
}

func (p *IcefsLinkReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NewName_ = v
}
  return nil
}

func (p *IcefsLinkReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsLinkReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsLinkReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsLinkReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_parent_inode", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_parent_inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NewParentInode_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_parent_inode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_parent_inode: ", p), err) }
  return err
}

func (p *IcefsLinkReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NewName_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_name: ", p), err) }
  return err
}

func (p *IcefsLinkReq) Equals(other *IcefsLinkReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  if p.NewParentInode_ != other.NewParentInode_ { return false }
  if p.NewName_ != other.NewName_ { return false }
  return true
}

func (p *IcefsLinkReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsLinkReq(%+v)", *p)
}

// Attributes:
//  - Inode
//  - Size
type IcefsListXattrReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
  Size Ui64 `thrift:"size,2" db:"size" json:"size"`
}

func NewIcefsListXattrReq() *IcefsListXattrReq {
  return &IcefsListXattrReq{}
}


func (p *IcefsListXattrReq) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsListXattrReq) GetSize() Ui64 {
  return p.Size
}
func (p *IcefsListXattrReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsListXattrReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsListXattrReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Size = temp
}
  return nil
}

func (p *IcefsListXattrReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsListXattrReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsListXattrReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsListXattrReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *IcefsListXattrReq) Equals(other *IcefsListXattrReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  if p.Size != other.Size { return false }
  return true
}

func (p *IcefsListXattrReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsListXattrReq(%+v)", *p)
}

// Attributes:
//  - ParentInode
//  - Name
type IcefsLookUpReq struct {
  ParentInode Ui64 `thrift:"parent_inode,1" db:"parent_inode" json:"parent_inode"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewIcefsLookUpReq() *IcefsLookUpReq {
  return &IcefsLookUpReq{}
}


func (p *IcefsLookUpReq) GetParentInode() Ui64 {
  return p.ParentInode
}

func (p *IcefsLookUpReq) GetName() string {
  return p.Name
}
func (p *IcefsLookUpReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsLookUpReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.ParentInode = temp
}
  return nil
}

func (p *IcefsLookUpReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcefsLookUpReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsLookUpReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsLookUpReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent_inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ParentInode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent_inode: ", p), err) }
  return err
}

func (p *IcefsLookUpReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IcefsLookUpReq) Equals(other *IcefsLookUpReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ParentInode != other.ParentInode { return false }
  if p.Name != other.Name { return false }
  return true
}

func (p *IcefsLookUpReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsLookUpReq(%+v)", *p)
}

// Attributes:
//  - Fh
//  - Offset
//  - Whence
type IcefsLseekReq struct {
  Fh Ui64 `thrift:"fh,1" db:"fh" json:"fh"`
  Offset int64 `thrift:"offset,2" db:"offset" json:"offset"`
  Whence int32 `thrift:"whence,3" db:"whence" json:"whence"`
}

func NewIcefsLseekReq() *IcefsLseekReq {
  return &IcefsLseekReq{}
}


func (p *IcefsLseekReq) GetFh() Ui64 {
  return p.Fh
}

func (p *IcefsLseekReq) GetOffset() int64 {
  return p.Offset
}

func (p *IcefsLseekReq) GetWhence() int32 {
  return p.Whence
}
func (p *IcefsLseekReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsLseekReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsLseekReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *IcefsLseekReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Whence = v
}
  return nil
}

func (p *IcefsLseekReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsLseekReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsLseekReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fh: ", p), err) }
  return err
}

func (p *IcefsLseekReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *IcefsLseekReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "whence", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:whence: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Whence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.whence (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:whence: ", p), err) }
  return err
}

func (p *IcefsLseekReq) Equals(other *IcefsLseekReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Fh != other.Fh { return false }
  if p.Offset != other.Offset { return false }
  if p.Whence != other.Whence { return false }
  return true
}

func (p *IcefsLseekReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsLseekReq(%+v)", *p)
}

// Attributes:
//  - ParentInode
//  - Name
//  - Mode
type IcefsMkDirReq struct {
  ParentInode Ui64 `thrift:"parent_inode,1" db:"parent_inode" json:"parent_inode"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Mode Ui32 `thrift:"mode,3" db:"mode" json:"mode"`
}

func NewIcefsMkDirReq() *IcefsMkDirReq {
  return &IcefsMkDirReq{}
}


func (p *IcefsMkDirReq) GetParentInode() Ui64 {
  return p.ParentInode
}

func (p *IcefsMkDirReq) GetName() string {
  return p.Name
}

func (p *IcefsMkDirReq) GetMode() Ui32 {
  return p.Mode
}
func (p *IcefsMkDirReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsMkDirReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.ParentInode = temp
}
  return nil
}

func (p *IcefsMkDirReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcefsMkDirReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui32(v)
  p.Mode = temp
}
  return nil
}

func (p *IcefsMkDirReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsMkDirReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsMkDirReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent_inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ParentInode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent_inode: ", p), err) }
  return err
}

func (p *IcefsMkDirReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IcefsMkDirReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mode", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Mode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mode: ", p), err) }
  return err
}

func (p *IcefsMkDirReq) Equals(other *IcefsMkDirReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ParentInode != other.ParentInode { return false }
  if p.Name != other.Name { return false }
  if p.Mode != other.Mode { return false }
  return true
}

func (p *IcefsMkDirReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsMkDirReq(%+v)", *p)
}

// Attributes:
//  - ParentInode
//  - Name
//  - Mode
//  - Rdev
type IcefsMknodReq struct {
  ParentInode Ui64 `thrift:"parent_inode,1" db:"parent_inode" json:"parent_inode"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Mode Ui32 `thrift:"mode,3" db:"mode" json:"mode"`
  Rdev Ui64 `thrift:"rdev,4" db:"rdev" json:"rdev"`
}

func NewIcefsMknodReq() *IcefsMknodReq {
  return &IcefsMknodReq{}
}


func (p *IcefsMknodReq) GetParentInode() Ui64 {
  return p.ParentInode
}

func (p *IcefsMknodReq) GetName() string {
  return p.Name
}

func (p *IcefsMknodReq) GetMode() Ui32 {
  return p.Mode
}

func (p *IcefsMknodReq) GetRdev() Ui64 {
  return p.Rdev
}
func (p *IcefsMknodReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsMknodReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.ParentInode = temp
}
  return nil
}

func (p *IcefsMknodReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcefsMknodReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui32(v)
  p.Mode = temp
}
  return nil
}

func (p *IcefsMknodReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Ui64(v)
  p.Rdev = temp
}
  return nil
}

func (p *IcefsMknodReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsMknodReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsMknodReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent_inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ParentInode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent_inode: ", p), err) }
  return err
}

func (p *IcefsMknodReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IcefsMknodReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mode", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Mode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mode: ", p), err) }
  return err
}

func (p *IcefsMknodReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rdev", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:rdev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Rdev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rdev (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:rdev: ", p), err) }
  return err
}

func (p *IcefsMknodReq) Equals(other *IcefsMknodReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ParentInode != other.ParentInode { return false }
  if p.Name != other.Name { return false }
  if p.Mode != other.Mode { return false }
  if p.Rdev != other.Rdev { return false }
  return true
}

func (p *IcefsMknodReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsMknodReq(%+v)", *p)
}

// Attributes:
//  - Inode
//  - Flags
type IcefsOpenReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
  Flags int32 `thrift:"flags,2" db:"flags" json:"flags"`
}

func NewIcefsOpenReq() *IcefsOpenReq {
  return &IcefsOpenReq{}
}


func (p *IcefsOpenReq) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsOpenReq) GetFlags() int32 {
  return p.Flags
}
func (p *IcefsOpenReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsOpenReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsOpenReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Flags = v
}
  return nil
}

func (p *IcefsOpenReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsOpenReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsOpenReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsOpenReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flags", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:flags: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Flags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flags (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:flags: ", p), err) }
  return err
}

func (p *IcefsOpenReq) Equals(other *IcefsOpenReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  if p.Flags != other.Flags { return false }
  return true
}

func (p *IcefsOpenReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsOpenReq(%+v)", *p)
}

// Attributes:
//  - Inode
type IcefsOpenDirReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
}

func NewIcefsOpenDirReq() *IcefsOpenDirReq {
  return &IcefsOpenDirReq{}
}


func (p *IcefsOpenDirReq) GetInode() Ui64 {
  return p.Inode
}
func (p *IcefsOpenDirReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsOpenDirReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsOpenDirReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsOpenDirReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsOpenDirReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsOpenDirReq) Equals(other *IcefsOpenDirReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  return true
}

func (p *IcefsOpenDirReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsOpenDirReq(%+v)", *p)
}

// Attributes:
//  - Req
//  - Inode
//  - FileInfo
type IcefsPollReq struct {
  Req *FuseReq `thrift:"req,1" db:"req" json:"req"`
  Inode Ui64 `thrift:"inode,2" db:"inode" json:"inode"`
  FileInfo *FuseFileInfo `thrift:"file_info,3" db:"file_info" json:"file_info"`
}

func NewIcefsPollReq() *IcefsPollReq {
  return &IcefsPollReq{}
}

var IcefsPollReq_Req_DEFAULT *FuseReq
func (p *IcefsPollReq) GetReq() *FuseReq {
  if !p.IsSetReq() {
    return IcefsPollReq_Req_DEFAULT
  }
return p.Req
}

func (p *IcefsPollReq) GetInode() Ui64 {
  return p.Inode
}
var IcefsPollReq_FileInfo_DEFAULT *FuseFileInfo
func (p *IcefsPollReq) GetFileInfo() *FuseFileInfo {
  if !p.IsSetFileInfo() {
    return IcefsPollReq_FileInfo_DEFAULT
  }
return p.FileInfo
}
func (p *IcefsPollReq) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsPollReq) IsSetFileInfo() bool {
  return p.FileInfo != nil
}

func (p *IcefsPollReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsPollReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &FuseReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsPollReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsPollReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.FileInfo = &FuseFileInfo{}
  if err := p.FileInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FileInfo), err)
  }
  return nil
}

func (p *IcefsPollReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsPollReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsPollReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsPollReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inode: ", p), err) }
  return err
}

func (p *IcefsPollReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "file_info", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:file_info: ", p), err) }
  if err := p.FileInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FileInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:file_info: ", p), err) }
  return err
}

func (p *IcefsPollReq) Equals(other *IcefsPollReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Req.Equals(other.Req) { return false }
  if p.Inode != other.Inode { return false }
  if !p.FileInfo.Equals(other.FileInfo) { return false }
  return true
}

func (p *IcefsPollReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsPollReq(%+v)", *p)
}

// Attributes:
//  - Size
//  - Offset
//  - Fh
type IcefsReadReq struct {
  Size Ui64 `thrift:"size,1" db:"size" json:"size"`
  Offset int64 `thrift:"offset,2" db:"offset" json:"offset"`
  Fh Ui64 `thrift:"fh,3" db:"fh" json:"fh"`
}

func NewIcefsReadReq() *IcefsReadReq {
  return &IcefsReadReq{}
}


func (p *IcefsReadReq) GetSize() Ui64 {
  return p.Size
}

func (p *IcefsReadReq) GetOffset() int64 {
  return p.Offset
}

func (p *IcefsReadReq) GetFh() Ui64 {
  return p.Fh
}
func (p *IcefsReadReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsReadReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Size = temp
}
  return nil
}

func (p *IcefsReadReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *IcefsReadReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsReadReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsReadReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsReadReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:size: ", p), err) }
  return err
}

func (p *IcefsReadReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *IcefsReadReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fh: ", p), err) }
  return err
}

func (p *IcefsReadReq) Equals(other *IcefsReadReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Size != other.Size { return false }
  if p.Offset != other.Offset { return false }
  if p.Fh != other.Fh { return false }
  return true
}

func (p *IcefsReadReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsReadReq(%+v)", *p)
}

// Attributes:
//  - Offset
//  - Fh
type IcefsReadDirReq struct {
  Offset int64 `thrift:"offset,1" db:"offset" json:"offset"`
  Fh Ui64 `thrift:"fh,2" db:"fh" json:"fh"`
}

func NewIcefsReadDirReq() *IcefsReadDirReq {
  return &IcefsReadDirReq{}
}


func (p *IcefsReadDirReq) GetOffset() int64 {
  return p.Offset
}

func (p *IcefsReadDirReq) GetFh() Ui64 {
  return p.Fh
}
func (p *IcefsReadDirReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsReadDirReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *IcefsReadDirReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsReadDirReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsReadDirReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsReadDirReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:offset: ", p), err) }
  return err
}

func (p *IcefsReadDirReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fh: ", p), err) }
  return err
}

func (p *IcefsReadDirReq) Equals(other *IcefsReadDirReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Offset != other.Offset { return false }
  if p.Fh != other.Fh { return false }
  return true
}

func (p *IcefsReadDirReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsReadDirReq(%+v)", *p)
}

// Attributes:
//  - Inode
//  - Offset
//  - Fh
type IcefsReadDirPlusReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
  Offset int64 `thrift:"offset,2" db:"offset" json:"offset"`
  Fh Ui64 `thrift:"fh,3" db:"fh" json:"fh"`
}

func NewIcefsReadDirPlusReq() *IcefsReadDirPlusReq {
  return &IcefsReadDirPlusReq{}
}


func (p *IcefsReadDirPlusReq) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsReadDirPlusReq) GetOffset() int64 {
  return p.Offset
}

func (p *IcefsReadDirPlusReq) GetFh() Ui64 {
  return p.Fh
}
func (p *IcefsReadDirPlusReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsReadDirPlusReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsReadDirPlusReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *IcefsReadDirPlusReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsReadDirPlusReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsReadDirPlusReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsReadDirPlusReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsReadDirPlusReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *IcefsReadDirPlusReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fh: ", p), err) }
  return err
}

func (p *IcefsReadDirPlusReq) Equals(other *IcefsReadDirPlusReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  if p.Offset != other.Offset { return false }
  if p.Fh != other.Fh { return false }
  return true
}

func (p *IcefsReadDirPlusReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsReadDirPlusReq(%+v)", *p)
}

// Attributes:
//  - Inode
type IcefsReadLinkReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
}

func NewIcefsReadLinkReq() *IcefsReadLinkReq {
  return &IcefsReadLinkReq{}
}


func (p *IcefsReadLinkReq) GetInode() Ui64 {
  return p.Inode
}
func (p *IcefsReadLinkReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsReadLinkReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsReadLinkReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsReadLinkReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsReadLinkReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsReadLinkReq) Equals(other *IcefsReadLinkReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  return true
}

func (p *IcefsReadLinkReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsReadLinkReq(%+v)", *p)
}

// Attributes:
//  - Inode
//  - Fh
type IcefsReleaseReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
  Fh Ui64 `thrift:"fh,2" db:"fh" json:"fh"`
}

func NewIcefsReleaseReq() *IcefsReleaseReq {
  return &IcefsReleaseReq{}
}


func (p *IcefsReleaseReq) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsReleaseReq) GetFh() Ui64 {
  return p.Fh
}
func (p *IcefsReleaseReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsReleaseReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsReleaseReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsReleaseReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsReleaseReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsReleaseReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsReleaseReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fh: ", p), err) }
  return err
}

func (p *IcefsReleaseReq) Equals(other *IcefsReleaseReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  if p.Fh != other.Fh { return false }
  return true
}

func (p *IcefsReleaseReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsReleaseReq(%+v)", *p)
}

// Attributes:
//  - Fh
type IcefsReleaseDirReq struct {
  Fh Ui64 `thrift:"fh,1" db:"fh" json:"fh"`
}

func NewIcefsReleaseDirReq() *IcefsReleaseDirReq {
  return &IcefsReleaseDirReq{}
}


func (p *IcefsReleaseDirReq) GetFh() Ui64 {
  return p.Fh
}
func (p *IcefsReleaseDirReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsReleaseDirReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsReleaseDirReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsReleaseDirReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsReleaseDirReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fh: ", p), err) }
  return err
}

func (p *IcefsReleaseDirReq) Equals(other *IcefsReleaseDirReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Fh != other.Fh { return false }
  return true
}

func (p *IcefsReleaseDirReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsReleaseDirReq(%+v)", *p)
}

// Attributes:
//  - Inode
//  - Name
type IcefsRemoveXattrReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewIcefsRemoveXattrReq() *IcefsRemoveXattrReq {
  return &IcefsRemoveXattrReq{}
}


func (p *IcefsRemoveXattrReq) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsRemoveXattrReq) GetName() string {
  return p.Name
}
func (p *IcefsRemoveXattrReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsRemoveXattrReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsRemoveXattrReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcefsRemoveXattrReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsRemoveXattrReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsRemoveXattrReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsRemoveXattrReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IcefsRemoveXattrReq) Equals(other *IcefsRemoveXattrReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  if p.Name != other.Name { return false }
  return true
}

func (p *IcefsRemoveXattrReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsRemoveXattrReq(%+v)", *p)
}

// Attributes:
//  - ParentInode
//  - Name
//  - NewParentInode_
//  - NewName_
//  - Flags
type IcefsRenameReq struct {
  ParentInode Ui64 `thrift:"parent_inode,1" db:"parent_inode" json:"parent_inode"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  NewParentInode_ Ui64 `thrift:"new_parent_inode,3" db:"new_parent_inode" json:"new_parent_inode"`
  NewName_ string `thrift:"new_name,4" db:"new_name" json:"new_name"`
  Flags Ui32 `thrift:"flags,5" db:"flags" json:"flags"`
}

func NewIcefsRenameReq() *IcefsRenameReq {
  return &IcefsRenameReq{}
}


func (p *IcefsRenameReq) GetParentInode() Ui64 {
  return p.ParentInode
}

func (p *IcefsRenameReq) GetName() string {
  return p.Name
}

func (p *IcefsRenameReq) GetNewParentInode_() Ui64 {
  return p.NewParentInode_
}

func (p *IcefsRenameReq) GetNewName_() string {
  return p.NewName_
}

func (p *IcefsRenameReq) GetFlags() Ui32 {
  return p.Flags
}
func (p *IcefsRenameReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsRenameReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.ParentInode = temp
}
  return nil
}

func (p *IcefsRenameReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcefsRenameReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui64(v)
  p.NewParentInode_ = temp
}
  return nil
}

func (p *IcefsRenameReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NewName_ = v
}
  return nil
}

func (p *IcefsRenameReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Ui32(v)
  p.Flags = temp
}
  return nil
}

func (p *IcefsRenameReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsRenameReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsRenameReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent_inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ParentInode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent_inode: ", p), err) }
  return err
}

func (p *IcefsRenameReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IcefsRenameReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_parent_inode", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_parent_inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NewParentInode_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_parent_inode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_parent_inode: ", p), err) }
  return err
}

func (p *IcefsRenameReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:new_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NewName_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:new_name: ", p), err) }
  return err
}

func (p *IcefsRenameReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flags", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:flags: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Flags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flags (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:flags: ", p), err) }
  return err
}

func (p *IcefsRenameReq) Equals(other *IcefsRenameReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ParentInode != other.ParentInode { return false }
  if p.Name != other.Name { return false }
  if p.NewParentInode_ != other.NewParentInode_ { return false }
  if p.NewName_ != other.NewName_ { return false }
  if p.Flags != other.Flags { return false }
  return true
}

func (p *IcefsRenameReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsRenameReq(%+v)", *p)
}

// Attributes:
//  - Req
//  - Cookie
//  - Inode
//  - Offset
//  - Data
type IcefsRetrieveReplyReq struct {
  Req *FuseReq `thrift:"req,1" db:"req" json:"req"`
  Cookie []byte `thrift:"cookie,2" db:"cookie" json:"cookie"`
  Inode Ui64 `thrift:"inode,3" db:"inode" json:"inode"`
  Offset int64 `thrift:"offset,4" db:"offset" json:"offset"`
  Data []*IoVector `thrift:"data,5" db:"data" json:"data"`
}

func NewIcefsRetrieveReplyReq() *IcefsRetrieveReplyReq {
  return &IcefsRetrieveReplyReq{}
}

var IcefsRetrieveReplyReq_Req_DEFAULT *FuseReq
func (p *IcefsRetrieveReplyReq) GetReq() *FuseReq {
  if !p.IsSetReq() {
    return IcefsRetrieveReplyReq_Req_DEFAULT
  }
return p.Req
}

func (p *IcefsRetrieveReplyReq) GetCookie() []byte {
  return p.Cookie
}

func (p *IcefsRetrieveReplyReq) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsRetrieveReplyReq) GetOffset() int64 {
  return p.Offset
}

func (p *IcefsRetrieveReplyReq) GetData() []*IoVector {
  return p.Data
}
func (p *IcefsRetrieveReplyReq) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsRetrieveReplyReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsRetrieveReplyReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &FuseReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsRetrieveReplyReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cookie = v
}
  return nil
}

func (p *IcefsRetrieveReplyReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsRetrieveReplyReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *IcefsRetrieveReplyReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IoVector, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &IoVector{}
    if err := _elem2.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Data = append(p.Data, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IcefsRetrieveReplyReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsRetrieveReplyReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsRetrieveReplyReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsRetrieveReplyReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cookie", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cookie: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Cookie); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cookie (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cookie: ", p), err) }
  return err
}

func (p *IcefsRetrieveReplyReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:inode: ", p), err) }
  return err
}

func (p *IcefsRetrieveReplyReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:offset: ", p), err) }
  return err
}

func (p *IcefsRetrieveReplyReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:data: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:data: ", p), err) }
  return err
}

func (p *IcefsRetrieveReplyReq) Equals(other *IcefsRetrieveReplyReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Req.Equals(other.Req) { return false }
  if bytes.Compare(p.Cookie, other.Cookie) != 0 { return false }
  if p.Inode != other.Inode { return false }
  if p.Offset != other.Offset { return false }
  if len(p.Data) != len(other.Data) { return false }
  for i, _tgt := range p.Data {
    _src3 := other.Data[i]
    if !_tgt.Equals(_src3) { return false }
  }
  return true
}

func (p *IcefsRetrieveReplyReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsRetrieveReplyReq(%+v)", *p)
}

// Attributes:
//  - ParentInode
//  - Name
type IcefsRmDirReq struct {
  ParentInode Ui64 `thrift:"parent_inode,1" db:"parent_inode" json:"parent_inode"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewIcefsRmDirReq() *IcefsRmDirReq {
  return &IcefsRmDirReq{}
}


func (p *IcefsRmDirReq) GetParentInode() Ui64 {
  return p.ParentInode
}

func (p *IcefsRmDirReq) GetName() string {
  return p.Name
}
func (p *IcefsRmDirReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsRmDirReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.ParentInode = temp
}
  return nil
}

func (p *IcefsRmDirReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcefsRmDirReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsRmDirReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsRmDirReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent_inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ParentInode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent_inode: ", p), err) }
  return err
}

func (p *IcefsRmDirReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IcefsRmDirReq) Equals(other *IcefsRmDirReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ParentInode != other.ParentInode { return false }
  if p.Name != other.Name { return false }
  return true
}

func (p *IcefsRmDirReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsRmDirReq(%+v)", *p)
}

// Attributes:
//  - Inode
//  - Stat
//  - ToSet
//  - Fh
//  - HasFh
type IcefsSetAttrReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
  Stat *StatStruct `thrift:"stat,2" db:"stat" json:"stat"`
  ToSet int32 `thrift:"to_set,3" db:"to_set" json:"to_set"`
  Fh Ui64 `thrift:"fh,4" db:"fh" json:"fh"`
  HasFh bool `thrift:"has_fh,5" db:"has_fh" json:"has_fh"`
}

func NewIcefsSetAttrReq() *IcefsSetAttrReq {
  return &IcefsSetAttrReq{}
}


func (p *IcefsSetAttrReq) GetInode() Ui64 {
  return p.Inode
}
var IcefsSetAttrReq_Stat_DEFAULT *StatStruct
func (p *IcefsSetAttrReq) GetStat() *StatStruct {
  if !p.IsSetStat() {
    return IcefsSetAttrReq_Stat_DEFAULT
  }
return p.Stat
}

func (p *IcefsSetAttrReq) GetToSet() int32 {
  return p.ToSet
}

func (p *IcefsSetAttrReq) GetFh() Ui64 {
  return p.Fh
}

func (p *IcefsSetAttrReq) GetHasFh() bool {
  return p.HasFh
}
func (p *IcefsSetAttrReq) IsSetStat() bool {
  return p.Stat != nil
}

func (p *IcefsSetAttrReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsSetAttrReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsSetAttrReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Stat = &StatStruct{}
  if err := p.Stat.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stat), err)
  }
  return nil
}

func (p *IcefsSetAttrReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ToSet = v
}
  return nil
}

func (p *IcefsSetAttrReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsSetAttrReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.HasFh = v
}
  return nil
}

func (p *IcefsSetAttrReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsSetAttrReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsSetAttrReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsSetAttrReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stat", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stat: ", p), err) }
  if err := p.Stat.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stat), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stat: ", p), err) }
  return err
}

func (p *IcefsSetAttrReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "to_set", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:to_set: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ToSet)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.to_set (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:to_set: ", p), err) }
  return err
}

func (p *IcefsSetAttrReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fh: ", p), err) }
  return err
}

func (p *IcefsSetAttrReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "has_fh", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:has_fh: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HasFh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.has_fh (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:has_fh: ", p), err) }
  return err
}

func (p *IcefsSetAttrReq) Equals(other *IcefsSetAttrReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  if !p.Stat.Equals(other.Stat) { return false }
  if p.ToSet != other.ToSet { return false }
  if p.Fh != other.Fh { return false }
  if p.HasFh != other.HasFh { return false }
  return true
}

func (p *IcefsSetAttrReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsSetAttrReq(%+v)", *p)
}

// Attributes:
//  - Req
//  - Inode
//  - FileInfo
//  - Lock
//  - Sleep
type IcefsSetLkReq struct {
  Req *FuseReq `thrift:"req,1" db:"req" json:"req"`
  Inode Ui64 `thrift:"inode,2" db:"inode" json:"inode"`
  FileInfo *FuseFileInfo `thrift:"file_info,3" db:"file_info" json:"file_info"`
  Lock *FlockStruct `thrift:"lock,4" db:"lock" json:"lock"`
  Sleep int32 `thrift:"sleep,5" db:"sleep" json:"sleep"`
}

func NewIcefsSetLkReq() *IcefsSetLkReq {
  return &IcefsSetLkReq{}
}

var IcefsSetLkReq_Req_DEFAULT *FuseReq
func (p *IcefsSetLkReq) GetReq() *FuseReq {
  if !p.IsSetReq() {
    return IcefsSetLkReq_Req_DEFAULT
  }
return p.Req
}

func (p *IcefsSetLkReq) GetInode() Ui64 {
  return p.Inode
}
var IcefsSetLkReq_FileInfo_DEFAULT *FuseFileInfo
func (p *IcefsSetLkReq) GetFileInfo() *FuseFileInfo {
  if !p.IsSetFileInfo() {
    return IcefsSetLkReq_FileInfo_DEFAULT
  }
return p.FileInfo
}
var IcefsSetLkReq_Lock_DEFAULT *FlockStruct
func (p *IcefsSetLkReq) GetLock() *FlockStruct {
  if !p.IsSetLock() {
    return IcefsSetLkReq_Lock_DEFAULT
  }
return p.Lock
}

func (p *IcefsSetLkReq) GetSleep() int32 {
  return p.Sleep
}
func (p *IcefsSetLkReq) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsSetLkReq) IsSetFileInfo() bool {
  return p.FileInfo != nil
}

func (p *IcefsSetLkReq) IsSetLock() bool {
  return p.Lock != nil
}

func (p *IcefsSetLkReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsSetLkReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &FuseReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsSetLkReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsSetLkReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.FileInfo = &FuseFileInfo{}
  if err := p.FileInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FileInfo), err)
  }
  return nil
}

func (p *IcefsSetLkReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Lock = &FlockStruct{}
  if err := p.Lock.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Lock), err)
  }
  return nil
}

func (p *IcefsSetLkReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Sleep = v
}
  return nil
}

func (p *IcefsSetLkReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsSetLkReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsSetLkReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsSetLkReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inode: ", p), err) }
  return err
}

func (p *IcefsSetLkReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "file_info", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:file_info: ", p), err) }
  if err := p.FileInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FileInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:file_info: ", p), err) }
  return err
}

func (p *IcefsSetLkReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lock", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lock: ", p), err) }
  if err := p.Lock.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Lock), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lock: ", p), err) }
  return err
}

func (p *IcefsSetLkReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sleep", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sleep: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Sleep)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sleep (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sleep: ", p), err) }
  return err
}

func (p *IcefsSetLkReq) Equals(other *IcefsSetLkReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Req.Equals(other.Req) { return false }
  if p.Inode != other.Inode { return false }
  if !p.FileInfo.Equals(other.FileInfo) { return false }
  if !p.Lock.Equals(other.Lock) { return false }
  if p.Sleep != other.Sleep { return false }
  return true
}

func (p *IcefsSetLkReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsSetLkReq(%+v)", *p)
}

// Attributes:
//  - Inode
//  - Name
//  - Value
//  - Flags
type IcefsSetXattrReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Value string `thrift:"value,3" db:"value" json:"value"`
  Flags int32 `thrift:"flags,4" db:"flags" json:"flags"`
}

func NewIcefsSetXattrReq() *IcefsSetXattrReq {
  return &IcefsSetXattrReq{}
}


func (p *IcefsSetXattrReq) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsSetXattrReq) GetName() string {
  return p.Name
}

func (p *IcefsSetXattrReq) GetValue() string {
  return p.Value
}

func (p *IcefsSetXattrReq) GetFlags() int32 {
  return p.Flags
}
func (p *IcefsSetXattrReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsSetXattrReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsSetXattrReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcefsSetXattrReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *IcefsSetXattrReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Flags = v
}
  return nil
}

func (p *IcefsSetXattrReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsSetXattrReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsSetXattrReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsSetXattrReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IcefsSetXattrReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *IcefsSetXattrReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flags", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:flags: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Flags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flags (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:flags: ", p), err) }
  return err
}

func (p *IcefsSetXattrReq) Equals(other *IcefsSetXattrReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  if p.Name != other.Name { return false }
  if p.Value != other.Value { return false }
  if p.Flags != other.Flags { return false }
  return true
}

func (p *IcefsSetXattrReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsSetXattrReq(%+v)", *p)
}

// Attributes:
//  - Inode
type IcefsStatFSReq struct {
  Inode Ui64 `thrift:"inode,1" db:"inode" json:"inode"`
}

func NewIcefsStatFSReq() *IcefsStatFSReq {
  return &IcefsStatFSReq{}
}


func (p *IcefsStatFSReq) GetInode() Ui64 {
  return p.Inode
}
func (p *IcefsStatFSReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsStatFSReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsStatFSReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsStatFSReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsStatFSReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inode: ", p), err) }
  return err
}

func (p *IcefsStatFSReq) Equals(other *IcefsStatFSReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Inode != other.Inode { return false }
  return true
}

func (p *IcefsStatFSReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsStatFSReq(%+v)", *p)
}

// Attributes:
//  - Link
//  - ParentInode
//  - Name
type IcefsSymLinkReq struct {
  Link string `thrift:"link,1" db:"link" json:"link"`
  ParentInode Ui64 `thrift:"parent_inode,2" db:"parent_inode" json:"parent_inode"`
  Name string `thrift:"name,3" db:"name" json:"name"`
}

func NewIcefsSymLinkReq() *IcefsSymLinkReq {
  return &IcefsSymLinkReq{}
}


func (p *IcefsSymLinkReq) GetLink() string {
  return p.Link
}

func (p *IcefsSymLinkReq) GetParentInode() Ui64 {
  return p.ParentInode
}

func (p *IcefsSymLinkReq) GetName() string {
  return p.Name
}
func (p *IcefsSymLinkReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsSymLinkReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Link = v
}
  return nil
}

func (p *IcefsSymLinkReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.ParentInode = temp
}
  return nil
}

func (p *IcefsSymLinkReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcefsSymLinkReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsSymLinkReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsSymLinkReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "link", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:link: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Link)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.link (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:link: ", p), err) }
  return err
}

func (p *IcefsSymLinkReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_inode", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parent_inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ParentInode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_inode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parent_inode: ", p), err) }
  return err
}

func (p *IcefsSymLinkReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *IcefsSymLinkReq) Equals(other *IcefsSymLinkReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Link != other.Link { return false }
  if p.ParentInode != other.ParentInode { return false }
  if p.Name != other.Name { return false }
  return true
}

func (p *IcefsSymLinkReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsSymLinkReq(%+v)", *p)
}

// Attributes:
//  - ParentInode
//  - Name
type IcefsUnlinkReq struct {
  ParentInode Ui64 `thrift:"parent_inode,1" db:"parent_inode" json:"parent_inode"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewIcefsUnlinkReq() *IcefsUnlinkReq {
  return &IcefsUnlinkReq{}
}


func (p *IcefsUnlinkReq) GetParentInode() Ui64 {
  return p.ParentInode
}

func (p *IcefsUnlinkReq) GetName() string {
  return p.Name
}
func (p *IcefsUnlinkReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsUnlinkReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ui64(v)
  p.ParentInode = temp
}
  return nil
}

func (p *IcefsUnlinkReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcefsUnlinkReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsUnlinkReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsUnlinkReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parent_inode", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parent_inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ParentInode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent_inode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parent_inode: ", p), err) }
  return err
}

func (p *IcefsUnlinkReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IcefsUnlinkReq) Equals(other *IcefsUnlinkReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ParentInode != other.ParentInode { return false }
  if p.Name != other.Name { return false }
  return true
}

func (p *IcefsUnlinkReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsUnlinkReq(%+v)", *p)
}

// Attributes:
//  - Req
//  - Inode
//  - Buf
//  - Offset
//  - FileInfo
type IcefsWriteBufReq struct {
  Req *FuseReq `thrift:"req,1" db:"req" json:"req"`
  Inode Ui64 `thrift:"inode,2" db:"inode" json:"inode"`
  Buf []*IoVector `thrift:"buf,3" db:"buf" json:"buf"`
  Offset int64 `thrift:"offset,4" db:"offset" json:"offset"`
  FileInfo *FuseFileInfo `thrift:"file_info,5" db:"file_info" json:"file_info"`
}

func NewIcefsWriteBufReq() *IcefsWriteBufReq {
  return &IcefsWriteBufReq{}
}

var IcefsWriteBufReq_Req_DEFAULT *FuseReq
func (p *IcefsWriteBufReq) GetReq() *FuseReq {
  if !p.IsSetReq() {
    return IcefsWriteBufReq_Req_DEFAULT
  }
return p.Req
}

func (p *IcefsWriteBufReq) GetInode() Ui64 {
  return p.Inode
}

func (p *IcefsWriteBufReq) GetBuf() []*IoVector {
  return p.Buf
}

func (p *IcefsWriteBufReq) GetOffset() int64 {
  return p.Offset
}
var IcefsWriteBufReq_FileInfo_DEFAULT *FuseFileInfo
func (p *IcefsWriteBufReq) GetFileInfo() *FuseFileInfo {
  if !p.IsSetFileInfo() {
    return IcefsWriteBufReq_FileInfo_DEFAULT
  }
return p.FileInfo
}
func (p *IcefsWriteBufReq) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsWriteBufReq) IsSetFileInfo() bool {
  return p.FileInfo != nil
}

func (p *IcefsWriteBufReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsWriteBufReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &FuseReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsWriteBufReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Inode = temp
}
  return nil
}

func (p *IcefsWriteBufReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IoVector, 0, size)
  p.Buf =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &IoVector{}
    if err := _elem4.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Buf = append(p.Buf, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IcefsWriteBufReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *IcefsWriteBufReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.FileInfo = &FuseFileInfo{}
  if err := p.FileInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FileInfo), err)
  }
  return nil
}

func (p *IcefsWriteBufReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsWriteBufReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsWriteBufReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsWriteBufReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inode", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Inode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inode: ", p), err) }
  return err
}

func (p *IcefsWriteBufReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "buf", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:buf: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Buf)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Buf {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:buf: ", p), err) }
  return err
}

func (p *IcefsWriteBufReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:offset: ", p), err) }
  return err
}

func (p *IcefsWriteBufReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "file_info", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:file_info: ", p), err) }
  if err := p.FileInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FileInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:file_info: ", p), err) }
  return err
}

func (p *IcefsWriteBufReq) Equals(other *IcefsWriteBufReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Req.Equals(other.Req) { return false }
  if p.Inode != other.Inode { return false }
  if len(p.Buf) != len(other.Buf) { return false }
  for i, _tgt := range p.Buf {
    _src5 := other.Buf[i]
    if !_tgt.Equals(_src5) { return false }
  }
  if p.Offset != other.Offset { return false }
  if !p.FileInfo.Equals(other.FileInfo) { return false }
  return true
}

func (p *IcefsWriteBufReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsWriteBufReq(%+v)", *p)
}

// Attributes:
//  - Buf
//  - Offset
//  - Fh
//  - Size
type IcefsWriteReq struct {
  Buf []byte `thrift:"buf,1" db:"buf" json:"buf"`
  Offset int64 `thrift:"offset,2" db:"offset" json:"offset"`
  Fh Ui64 `thrift:"fh,3" db:"fh" json:"fh"`
  Size Ui64 `thrift:"size,4" db:"size" json:"size"`
}

func NewIcefsWriteReq() *IcefsWriteReq {
  return &IcefsWriteReq{}
}


func (p *IcefsWriteReq) GetBuf() []byte {
  return p.Buf
}

func (p *IcefsWriteReq) GetOffset() int64 {
  return p.Offset
}

func (p *IcefsWriteReq) GetFh() Ui64 {
  return p.Fh
}

func (p *IcefsWriteReq) GetSize() Ui64 {
  return p.Size
}
func (p *IcefsWriteReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsWriteReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Buf = v
}
  return nil
}

func (p *IcefsWriteReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *IcefsWriteReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsWriteReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Ui64(v)
  p.Size = temp
}
  return nil
}

func (p *IcefsWriteReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsWriteReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsWriteReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "buf", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:buf: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Buf); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buf (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:buf: ", p), err) }
  return err
}

func (p *IcefsWriteReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *IcefsWriteReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fh: ", p), err) }
  return err
}

func (p *IcefsWriteReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:size: ", p), err) }
  return err
}

func (p *IcefsWriteReq) Equals(other *IcefsWriteReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Buf, other.Buf) != 0 { return false }
  if p.Offset != other.Offset { return false }
  if p.Fh != other.Fh { return false }
  if p.Size != other.Size { return false }
  return true
}

func (p *IcefsWriteReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsWriteReq(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsAccessRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsAccessRes() *IcefsAccessRes {
  return &IcefsAccessRes{
Status: 5,
}
}


func (p *IcefsAccessRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsAccessRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsAccessRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsAccessRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsAccessRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsAccessRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsAccessRes) Equals(other *IcefsAccessRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsAccessRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsAccessRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsBmapRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsBmapRes() *IcefsBmapRes {
  return &IcefsBmapRes{
Status: 5,
}
}


func (p *IcefsBmapRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsBmapRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsBmapRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsBmapRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsBmapRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsBmapRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsBmapRes) Equals(other *IcefsBmapRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsBmapRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsBmapRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Size
type IcefsCopyFileRangeRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Size Ui64 `thrift:"size,2" db:"size" json:"size"`
}

func NewIcefsCopyFileRangeRes() *IcefsCopyFileRangeRes {
  return &IcefsCopyFileRangeRes{
Status: 5,
}
}


func (p *IcefsCopyFileRangeRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsCopyFileRangeRes) GetSize() Ui64 {
  return p.Size
}
func (p *IcefsCopyFileRangeRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsCopyFileRangeRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsCopyFileRangeRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Size = temp
}
  return nil
}

func (p *IcefsCopyFileRangeRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsCopyFileRangeRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsCopyFileRangeRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsCopyFileRangeRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *IcefsCopyFileRangeRes) Equals(other *IcefsCopyFileRangeRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if p.Size != other.Size { return false }
  return true
}

func (p *IcefsCopyFileRangeRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsCopyFileRangeRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Fh
//  - Entry
type IcefsCreateRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Fh Ui64 `thrift:"fh,2" db:"fh" json:"fh"`
  Entry *FuseEntryParam `thrift:"entry,3" db:"entry" json:"entry"`
}

func NewIcefsCreateRes() *IcefsCreateRes {
  return &IcefsCreateRes{
Status: 5,
}
}


func (p *IcefsCreateRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsCreateRes) GetFh() Ui64 {
  return p.Fh
}
var IcefsCreateRes_Entry_DEFAULT *FuseEntryParam
func (p *IcefsCreateRes) GetEntry() *FuseEntryParam {
  if !p.IsSetEntry() {
    return IcefsCreateRes_Entry_DEFAULT
  }
return p.Entry
}
func (p *IcefsCreateRes) IsSetEntry() bool {
  return p.Entry != nil
}

func (p *IcefsCreateRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsCreateRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsCreateRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsCreateRes)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Entry = &FuseEntryParam{}
  if err := p.Entry.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Entry), err)
  }
  return nil
}

func (p *IcefsCreateRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsCreateRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsCreateRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsCreateRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fh: ", p), err) }
  return err
}

func (p *IcefsCreateRes) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entry", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entry: ", p), err) }
  if err := p.Entry.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Entry), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entry: ", p), err) }
  return err
}

func (p *IcefsCreateRes) Equals(other *IcefsCreateRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if p.Fh != other.Fh { return false }
  if !p.Entry.Equals(other.Entry) { return false }
  return true
}

func (p *IcefsCreateRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsCreateRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Info
type IcefsDestroyRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Info string `thrift:"info,2" db:"info" json:"info"`
}

func NewIcefsDestroyRes() *IcefsDestroyRes {
  return &IcefsDestroyRes{
Status: 5,
}
}


func (p *IcefsDestroyRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsDestroyRes) GetInfo() string {
  return p.Info
}
func (p *IcefsDestroyRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsDestroyRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsDestroyRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Info = v
}
  return nil
}

func (p *IcefsDestroyRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsDestroyRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsDestroyRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsDestroyRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Info)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.info (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  return err
}

func (p *IcefsDestroyRes) Equals(other *IcefsDestroyRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if p.Info != other.Info { return false }
  return true
}

func (p *IcefsDestroyRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsDestroyRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsFallocateRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsFallocateRes() *IcefsFallocateRes {
  return &IcefsFallocateRes{
Status: 5,
}
}


func (p *IcefsFallocateRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsFallocateRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsFallocateRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsFallocateRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsFallocateRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsFallocateRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsFallocateRes) Equals(other *IcefsFallocateRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsFallocateRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsFallocateRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsFlockRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsFlockRes() *IcefsFlockRes {
  return &IcefsFlockRes{
Status: 5,
}
}


func (p *IcefsFlockRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsFlockRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsFlockRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsFlockRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsFlockRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsFlockRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsFlockRes) Equals(other *IcefsFlockRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsFlockRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsFlockRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsFlushRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsFlushRes() *IcefsFlushRes {
  return &IcefsFlushRes{
Status: 5,
}
}


func (p *IcefsFlushRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsFlushRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsFlushRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsFlushRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsFlushRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsFlushRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsFlushRes) Equals(other *IcefsFlushRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsFlushRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsFlushRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsForgetMultiRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsForgetMultiRes() *IcefsForgetMultiRes {
  return &IcefsForgetMultiRes{
Status: 5,
}
}


func (p *IcefsForgetMultiRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsForgetMultiRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsForgetMultiRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsForgetMultiRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsForgetMultiRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsForgetMultiRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsForgetMultiRes) Equals(other *IcefsForgetMultiRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsForgetMultiRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsForgetMultiRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsForgetRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsForgetRes() *IcefsForgetRes {
  return &IcefsForgetRes{
Status: 5,
}
}


func (p *IcefsForgetRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsForgetRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsForgetRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsForgetRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsForgetRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsForgetRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsForgetRes) Equals(other *IcefsForgetRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsForgetRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsForgetRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsFsyncRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsFsyncRes() *IcefsFsyncRes {
  return &IcefsFsyncRes{
Status: 5,
}
}


func (p *IcefsFsyncRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsFsyncRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsFsyncRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsFsyncRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsFsyncRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsFsyncRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsFsyncRes) Equals(other *IcefsFsyncRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsFsyncRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsFsyncRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsFsyncDirRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsFsyncDirRes() *IcefsFsyncDirRes {
  return &IcefsFsyncDirRes{
Status: 5,
}
}


func (p *IcefsFsyncDirRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsFsyncDirRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsFsyncDirRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsFsyncDirRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsFsyncDirRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsFsyncDirRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsFsyncDirRes) Equals(other *IcefsFsyncDirRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsFsyncDirRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsFsyncDirRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Stat
type IcefsGetAttrRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Stat *StatStruct `thrift:"stat,2" db:"stat" json:"stat"`
}

func NewIcefsGetAttrRes() *IcefsGetAttrRes {
  return &IcefsGetAttrRes{
Status: 5,
}
}


func (p *IcefsGetAttrRes) GetStatus() int32 {
  return p.Status
}
var IcefsGetAttrRes_Stat_DEFAULT *StatStruct
func (p *IcefsGetAttrRes) GetStat() *StatStruct {
  if !p.IsSetStat() {
    return IcefsGetAttrRes_Stat_DEFAULT
  }
return p.Stat
}
func (p *IcefsGetAttrRes) IsSetStat() bool {
  return p.Stat != nil
}

func (p *IcefsGetAttrRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsGetAttrRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsGetAttrRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Stat = &StatStruct{}
  if err := p.Stat.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stat), err)
  }
  return nil
}

func (p *IcefsGetAttrRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsGetAttrRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsGetAttrRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsGetAttrRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stat", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stat: ", p), err) }
  if err := p.Stat.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stat), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stat: ", p), err) }
  return err
}

func (p *IcefsGetAttrRes) Equals(other *IcefsGetAttrRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if !p.Stat.Equals(other.Stat) { return false }
  return true
}

func (p *IcefsGetAttrRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsGetAttrRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsGetLkRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsGetLkRes() *IcefsGetLkRes {
  return &IcefsGetLkRes{
Status: 5,
}
}


func (p *IcefsGetLkRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsGetLkRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsGetLkRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsGetLkRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsGetLkRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsGetLkRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsGetLkRes) Equals(other *IcefsGetLkRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsGetLkRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsGetLkRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Size
//  - Value
type IcefsGetXattrRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Size int64 `thrift:"size,2" db:"size" json:"size"`
  Value []byte `thrift:"value,3" db:"value" json:"value"`
}

func NewIcefsGetXattrRes() *IcefsGetXattrRes {
  return &IcefsGetXattrRes{
Status: 5,
}
}


func (p *IcefsGetXattrRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsGetXattrRes) GetSize() int64 {
  return p.Size
}

func (p *IcefsGetXattrRes) GetValue() []byte {
  return p.Value
}
func (p *IcefsGetXattrRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsGetXattrRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsGetXattrRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *IcefsGetXattrRes)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *IcefsGetXattrRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsGetXattrRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsGetXattrRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsGetXattrRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *IcefsGetXattrRes) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *IcefsGetXattrRes) Equals(other *IcefsGetXattrRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if p.Size != other.Size { return false }
  if bytes.Compare(p.Value, other.Value) != 0 { return false }
  return true
}

func (p *IcefsGetXattrRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsGetXattrRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Info
//  - Can
type IcefsInitRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Info string `thrift:"info,2" db:"info" json:"info"`
  Can Ui32 `thrift:"can,3" db:"can" json:"can"`
}

func NewIcefsInitRes() *IcefsInitRes {
  return &IcefsInitRes{
Status: 5,
}
}


func (p *IcefsInitRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsInitRes) GetInfo() string {
  return p.Info
}

func (p *IcefsInitRes) GetCan() Ui32 {
  return p.Can
}
func (p *IcefsInitRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsInitRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsInitRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Info = v
}
  return nil
}

func (p *IcefsInitRes)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ui32(v)
  p.Can = temp
}
  return nil
}

func (p *IcefsInitRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsInitRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsInitRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsInitRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Info)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.info (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  return err
}

func (p *IcefsInitRes) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "can", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:can: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Can)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.can (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:can: ", p), err) }
  return err
}

func (p *IcefsInitRes) Equals(other *IcefsInitRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if p.Info != other.Info { return false }
  if p.Can != other.Can { return false }
  return true
}

func (p *IcefsInitRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsInitRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Data
type IcefsIoctlRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Data []*IoVector `thrift:"data,2" db:"data" json:"data"`
}

func NewIcefsIoctlRes() *IcefsIoctlRes {
  return &IcefsIoctlRes{
Status: 5,
}
}


func (p *IcefsIoctlRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsIoctlRes) GetData() []*IoVector {
  return p.Data
}
func (p *IcefsIoctlRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsIoctlRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsIoctlRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IoVector, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &IoVector{}
    if err := _elem6.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Data = append(p.Data, _elem6)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IcefsIoctlRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsIoctlRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsIoctlRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsIoctlRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *IcefsIoctlRes) Equals(other *IcefsIoctlRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if len(p.Data) != len(other.Data) { return false }
  for i, _tgt := range p.Data {
    _src7 := other.Data[i]
    if !_tgt.Equals(_src7) { return false }
  }
  return true
}

func (p *IcefsIoctlRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsIoctlRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Entry
type IcefsLinkRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Entry *FuseEntryParam `thrift:"entry,2" db:"entry" json:"entry"`
}

func NewIcefsLinkRes() *IcefsLinkRes {
  return &IcefsLinkRes{
Status: 5,
}
}


func (p *IcefsLinkRes) GetStatus() int32 {
  return p.Status
}
var IcefsLinkRes_Entry_DEFAULT *FuseEntryParam
func (p *IcefsLinkRes) GetEntry() *FuseEntryParam {
  if !p.IsSetEntry() {
    return IcefsLinkRes_Entry_DEFAULT
  }
return p.Entry
}
func (p *IcefsLinkRes) IsSetEntry() bool {
  return p.Entry != nil
}

func (p *IcefsLinkRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsLinkRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsLinkRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Entry = &FuseEntryParam{}
  if err := p.Entry.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Entry), err)
  }
  return nil
}

func (p *IcefsLinkRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsLinkRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsLinkRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsLinkRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entry", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entry: ", p), err) }
  if err := p.Entry.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Entry), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entry: ", p), err) }
  return err
}

func (p *IcefsLinkRes) Equals(other *IcefsLinkRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if !p.Entry.Equals(other.Entry) { return false }
  return true
}

func (p *IcefsLinkRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsLinkRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Size
//  - Value
type IcefsListXattrRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Size int64 `thrift:"size,2" db:"size" json:"size"`
  Value []byte `thrift:"value,3" db:"value" json:"value"`
}

func NewIcefsListXattrRes() *IcefsListXattrRes {
  return &IcefsListXattrRes{
Status: 5,
}
}


func (p *IcefsListXattrRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsListXattrRes) GetSize() int64 {
  return p.Size
}

func (p *IcefsListXattrRes) GetValue() []byte {
  return p.Value
}
func (p *IcefsListXattrRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsListXattrRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsListXattrRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *IcefsListXattrRes)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *IcefsListXattrRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsListXattrRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsListXattrRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsListXattrRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *IcefsListXattrRes) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *IcefsListXattrRes) Equals(other *IcefsListXattrRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if p.Size != other.Size { return false }
  if bytes.Compare(p.Value, other.Value) != 0 { return false }
  return true
}

func (p *IcefsListXattrRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsListXattrRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Entry
type IcefsLookUpRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Entry *FuseEntryParam `thrift:"entry,2" db:"entry" json:"entry"`
}

func NewIcefsLookUpRes() *IcefsLookUpRes {
  return &IcefsLookUpRes{
Status: 5,
}
}


func (p *IcefsLookUpRes) GetStatus() int32 {
  return p.Status
}
var IcefsLookUpRes_Entry_DEFAULT *FuseEntryParam
func (p *IcefsLookUpRes) GetEntry() *FuseEntryParam {
  if !p.IsSetEntry() {
    return IcefsLookUpRes_Entry_DEFAULT
  }
return p.Entry
}
func (p *IcefsLookUpRes) IsSetEntry() bool {
  return p.Entry != nil
}

func (p *IcefsLookUpRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsLookUpRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsLookUpRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Entry = &FuseEntryParam{}
  if err := p.Entry.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Entry), err)
  }
  return nil
}

func (p *IcefsLookUpRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsLookUpRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsLookUpRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsLookUpRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entry", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entry: ", p), err) }
  if err := p.Entry.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Entry), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entry: ", p), err) }
  return err
}

func (p *IcefsLookUpRes) Equals(other *IcefsLookUpRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if !p.Entry.Equals(other.Entry) { return false }
  return true
}

func (p *IcefsLookUpRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsLookUpRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Offset
type IcefsLseekRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Offset int64 `thrift:"offset,2" db:"offset" json:"offset"`
}

func NewIcefsLseekRes() *IcefsLseekRes {
  return &IcefsLseekRes{
Status: 5,
}
}


func (p *IcefsLseekRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsLseekRes) GetOffset() int64 {
  return p.Offset
}
func (p *IcefsLseekRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsLseekRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsLseekRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *IcefsLseekRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsLseekRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsLseekRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsLseekRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "offset", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *IcefsLseekRes) Equals(other *IcefsLseekRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if p.Offset != other.Offset { return false }
  return true
}

func (p *IcefsLseekRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsLseekRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Entry
type IcefsMkDirRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Entry *FuseEntryParam `thrift:"entry,2" db:"entry" json:"entry"`
}

func NewIcefsMkDirRes() *IcefsMkDirRes {
  return &IcefsMkDirRes{
Status: 5,
}
}


func (p *IcefsMkDirRes) GetStatus() int32 {
  return p.Status
}
var IcefsMkDirRes_Entry_DEFAULT *FuseEntryParam
func (p *IcefsMkDirRes) GetEntry() *FuseEntryParam {
  if !p.IsSetEntry() {
    return IcefsMkDirRes_Entry_DEFAULT
  }
return p.Entry
}
func (p *IcefsMkDirRes) IsSetEntry() bool {
  return p.Entry != nil
}

func (p *IcefsMkDirRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsMkDirRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsMkDirRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Entry = &FuseEntryParam{}
  if err := p.Entry.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Entry), err)
  }
  return nil
}

func (p *IcefsMkDirRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsMkDirRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsMkDirRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsMkDirRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entry", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entry: ", p), err) }
  if err := p.Entry.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Entry), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entry: ", p), err) }
  return err
}

func (p *IcefsMkDirRes) Equals(other *IcefsMkDirRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if !p.Entry.Equals(other.Entry) { return false }
  return true
}

func (p *IcefsMkDirRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsMkDirRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Entry
type IcefsMknodRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Entry *FuseEntryParam `thrift:"entry,2" db:"entry" json:"entry"`
}

func NewIcefsMknodRes() *IcefsMknodRes {
  return &IcefsMknodRes{
Status: 5,
}
}


func (p *IcefsMknodRes) GetStatus() int32 {
  return p.Status
}
var IcefsMknodRes_Entry_DEFAULT *FuseEntryParam
func (p *IcefsMknodRes) GetEntry() *FuseEntryParam {
  if !p.IsSetEntry() {
    return IcefsMknodRes_Entry_DEFAULT
  }
return p.Entry
}
func (p *IcefsMknodRes) IsSetEntry() bool {
  return p.Entry != nil
}

func (p *IcefsMknodRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsMknodRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsMknodRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Entry = &FuseEntryParam{}
  if err := p.Entry.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Entry), err)
  }
  return nil
}

func (p *IcefsMknodRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsMknodRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsMknodRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsMknodRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entry", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entry: ", p), err) }
  if err := p.Entry.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Entry), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entry: ", p), err) }
  return err
}

func (p *IcefsMknodRes) Equals(other *IcefsMknodRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if !p.Entry.Equals(other.Entry) { return false }
  return true
}

func (p *IcefsMknodRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsMknodRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Fh
type IcefsOpenRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Fh Ui64 `thrift:"fh,2" db:"fh" json:"fh"`
}

func NewIcefsOpenRes() *IcefsOpenRes {
  return &IcefsOpenRes{
Status: 5,
}
}


func (p *IcefsOpenRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsOpenRes) GetFh() Ui64 {
  return p.Fh
}
func (p *IcefsOpenRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsOpenRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsOpenRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsOpenRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsOpenRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsOpenRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsOpenRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fh: ", p), err) }
  return err
}

func (p *IcefsOpenRes) Equals(other *IcefsOpenRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if p.Fh != other.Fh { return false }
  return true
}

func (p *IcefsOpenRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsOpenRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Fh
type IcefsOpenDirRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Fh Ui64 `thrift:"fh,2" db:"fh" json:"fh"`
}

func NewIcefsOpenDirRes() *IcefsOpenDirRes {
  return &IcefsOpenDirRes{
Status: 5,
}
}


func (p *IcefsOpenDirRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsOpenDirRes) GetFh() Ui64 {
  return p.Fh
}
func (p *IcefsOpenDirRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsOpenDirRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsOpenDirRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Fh = temp
}
  return nil
}

func (p *IcefsOpenDirRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsOpenDirRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsOpenDirRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsOpenDirRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fh", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fh: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Fh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fh (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fh: ", p), err) }
  return err
}

func (p *IcefsOpenDirRes) Equals(other *IcefsOpenDirRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if p.Fh != other.Fh { return false }
  return true
}

func (p *IcefsOpenDirRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsOpenDirRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Revents
type IcefsPollRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Revents Ui32 `thrift:"revents,2" db:"revents" json:"revents"`
}

func NewIcefsPollRes() *IcefsPollRes {
  return &IcefsPollRes{
Status: 5,
}
}


func (p *IcefsPollRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsPollRes) GetRevents() Ui32 {
  return p.Revents
}
func (p *IcefsPollRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsPollRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsPollRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui32(v)
  p.Revents = temp
}
  return nil
}

func (p *IcefsPollRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsPollRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsPollRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsPollRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revents", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:revents: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Revents)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revents (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:revents: ", p), err) }
  return err
}

func (p *IcefsPollRes) Equals(other *IcefsPollRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if p.Revents != other.Revents { return false }
  return true
}

func (p *IcefsPollRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsPollRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Size
//  - Data
type IcefsReadRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Size Ui64 `thrift:"size,2" db:"size" json:"size"`
  Data []byte `thrift:"data,3" db:"data" json:"data"`
}

func NewIcefsReadRes() *IcefsReadRes {
  return &IcefsReadRes{
Status: 5,
}
}


func (p *IcefsReadRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsReadRes) GetSize() Ui64 {
  return p.Size
}

func (p *IcefsReadRes) GetData() []byte {
  return p.Data
}
func (p *IcefsReadRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsReadRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsReadRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Size = temp
}
  return nil
}

func (p *IcefsReadRes)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *IcefsReadRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsReadRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsReadRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsReadRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *IcefsReadRes) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Data); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  return err
}

func (p *IcefsReadRes) Equals(other *IcefsReadRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if p.Size != other.Size { return false }
  if bytes.Compare(p.Data, other.Data) != 0 { return false }
  return true
}

func (p *IcefsReadRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsReadRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Data
type IcefsReadDirRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Data []*DirentStruct `thrift:"data,2" db:"data" json:"data"`
}

func NewIcefsReadDirRes() *IcefsReadDirRes {
  return &IcefsReadDirRes{
Status: 5,
}
}


func (p *IcefsReadDirRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsReadDirRes) GetData() []*DirentStruct {
  return p.Data
}
func (p *IcefsReadDirRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsReadDirRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsReadDirRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DirentStruct, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &DirentStruct{}
    if err := _elem8.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.Data = append(p.Data, _elem8)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IcefsReadDirRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsReadDirRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsReadDirRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsReadDirRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *IcefsReadDirRes) Equals(other *IcefsReadDirRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if len(p.Data) != len(other.Data) { return false }
  for i, _tgt := range p.Data {
    _src9 := other.Data[i]
    if !_tgt.Equals(_src9) { return false }
  }
  return true
}

func (p *IcefsReadDirRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsReadDirRes(%+v)", *p)
}

// Attributes:
//  - Entry
//  - DirEntry
type IcefsReadDirPlusData struct {
  Entry *FuseEntryParam `thrift:"entry,1" db:"entry" json:"entry"`
  DirEntry *DirentStruct `thrift:"dir_entry,2" db:"dir_entry" json:"dir_entry"`
}

func NewIcefsReadDirPlusData() *IcefsReadDirPlusData {
  return &IcefsReadDirPlusData{}
}

var IcefsReadDirPlusData_Entry_DEFAULT *FuseEntryParam
func (p *IcefsReadDirPlusData) GetEntry() *FuseEntryParam {
  if !p.IsSetEntry() {
    return IcefsReadDirPlusData_Entry_DEFAULT
  }
return p.Entry
}
var IcefsReadDirPlusData_DirEntry_DEFAULT *DirentStruct
func (p *IcefsReadDirPlusData) GetDirEntry() *DirentStruct {
  if !p.IsSetDirEntry() {
    return IcefsReadDirPlusData_DirEntry_DEFAULT
  }
return p.DirEntry
}
func (p *IcefsReadDirPlusData) IsSetEntry() bool {
  return p.Entry != nil
}

func (p *IcefsReadDirPlusData) IsSetDirEntry() bool {
  return p.DirEntry != nil
}

func (p *IcefsReadDirPlusData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsReadDirPlusData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Entry = &FuseEntryParam{}
  if err := p.Entry.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Entry), err)
  }
  return nil
}

func (p *IcefsReadDirPlusData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.DirEntry = &DirentStruct{}
  if err := p.DirEntry.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DirEntry), err)
  }
  return nil
}

func (p *IcefsReadDirPlusData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsReadDirPlusData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsReadDirPlusData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entry", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entry: ", p), err) }
  if err := p.Entry.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Entry), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entry: ", p), err) }
  return err
}

func (p *IcefsReadDirPlusData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dir_entry", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dir_entry: ", p), err) }
  if err := p.DirEntry.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DirEntry), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dir_entry: ", p), err) }
  return err
}

func (p *IcefsReadDirPlusData) Equals(other *IcefsReadDirPlusData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Entry.Equals(other.Entry) { return false }
  if !p.DirEntry.Equals(other.DirEntry) { return false }
  return true
}

func (p *IcefsReadDirPlusData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsReadDirPlusData(%+v)", *p)
}

// Attributes:
//  - Status
//  - Data
type IcefsReadDirPlusRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Data []*IcefsReadDirPlusData `thrift:"data,2" db:"data" json:"data"`
}

func NewIcefsReadDirPlusRes() *IcefsReadDirPlusRes {
  return &IcefsReadDirPlusRes{
Status: 5,
}
}


func (p *IcefsReadDirPlusRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsReadDirPlusRes) GetData() []*IcefsReadDirPlusData {
  return p.Data
}
func (p *IcefsReadDirPlusRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsReadDirPlusRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsReadDirPlusRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IcefsReadDirPlusData, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &IcefsReadDirPlusData{}
    if err := _elem10.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.Data = append(p.Data, _elem10)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IcefsReadDirPlusRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsReadDirPlusRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsReadDirPlusRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsReadDirPlusRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *IcefsReadDirPlusRes) Equals(other *IcefsReadDirPlusRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if len(p.Data) != len(other.Data) { return false }
  for i, _tgt := range p.Data {
    _src11 := other.Data[i]
    if !_tgt.Equals(_src11) { return false }
  }
  return true
}

func (p *IcefsReadDirPlusRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsReadDirPlusRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Path
type IcefsReadLinkRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Path string `thrift:"path,2" db:"path" json:"path"`
}

func NewIcefsReadLinkRes() *IcefsReadLinkRes {
  return &IcefsReadLinkRes{
Status: 5,
}
}


func (p *IcefsReadLinkRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsReadLinkRes) GetPath() string {
  return p.Path
}
func (p *IcefsReadLinkRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsReadLinkRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsReadLinkRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *IcefsReadLinkRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsReadLinkRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsReadLinkRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsReadLinkRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *IcefsReadLinkRes) Equals(other *IcefsReadLinkRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if p.Path != other.Path { return false }
  return true
}

func (p *IcefsReadLinkRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsReadLinkRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsReleaseRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsReleaseRes() *IcefsReleaseRes {
  return &IcefsReleaseRes{
Status: 5,
}
}


func (p *IcefsReleaseRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsReleaseRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsReleaseRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsReleaseRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsReleaseRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsReleaseRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsReleaseRes) Equals(other *IcefsReleaseRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsReleaseRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsReleaseRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsReleaseDirRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsReleaseDirRes() *IcefsReleaseDirRes {
  return &IcefsReleaseDirRes{
Status: 5,
}
}


func (p *IcefsReleaseDirRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsReleaseDirRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsReleaseDirRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsReleaseDirRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsReleaseDirRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsReleaseDirRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsReleaseDirRes) Equals(other *IcefsReleaseDirRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsReleaseDirRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsReleaseDirRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsRemoveXattrRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsRemoveXattrRes() *IcefsRemoveXattrRes {
  return &IcefsRemoveXattrRes{
Status: 5,
}
}


func (p *IcefsRemoveXattrRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsRemoveXattrRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsRemoveXattrRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsRemoveXattrRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsRemoveXattrRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsRemoveXattrRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsRemoveXattrRes) Equals(other *IcefsRemoveXattrRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsRemoveXattrRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsRemoveXattrRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsRenameRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsRenameRes() *IcefsRenameRes {
  return &IcefsRenameRes{
Status: 5,
}
}


func (p *IcefsRenameRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsRenameRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsRenameRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsRenameRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsRenameRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsRenameRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsRenameRes) Equals(other *IcefsRenameRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsRenameRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsRenameRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsRetrieveReplyRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsRetrieveReplyRes() *IcefsRetrieveReplyRes {
  return &IcefsRetrieveReplyRes{
Status: 5,
}
}


func (p *IcefsRetrieveReplyRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsRetrieveReplyRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsRetrieveReplyRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsRetrieveReplyRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsRetrieveReplyRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsRetrieveReplyRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsRetrieveReplyRes) Equals(other *IcefsRetrieveReplyRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsRetrieveReplyRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsRetrieveReplyRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsRmDirRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsRmDirRes() *IcefsRmDirRes {
  return &IcefsRmDirRes{
Status: 5,
}
}


func (p *IcefsRmDirRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsRmDirRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsRmDirRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsRmDirRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsRmDirRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsRmDirRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsRmDirRes) Equals(other *IcefsRmDirRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsRmDirRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsRmDirRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Stat
type IcefsSetAttrRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Stat *StatStruct `thrift:"stat,2" db:"stat" json:"stat"`
}

func NewIcefsSetAttrRes() *IcefsSetAttrRes {
  return &IcefsSetAttrRes{
Status: 5,
}
}


func (p *IcefsSetAttrRes) GetStatus() int32 {
  return p.Status
}
var IcefsSetAttrRes_Stat_DEFAULT *StatStruct
func (p *IcefsSetAttrRes) GetStat() *StatStruct {
  if !p.IsSetStat() {
    return IcefsSetAttrRes_Stat_DEFAULT
  }
return p.Stat
}
func (p *IcefsSetAttrRes) IsSetStat() bool {
  return p.Stat != nil
}

func (p *IcefsSetAttrRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsSetAttrRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsSetAttrRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Stat = &StatStruct{}
  if err := p.Stat.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stat), err)
  }
  return nil
}

func (p *IcefsSetAttrRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsSetAttrRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsSetAttrRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsSetAttrRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stat", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stat: ", p), err) }
  if err := p.Stat.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stat), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stat: ", p), err) }
  return err
}

func (p *IcefsSetAttrRes) Equals(other *IcefsSetAttrRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if !p.Stat.Equals(other.Stat) { return false }
  return true
}

func (p *IcefsSetAttrRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsSetAttrRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsSetLkRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsSetLkRes() *IcefsSetLkRes {
  return &IcefsSetLkRes{
Status: 5,
}
}


func (p *IcefsSetLkRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsSetLkRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsSetLkRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsSetLkRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsSetLkRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsSetLkRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsSetLkRes) Equals(other *IcefsSetLkRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsSetLkRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsSetLkRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsSetXattrRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsSetXattrRes() *IcefsSetXattrRes {
  return &IcefsSetXattrRes{
Status: 5,
}
}


func (p *IcefsSetXattrRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsSetXattrRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsSetXattrRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsSetXattrRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsSetXattrRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsSetXattrRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsSetXattrRes) Equals(other *IcefsSetXattrRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsSetXattrRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsSetXattrRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Statvfs
type IcefsStatFSRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Statvfs *StatvfsStruct `thrift:"statvfs,2" db:"statvfs" json:"statvfs"`
}

func NewIcefsStatFSRes() *IcefsStatFSRes {
  return &IcefsStatFSRes{
Status: 5,
}
}


func (p *IcefsStatFSRes) GetStatus() int32 {
  return p.Status
}
var IcefsStatFSRes_Statvfs_DEFAULT *StatvfsStruct
func (p *IcefsStatFSRes) GetStatvfs() *StatvfsStruct {
  if !p.IsSetStatvfs() {
    return IcefsStatFSRes_Statvfs_DEFAULT
  }
return p.Statvfs
}
func (p *IcefsStatFSRes) IsSetStatvfs() bool {
  return p.Statvfs != nil
}

func (p *IcefsStatFSRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsStatFSRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsStatFSRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Statvfs = &StatvfsStruct{}
  if err := p.Statvfs.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Statvfs), err)
  }
  return nil
}

func (p *IcefsStatFSRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsStatFSRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsStatFSRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsStatFSRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statvfs", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:statvfs: ", p), err) }
  if err := p.Statvfs.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Statvfs), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:statvfs: ", p), err) }
  return err
}

func (p *IcefsStatFSRes) Equals(other *IcefsStatFSRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if !p.Statvfs.Equals(other.Statvfs) { return false }
  return true
}

func (p *IcefsStatFSRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsStatFSRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Entry
type IcefsSymLinkRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Entry *FuseEntryParam `thrift:"entry,2" db:"entry" json:"entry"`
}

func NewIcefsSymLinkRes() *IcefsSymLinkRes {
  return &IcefsSymLinkRes{
Status: 5,
}
}


func (p *IcefsSymLinkRes) GetStatus() int32 {
  return p.Status
}
var IcefsSymLinkRes_Entry_DEFAULT *FuseEntryParam
func (p *IcefsSymLinkRes) GetEntry() *FuseEntryParam {
  if !p.IsSetEntry() {
    return IcefsSymLinkRes_Entry_DEFAULT
  }
return p.Entry
}
func (p *IcefsSymLinkRes) IsSetEntry() bool {
  return p.Entry != nil
}

func (p *IcefsSymLinkRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsSymLinkRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsSymLinkRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Entry = &FuseEntryParam{}
  if err := p.Entry.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Entry), err)
  }
  return nil
}

func (p *IcefsSymLinkRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsSymLinkRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsSymLinkRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsSymLinkRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entry", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entry: ", p), err) }
  if err := p.Entry.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Entry), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entry: ", p), err) }
  return err
}

func (p *IcefsSymLinkRes) Equals(other *IcefsSymLinkRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if !p.Entry.Equals(other.Entry) { return false }
  return true
}

func (p *IcefsSymLinkRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsSymLinkRes(%+v)", *p)
}

// Attributes:
//  - Status
type IcefsUnlinkRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
}

func NewIcefsUnlinkRes() *IcefsUnlinkRes {
  return &IcefsUnlinkRes{
Status: 5,
}
}


func (p *IcefsUnlinkRes) GetStatus() int32 {
  return p.Status
}
func (p *IcefsUnlinkRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsUnlinkRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsUnlinkRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsUnlinkRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsUnlinkRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsUnlinkRes) Equals(other *IcefsUnlinkRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *IcefsUnlinkRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsUnlinkRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Size
type IcefsWriteBufRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Size Ui64 `thrift:"size,2" db:"size" json:"size"`
}

func NewIcefsWriteBufRes() *IcefsWriteBufRes {
  return &IcefsWriteBufRes{
Status: 5,
}
}


func (p *IcefsWriteBufRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsWriteBufRes) GetSize() Ui64 {
  return p.Size
}
func (p *IcefsWriteBufRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsWriteBufRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsWriteBufRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Size = temp
}
  return nil
}

func (p *IcefsWriteBufRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsWriteBufRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsWriteBufRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsWriteBufRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *IcefsWriteBufRes) Equals(other *IcefsWriteBufRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if p.Size != other.Size { return false }
  return true
}

func (p *IcefsWriteBufRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsWriteBufRes(%+v)", *p)
}

// Attributes:
//  - Status
//  - Size
type IcefsWriteRes struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Size Ui64 `thrift:"size,2" db:"size" json:"size"`
}

func NewIcefsWriteRes() *IcefsWriteRes {
  return &IcefsWriteRes{
Status: 5,
}
}


func (p *IcefsWriteRes) GetStatus() int32 {
  return p.Status
}

func (p *IcefsWriteRes) GetSize() Ui64 {
  return p.Size
}
func (p *IcefsWriteRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsWriteRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IcefsWriteRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ui64(v)
  p.Size = temp
}
  return nil
}

func (p *IcefsWriteRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IcefsWriteRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsWriteRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *IcefsWriteRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *IcefsWriteRes) Equals(other *IcefsWriteRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if p.Size != other.Size { return false }
  return true
}

func (p *IcefsWriteRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsWriteRes(%+v)", *p)
}

type IcefsThrift interface {
  // Parameters:
  //  - Req
  DoIcefsInit(ctx context.Context, req *IcefsInitReq) (_r *IcefsInitRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsDestroy(ctx context.Context, req *IcefsDestroyReq) (_r *IcefsDestroyRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsLookUp(ctx context.Context, req *IcefsLookUpReq) (_r *IcefsLookUpRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsForget(ctx context.Context, req *IcefsForgetReq) (_r *IcefsForgetRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsGetAttr(ctx context.Context, req *IcefsGetAttrReq) (_r *IcefsGetAttrRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsSetAttr(ctx context.Context, req *IcefsSetAttrReq) (_r *IcefsSetAttrRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsReadLink(ctx context.Context, req *IcefsReadLinkReq) (_r *IcefsReadLinkRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsMknod(ctx context.Context, req *IcefsMknodReq) (_r *IcefsMknodRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsMkDir(ctx context.Context, req *IcefsMkDirReq) (_r *IcefsMkDirRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsUnlink(ctx context.Context, req *IcefsUnlinkReq) (_r *IcefsUnlinkRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsRmDir(ctx context.Context, req *IcefsRmDirReq) (_r *IcefsRmDirRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsSymLink(ctx context.Context, req *IcefsSymLinkReq) (_r *IcefsSymLinkRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsRename(ctx context.Context, req *IcefsRenameReq) (_r *IcefsRenameRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsLink(ctx context.Context, req *IcefsLinkReq) (_r *IcefsLinkRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsOpen(ctx context.Context, req *IcefsOpenReq) (_r *IcefsOpenRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsRead(ctx context.Context, req *IcefsReadReq) (_r *IcefsReadRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsWrite(ctx context.Context, req *IcefsWriteReq) (_r *IcefsWriteRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsFlush(ctx context.Context, req *IcefsFlushReq) (_r *IcefsFlushRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsRelease(ctx context.Context, req *IcefsReleaseReq) (_r *IcefsReleaseRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsFsync(ctx context.Context, req *IcefsFsyncReq) (_r *IcefsFsyncRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsOpenDir(ctx context.Context, req *IcefsOpenDirReq) (_r *IcefsOpenDirRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsReadDir(ctx context.Context, req *IcefsReadDirReq) (_r *IcefsReadDirRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsReleaseDir(ctx context.Context, req *IcefsReleaseDirReq) (_r *IcefsReleaseDirRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsFsyncDir(ctx context.Context, req *IcefsFsyncDirReq) (_r *IcefsFsyncDirRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsStatFS(ctx context.Context, req *IcefsStatFSReq) (_r *IcefsStatFSRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsSetXattr(ctx context.Context, req *IcefsSetXattrReq) (_r *IcefsSetXattrRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsGetXattr(ctx context.Context, req *IcefsGetXattrReq) (_r *IcefsGetXattrRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsListXattr(ctx context.Context, req *IcefsListXattrReq) (_r *IcefsListXattrRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsRemoveXattr(ctx context.Context, req *IcefsRemoveXattrReq) (_r *IcefsRemoveXattrRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsAccess(ctx context.Context, req *IcefsAccessReq) (_r *IcefsAccessRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsCreate(ctx context.Context, req *IcefsCreateReq) (_r *IcefsCreateRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsGetLk(ctx context.Context, req *IcefsGetLkReq) (_r *IcefsGetLkRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsSetLk(ctx context.Context, req *IcefsSetLkReq) (_r *IcefsSetLkRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsBmap(ctx context.Context, req *IcefsBmapReq) (_r *IcefsBmapRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsIoctl(ctx context.Context, req *IcefsIoctlReq) (_r *IcefsIoctlRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsPoll(ctx context.Context, req *IcefsPollReq) (_r *IcefsPollRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsWriteBuf(ctx context.Context, req *IcefsWriteBufReq) (_r *IcefsWriteBufRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsRetrieveReply(ctx context.Context, req *IcefsRetrieveReplyReq) (_r *IcefsRetrieveReplyRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsForgetMulti(ctx context.Context, req *IcefsForgetMultiReq) (_r *IcefsForgetMultiRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsFlock(ctx context.Context, req *IcefsFlockReq) (_r *IcefsFlockRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsFallocate(ctx context.Context, req *IcefsFallocateReq) (_r *IcefsFallocateRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsReadDirPlus(ctx context.Context, req *IcefsReadDirPlusReq) (_r *IcefsReadDirPlusRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsCopyFileRange(ctx context.Context, req *IcefsCopyFileRangeReq) (_r *IcefsCopyFileRangeRes, _err error)
  // Parameters:
  //  - Req
  DoIcefsLseek(ctx context.Context, req *IcefsLseekReq) (_r *IcefsLseekRes, _err error)
}

type IcefsThriftClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewIcefsThriftClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IcefsThriftClient {
  return &IcefsThriftClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewIcefsThriftClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IcefsThriftClient {
  return &IcefsThriftClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewIcefsThriftClient(c thrift.TClient) *IcefsThriftClient {
  return &IcefsThriftClient{
    c: c,
  }
}

func (p *IcefsThriftClient) Client_() thrift.TClient {
  return p.c
}

func (p *IcefsThriftClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *IcefsThriftClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsInit(ctx context.Context, req *IcefsInitReq) (_r *IcefsInitRes, _err error) {
  var _args12 IcefsThriftDoIcefsInitArgs
  _args12.Req = req
  var _result14 IcefsThriftDoIcefsInitResult
  var _meta13 thrift.ResponseMeta
  _meta13, _err = p.Client_().Call(ctx, "DoIcefsInit", &_args12, &_result14)
  p.SetLastResponseMeta_(_meta13)
  if _err != nil {
    return
  }
  if _ret15 := _result14.GetSuccess(); _ret15 != nil {
    return _ret15, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsInit failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsDestroy(ctx context.Context, req *IcefsDestroyReq) (_r *IcefsDestroyRes, _err error) {
  var _args16 IcefsThriftDoIcefsDestroyArgs
  _args16.Req = req
  var _result18 IcefsThriftDoIcefsDestroyResult
  var _meta17 thrift.ResponseMeta
  _meta17, _err = p.Client_().Call(ctx, "DoIcefsDestroy", &_args16, &_result18)
  p.SetLastResponseMeta_(_meta17)
  if _err != nil {
    return
  }
  if _ret19 := _result18.GetSuccess(); _ret19 != nil {
    return _ret19, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsDestroy failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsLookUp(ctx context.Context, req *IcefsLookUpReq) (_r *IcefsLookUpRes, _err error) {
  var _args20 IcefsThriftDoIcefsLookUpArgs
  _args20.Req = req
  var _result22 IcefsThriftDoIcefsLookUpResult
  var _meta21 thrift.ResponseMeta
  _meta21, _err = p.Client_().Call(ctx, "DoIcefsLookUp", &_args20, &_result22)
  p.SetLastResponseMeta_(_meta21)
  if _err != nil {
    return
  }
  if _ret23 := _result22.GetSuccess(); _ret23 != nil {
    return _ret23, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsLookUp failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsForget(ctx context.Context, req *IcefsForgetReq) (_r *IcefsForgetRes, _err error) {
  var _args24 IcefsThriftDoIcefsForgetArgs
  _args24.Req = req
  var _result26 IcefsThriftDoIcefsForgetResult
  var _meta25 thrift.ResponseMeta
  _meta25, _err = p.Client_().Call(ctx, "DoIcefsForget", &_args24, &_result26)
  p.SetLastResponseMeta_(_meta25)
  if _err != nil {
    return
  }
  if _ret27 := _result26.GetSuccess(); _ret27 != nil {
    return _ret27, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsForget failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsGetAttr(ctx context.Context, req *IcefsGetAttrReq) (_r *IcefsGetAttrRes, _err error) {
  var _args28 IcefsThriftDoIcefsGetAttrArgs
  _args28.Req = req
  var _result30 IcefsThriftDoIcefsGetAttrResult
  var _meta29 thrift.ResponseMeta
  _meta29, _err = p.Client_().Call(ctx, "DoIcefsGetAttr", &_args28, &_result30)
  p.SetLastResponseMeta_(_meta29)
  if _err != nil {
    return
  }
  if _ret31 := _result30.GetSuccess(); _ret31 != nil {
    return _ret31, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsGetAttr failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsSetAttr(ctx context.Context, req *IcefsSetAttrReq) (_r *IcefsSetAttrRes, _err error) {
  var _args32 IcefsThriftDoIcefsSetAttrArgs
  _args32.Req = req
  var _result34 IcefsThriftDoIcefsSetAttrResult
  var _meta33 thrift.ResponseMeta
  _meta33, _err = p.Client_().Call(ctx, "DoIcefsSetAttr", &_args32, &_result34)
  p.SetLastResponseMeta_(_meta33)
  if _err != nil {
    return
  }
  if _ret35 := _result34.GetSuccess(); _ret35 != nil {
    return _ret35, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsSetAttr failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsReadLink(ctx context.Context, req *IcefsReadLinkReq) (_r *IcefsReadLinkRes, _err error) {
  var _args36 IcefsThriftDoIcefsReadLinkArgs
  _args36.Req = req
  var _result38 IcefsThriftDoIcefsReadLinkResult
  var _meta37 thrift.ResponseMeta
  _meta37, _err = p.Client_().Call(ctx, "DoIcefsReadLink", &_args36, &_result38)
  p.SetLastResponseMeta_(_meta37)
  if _err != nil {
    return
  }
  if _ret39 := _result38.GetSuccess(); _ret39 != nil {
    return _ret39, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsReadLink failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsMknod(ctx context.Context, req *IcefsMknodReq) (_r *IcefsMknodRes, _err error) {
  var _args40 IcefsThriftDoIcefsMknodArgs
  _args40.Req = req
  var _result42 IcefsThriftDoIcefsMknodResult
  var _meta41 thrift.ResponseMeta
  _meta41, _err = p.Client_().Call(ctx, "DoIcefsMknod", &_args40, &_result42)
  p.SetLastResponseMeta_(_meta41)
  if _err != nil {
    return
  }
  if _ret43 := _result42.GetSuccess(); _ret43 != nil {
    return _ret43, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsMknod failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsMkDir(ctx context.Context, req *IcefsMkDirReq) (_r *IcefsMkDirRes, _err error) {
  var _args44 IcefsThriftDoIcefsMkDirArgs
  _args44.Req = req
  var _result46 IcefsThriftDoIcefsMkDirResult
  var _meta45 thrift.ResponseMeta
  _meta45, _err = p.Client_().Call(ctx, "DoIcefsMkDir", &_args44, &_result46)
  p.SetLastResponseMeta_(_meta45)
  if _err != nil {
    return
  }
  if _ret47 := _result46.GetSuccess(); _ret47 != nil {
    return _ret47, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsMkDir failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsUnlink(ctx context.Context, req *IcefsUnlinkReq) (_r *IcefsUnlinkRes, _err error) {
  var _args48 IcefsThriftDoIcefsUnlinkArgs
  _args48.Req = req
  var _result50 IcefsThriftDoIcefsUnlinkResult
  var _meta49 thrift.ResponseMeta
  _meta49, _err = p.Client_().Call(ctx, "DoIcefsUnlink", &_args48, &_result50)
  p.SetLastResponseMeta_(_meta49)
  if _err != nil {
    return
  }
  if _ret51 := _result50.GetSuccess(); _ret51 != nil {
    return _ret51, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsUnlink failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsRmDir(ctx context.Context, req *IcefsRmDirReq) (_r *IcefsRmDirRes, _err error) {
  var _args52 IcefsThriftDoIcefsRmDirArgs
  _args52.Req = req
  var _result54 IcefsThriftDoIcefsRmDirResult
  var _meta53 thrift.ResponseMeta
  _meta53, _err = p.Client_().Call(ctx, "DoIcefsRmDir", &_args52, &_result54)
  p.SetLastResponseMeta_(_meta53)
  if _err != nil {
    return
  }
  if _ret55 := _result54.GetSuccess(); _ret55 != nil {
    return _ret55, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsRmDir failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsSymLink(ctx context.Context, req *IcefsSymLinkReq) (_r *IcefsSymLinkRes, _err error) {
  var _args56 IcefsThriftDoIcefsSymLinkArgs
  _args56.Req = req
  var _result58 IcefsThriftDoIcefsSymLinkResult
  var _meta57 thrift.ResponseMeta
  _meta57, _err = p.Client_().Call(ctx, "DoIcefsSymLink", &_args56, &_result58)
  p.SetLastResponseMeta_(_meta57)
  if _err != nil {
    return
  }
  if _ret59 := _result58.GetSuccess(); _ret59 != nil {
    return _ret59, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsSymLink failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsRename(ctx context.Context, req *IcefsRenameReq) (_r *IcefsRenameRes, _err error) {
  var _args60 IcefsThriftDoIcefsRenameArgs
  _args60.Req = req
  var _result62 IcefsThriftDoIcefsRenameResult
  var _meta61 thrift.ResponseMeta
  _meta61, _err = p.Client_().Call(ctx, "DoIcefsRename", &_args60, &_result62)
  p.SetLastResponseMeta_(_meta61)
  if _err != nil {
    return
  }
  if _ret63 := _result62.GetSuccess(); _ret63 != nil {
    return _ret63, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsRename failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsLink(ctx context.Context, req *IcefsLinkReq) (_r *IcefsLinkRes, _err error) {
  var _args64 IcefsThriftDoIcefsLinkArgs
  _args64.Req = req
  var _result66 IcefsThriftDoIcefsLinkResult
  var _meta65 thrift.ResponseMeta
  _meta65, _err = p.Client_().Call(ctx, "DoIcefsLink", &_args64, &_result66)
  p.SetLastResponseMeta_(_meta65)
  if _err != nil {
    return
  }
  if _ret67 := _result66.GetSuccess(); _ret67 != nil {
    return _ret67, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsLink failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsOpen(ctx context.Context, req *IcefsOpenReq) (_r *IcefsOpenRes, _err error) {
  var _args68 IcefsThriftDoIcefsOpenArgs
  _args68.Req = req
  var _result70 IcefsThriftDoIcefsOpenResult
  var _meta69 thrift.ResponseMeta
  _meta69, _err = p.Client_().Call(ctx, "DoIcefsOpen", &_args68, &_result70)
  p.SetLastResponseMeta_(_meta69)
  if _err != nil {
    return
  }
  if _ret71 := _result70.GetSuccess(); _ret71 != nil {
    return _ret71, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsOpen failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsRead(ctx context.Context, req *IcefsReadReq) (_r *IcefsReadRes, _err error) {
  var _args72 IcefsThriftDoIcefsReadArgs
  _args72.Req = req
  var _result74 IcefsThriftDoIcefsReadResult
  var _meta73 thrift.ResponseMeta
  _meta73, _err = p.Client_().Call(ctx, "DoIcefsRead", &_args72, &_result74)
  p.SetLastResponseMeta_(_meta73)
  if _err != nil {
    return
  }
  if _ret75 := _result74.GetSuccess(); _ret75 != nil {
    return _ret75, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsRead failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsWrite(ctx context.Context, req *IcefsWriteReq) (_r *IcefsWriteRes, _err error) {
  var _args76 IcefsThriftDoIcefsWriteArgs
  _args76.Req = req
  var _result78 IcefsThriftDoIcefsWriteResult
  var _meta77 thrift.ResponseMeta
  _meta77, _err = p.Client_().Call(ctx, "DoIcefsWrite", &_args76, &_result78)
  p.SetLastResponseMeta_(_meta77)
  if _err != nil {
    return
  }
  if _ret79 := _result78.GetSuccess(); _ret79 != nil {
    return _ret79, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsWrite failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsFlush(ctx context.Context, req *IcefsFlushReq) (_r *IcefsFlushRes, _err error) {
  var _args80 IcefsThriftDoIcefsFlushArgs
  _args80.Req = req
  var _result82 IcefsThriftDoIcefsFlushResult
  var _meta81 thrift.ResponseMeta
  _meta81, _err = p.Client_().Call(ctx, "DoIcefsFlush", &_args80, &_result82)
  p.SetLastResponseMeta_(_meta81)
  if _err != nil {
    return
  }
  if _ret83 := _result82.GetSuccess(); _ret83 != nil {
    return _ret83, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsFlush failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsRelease(ctx context.Context, req *IcefsReleaseReq) (_r *IcefsReleaseRes, _err error) {
  var _args84 IcefsThriftDoIcefsReleaseArgs
  _args84.Req = req
  var _result86 IcefsThriftDoIcefsReleaseResult
  var _meta85 thrift.ResponseMeta
  _meta85, _err = p.Client_().Call(ctx, "DoIcefsRelease", &_args84, &_result86)
  p.SetLastResponseMeta_(_meta85)
  if _err != nil {
    return
  }
  if _ret87 := _result86.GetSuccess(); _ret87 != nil {
    return _ret87, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsRelease failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsFsync(ctx context.Context, req *IcefsFsyncReq) (_r *IcefsFsyncRes, _err error) {
  var _args88 IcefsThriftDoIcefsFsyncArgs
  _args88.Req = req
  var _result90 IcefsThriftDoIcefsFsyncResult
  var _meta89 thrift.ResponseMeta
  _meta89, _err = p.Client_().Call(ctx, "DoIcefsFsync", &_args88, &_result90)
  p.SetLastResponseMeta_(_meta89)
  if _err != nil {
    return
  }
  if _ret91 := _result90.GetSuccess(); _ret91 != nil {
    return _ret91, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsFsync failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsOpenDir(ctx context.Context, req *IcefsOpenDirReq) (_r *IcefsOpenDirRes, _err error) {
  var _args92 IcefsThriftDoIcefsOpenDirArgs
  _args92.Req = req
  var _result94 IcefsThriftDoIcefsOpenDirResult
  var _meta93 thrift.ResponseMeta
  _meta93, _err = p.Client_().Call(ctx, "DoIcefsOpenDir", &_args92, &_result94)
  p.SetLastResponseMeta_(_meta93)
  if _err != nil {
    return
  }
  if _ret95 := _result94.GetSuccess(); _ret95 != nil {
    return _ret95, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsOpenDir failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsReadDir(ctx context.Context, req *IcefsReadDirReq) (_r *IcefsReadDirRes, _err error) {
  var _args96 IcefsThriftDoIcefsReadDirArgs
  _args96.Req = req
  var _result98 IcefsThriftDoIcefsReadDirResult
  var _meta97 thrift.ResponseMeta
  _meta97, _err = p.Client_().Call(ctx, "DoIcefsReadDir", &_args96, &_result98)
  p.SetLastResponseMeta_(_meta97)
  if _err != nil {
    return
  }
  if _ret99 := _result98.GetSuccess(); _ret99 != nil {
    return _ret99, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsReadDir failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsReleaseDir(ctx context.Context, req *IcefsReleaseDirReq) (_r *IcefsReleaseDirRes, _err error) {
  var _args100 IcefsThriftDoIcefsReleaseDirArgs
  _args100.Req = req
  var _result102 IcefsThriftDoIcefsReleaseDirResult
  var _meta101 thrift.ResponseMeta
  _meta101, _err = p.Client_().Call(ctx, "DoIcefsReleaseDir", &_args100, &_result102)
  p.SetLastResponseMeta_(_meta101)
  if _err != nil {
    return
  }
  if _ret103 := _result102.GetSuccess(); _ret103 != nil {
    return _ret103, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsReleaseDir failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsFsyncDir(ctx context.Context, req *IcefsFsyncDirReq) (_r *IcefsFsyncDirRes, _err error) {
  var _args104 IcefsThriftDoIcefsFsyncDirArgs
  _args104.Req = req
  var _result106 IcefsThriftDoIcefsFsyncDirResult
  var _meta105 thrift.ResponseMeta
  _meta105, _err = p.Client_().Call(ctx, "DoIcefsFsyncDir", &_args104, &_result106)
  p.SetLastResponseMeta_(_meta105)
  if _err != nil {
    return
  }
  if _ret107 := _result106.GetSuccess(); _ret107 != nil {
    return _ret107, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsFsyncDir failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsStatFS(ctx context.Context, req *IcefsStatFSReq) (_r *IcefsStatFSRes, _err error) {
  var _args108 IcefsThriftDoIcefsStatFSArgs
  _args108.Req = req
  var _result110 IcefsThriftDoIcefsStatFSResult
  var _meta109 thrift.ResponseMeta
  _meta109, _err = p.Client_().Call(ctx, "DoIcefsStatFS", &_args108, &_result110)
  p.SetLastResponseMeta_(_meta109)
  if _err != nil {
    return
  }
  if _ret111 := _result110.GetSuccess(); _ret111 != nil {
    return _ret111, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsStatFS failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsSetXattr(ctx context.Context, req *IcefsSetXattrReq) (_r *IcefsSetXattrRes, _err error) {
  var _args112 IcefsThriftDoIcefsSetXattrArgs
  _args112.Req = req
  var _result114 IcefsThriftDoIcefsSetXattrResult
  var _meta113 thrift.ResponseMeta
  _meta113, _err = p.Client_().Call(ctx, "DoIcefsSetXattr", &_args112, &_result114)
  p.SetLastResponseMeta_(_meta113)
  if _err != nil {
    return
  }
  if _ret115 := _result114.GetSuccess(); _ret115 != nil {
    return _ret115, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsSetXattr failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsGetXattr(ctx context.Context, req *IcefsGetXattrReq) (_r *IcefsGetXattrRes, _err error) {
  var _args116 IcefsThriftDoIcefsGetXattrArgs
  _args116.Req = req
  var _result118 IcefsThriftDoIcefsGetXattrResult
  var _meta117 thrift.ResponseMeta
  _meta117, _err = p.Client_().Call(ctx, "DoIcefsGetXattr", &_args116, &_result118)
  p.SetLastResponseMeta_(_meta117)
  if _err != nil {
    return
  }
  if _ret119 := _result118.GetSuccess(); _ret119 != nil {
    return _ret119, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsGetXattr failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsListXattr(ctx context.Context, req *IcefsListXattrReq) (_r *IcefsListXattrRes, _err error) {
  var _args120 IcefsThriftDoIcefsListXattrArgs
  _args120.Req = req
  var _result122 IcefsThriftDoIcefsListXattrResult
  var _meta121 thrift.ResponseMeta
  _meta121, _err = p.Client_().Call(ctx, "DoIcefsListXattr", &_args120, &_result122)
  p.SetLastResponseMeta_(_meta121)
  if _err != nil {
    return
  }
  if _ret123 := _result122.GetSuccess(); _ret123 != nil {
    return _ret123, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsListXattr failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsRemoveXattr(ctx context.Context, req *IcefsRemoveXattrReq) (_r *IcefsRemoveXattrRes, _err error) {
  var _args124 IcefsThriftDoIcefsRemoveXattrArgs
  _args124.Req = req
  var _result126 IcefsThriftDoIcefsRemoveXattrResult
  var _meta125 thrift.ResponseMeta
  _meta125, _err = p.Client_().Call(ctx, "DoIcefsRemoveXattr", &_args124, &_result126)
  p.SetLastResponseMeta_(_meta125)
  if _err != nil {
    return
  }
  if _ret127 := _result126.GetSuccess(); _ret127 != nil {
    return _ret127, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsRemoveXattr failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsAccess(ctx context.Context, req *IcefsAccessReq) (_r *IcefsAccessRes, _err error) {
  var _args128 IcefsThriftDoIcefsAccessArgs
  _args128.Req = req
  var _result130 IcefsThriftDoIcefsAccessResult
  var _meta129 thrift.ResponseMeta
  _meta129, _err = p.Client_().Call(ctx, "DoIcefsAccess", &_args128, &_result130)
  p.SetLastResponseMeta_(_meta129)
  if _err != nil {
    return
  }
  if _ret131 := _result130.GetSuccess(); _ret131 != nil {
    return _ret131, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsAccess failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsCreate(ctx context.Context, req *IcefsCreateReq) (_r *IcefsCreateRes, _err error) {
  var _args132 IcefsThriftDoIcefsCreateArgs
  _args132.Req = req
  var _result134 IcefsThriftDoIcefsCreateResult
  var _meta133 thrift.ResponseMeta
  _meta133, _err = p.Client_().Call(ctx, "DoIcefsCreate", &_args132, &_result134)
  p.SetLastResponseMeta_(_meta133)
  if _err != nil {
    return
  }
  if _ret135 := _result134.GetSuccess(); _ret135 != nil {
    return _ret135, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsCreate failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsGetLk(ctx context.Context, req *IcefsGetLkReq) (_r *IcefsGetLkRes, _err error) {
  var _args136 IcefsThriftDoIcefsGetLkArgs
  _args136.Req = req
  var _result138 IcefsThriftDoIcefsGetLkResult
  var _meta137 thrift.ResponseMeta
  _meta137, _err = p.Client_().Call(ctx, "DoIcefsGetLk", &_args136, &_result138)
  p.SetLastResponseMeta_(_meta137)
  if _err != nil {
    return
  }
  if _ret139 := _result138.GetSuccess(); _ret139 != nil {
    return _ret139, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsGetLk failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsSetLk(ctx context.Context, req *IcefsSetLkReq) (_r *IcefsSetLkRes, _err error) {
  var _args140 IcefsThriftDoIcefsSetLkArgs
  _args140.Req = req
  var _result142 IcefsThriftDoIcefsSetLkResult
  var _meta141 thrift.ResponseMeta
  _meta141, _err = p.Client_().Call(ctx, "DoIcefsSetLk", &_args140, &_result142)
  p.SetLastResponseMeta_(_meta141)
  if _err != nil {
    return
  }
  if _ret143 := _result142.GetSuccess(); _ret143 != nil {
    return _ret143, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsSetLk failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsBmap(ctx context.Context, req *IcefsBmapReq) (_r *IcefsBmapRes, _err error) {
  var _args144 IcefsThriftDoIcefsBmapArgs
  _args144.Req = req
  var _result146 IcefsThriftDoIcefsBmapResult
  var _meta145 thrift.ResponseMeta
  _meta145, _err = p.Client_().Call(ctx, "DoIcefsBmap", &_args144, &_result146)
  p.SetLastResponseMeta_(_meta145)
  if _err != nil {
    return
  }
  if _ret147 := _result146.GetSuccess(); _ret147 != nil {
    return _ret147, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsBmap failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsIoctl(ctx context.Context, req *IcefsIoctlReq) (_r *IcefsIoctlRes, _err error) {
  var _args148 IcefsThriftDoIcefsIoctlArgs
  _args148.Req = req
  var _result150 IcefsThriftDoIcefsIoctlResult
  var _meta149 thrift.ResponseMeta
  _meta149, _err = p.Client_().Call(ctx, "DoIcefsIoctl", &_args148, &_result150)
  p.SetLastResponseMeta_(_meta149)
  if _err != nil {
    return
  }
  if _ret151 := _result150.GetSuccess(); _ret151 != nil {
    return _ret151, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsIoctl failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsPoll(ctx context.Context, req *IcefsPollReq) (_r *IcefsPollRes, _err error) {
  var _args152 IcefsThriftDoIcefsPollArgs
  _args152.Req = req
  var _result154 IcefsThriftDoIcefsPollResult
  var _meta153 thrift.ResponseMeta
  _meta153, _err = p.Client_().Call(ctx, "DoIcefsPoll", &_args152, &_result154)
  p.SetLastResponseMeta_(_meta153)
  if _err != nil {
    return
  }
  if _ret155 := _result154.GetSuccess(); _ret155 != nil {
    return _ret155, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsPoll failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsWriteBuf(ctx context.Context, req *IcefsWriteBufReq) (_r *IcefsWriteBufRes, _err error) {
  var _args156 IcefsThriftDoIcefsWriteBufArgs
  _args156.Req = req
  var _result158 IcefsThriftDoIcefsWriteBufResult
  var _meta157 thrift.ResponseMeta
  _meta157, _err = p.Client_().Call(ctx, "DoIcefsWriteBuf", &_args156, &_result158)
  p.SetLastResponseMeta_(_meta157)
  if _err != nil {
    return
  }
  if _ret159 := _result158.GetSuccess(); _ret159 != nil {
    return _ret159, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsWriteBuf failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsRetrieveReply(ctx context.Context, req *IcefsRetrieveReplyReq) (_r *IcefsRetrieveReplyRes, _err error) {
  var _args160 IcefsThriftDoIcefsRetrieveReplyArgs
  _args160.Req = req
  var _result162 IcefsThriftDoIcefsRetrieveReplyResult
  var _meta161 thrift.ResponseMeta
  _meta161, _err = p.Client_().Call(ctx, "DoIcefsRetrieveReply", &_args160, &_result162)
  p.SetLastResponseMeta_(_meta161)
  if _err != nil {
    return
  }
  if _ret163 := _result162.GetSuccess(); _ret163 != nil {
    return _ret163, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsRetrieveReply failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsForgetMulti(ctx context.Context, req *IcefsForgetMultiReq) (_r *IcefsForgetMultiRes, _err error) {
  var _args164 IcefsThriftDoIcefsForgetMultiArgs
  _args164.Req = req
  var _result166 IcefsThriftDoIcefsForgetMultiResult
  var _meta165 thrift.ResponseMeta
  _meta165, _err = p.Client_().Call(ctx, "DoIcefsForgetMulti", &_args164, &_result166)
  p.SetLastResponseMeta_(_meta165)
  if _err != nil {
    return
  }
  if _ret167 := _result166.GetSuccess(); _ret167 != nil {
    return _ret167, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsForgetMulti failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsFlock(ctx context.Context, req *IcefsFlockReq) (_r *IcefsFlockRes, _err error) {
  var _args168 IcefsThriftDoIcefsFlockArgs
  _args168.Req = req
  var _result170 IcefsThriftDoIcefsFlockResult
  var _meta169 thrift.ResponseMeta
  _meta169, _err = p.Client_().Call(ctx, "DoIcefsFlock", &_args168, &_result170)
  p.SetLastResponseMeta_(_meta169)
  if _err != nil {
    return
  }
  if _ret171 := _result170.GetSuccess(); _ret171 != nil {
    return _ret171, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsFlock failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsFallocate(ctx context.Context, req *IcefsFallocateReq) (_r *IcefsFallocateRes, _err error) {
  var _args172 IcefsThriftDoIcefsFallocateArgs
  _args172.Req = req
  var _result174 IcefsThriftDoIcefsFallocateResult
  var _meta173 thrift.ResponseMeta
  _meta173, _err = p.Client_().Call(ctx, "DoIcefsFallocate", &_args172, &_result174)
  p.SetLastResponseMeta_(_meta173)
  if _err != nil {
    return
  }
  if _ret175 := _result174.GetSuccess(); _ret175 != nil {
    return _ret175, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsFallocate failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsReadDirPlus(ctx context.Context, req *IcefsReadDirPlusReq) (_r *IcefsReadDirPlusRes, _err error) {
  var _args176 IcefsThriftDoIcefsReadDirPlusArgs
  _args176.Req = req
  var _result178 IcefsThriftDoIcefsReadDirPlusResult
  var _meta177 thrift.ResponseMeta
  _meta177, _err = p.Client_().Call(ctx, "DoIcefsReadDirPlus", &_args176, &_result178)
  p.SetLastResponseMeta_(_meta177)
  if _err != nil {
    return
  }
  if _ret179 := _result178.GetSuccess(); _ret179 != nil {
    return _ret179, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsReadDirPlus failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsCopyFileRange(ctx context.Context, req *IcefsCopyFileRangeReq) (_r *IcefsCopyFileRangeRes, _err error) {
  var _args180 IcefsThriftDoIcefsCopyFileRangeArgs
  _args180.Req = req
  var _result182 IcefsThriftDoIcefsCopyFileRangeResult
  var _meta181 thrift.ResponseMeta
  _meta181, _err = p.Client_().Call(ctx, "DoIcefsCopyFileRange", &_args180, &_result182)
  p.SetLastResponseMeta_(_meta181)
  if _err != nil {
    return
  }
  if _ret183 := _result182.GetSuccess(); _ret183 != nil {
    return _ret183, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsCopyFileRange failed: unknown result")
}

// Parameters:
//  - Req
func (p *IcefsThriftClient) DoIcefsLseek(ctx context.Context, req *IcefsLseekReq) (_r *IcefsLseekRes, _err error) {
  var _args184 IcefsThriftDoIcefsLseekArgs
  _args184.Req = req
  var _result186 IcefsThriftDoIcefsLseekResult
  var _meta185 thrift.ResponseMeta
  _meta185, _err = p.Client_().Call(ctx, "DoIcefsLseek", &_args184, &_result186)
  p.SetLastResponseMeta_(_meta185)
  if _err != nil {
    return
  }
  if _ret187 := _result186.GetSuccess(); _ret187 != nil {
    return _ret187, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DoIcefsLseek failed: unknown result")
}

type IcefsThriftProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler IcefsThrift
}

func (p *IcefsThriftProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *IcefsThriftProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *IcefsThriftProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewIcefsThriftProcessor(handler IcefsThrift) *IcefsThriftProcessor {

  self188 := &IcefsThriftProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self188.processorMap["DoIcefsInit"] = &icefsThriftProcessorDoIcefsInit{handler:handler}
  self188.processorMap["DoIcefsDestroy"] = &icefsThriftProcessorDoIcefsDestroy{handler:handler}
  self188.processorMap["DoIcefsLookUp"] = &icefsThriftProcessorDoIcefsLookUp{handler:handler}
  self188.processorMap["DoIcefsForget"] = &icefsThriftProcessorDoIcefsForget{handler:handler}
  self188.processorMap["DoIcefsGetAttr"] = &icefsThriftProcessorDoIcefsGetAttr{handler:handler}
  self188.processorMap["DoIcefsSetAttr"] = &icefsThriftProcessorDoIcefsSetAttr{handler:handler}
  self188.processorMap["DoIcefsReadLink"] = &icefsThriftProcessorDoIcefsReadLink{handler:handler}
  self188.processorMap["DoIcefsMknod"] = &icefsThriftProcessorDoIcefsMknod{handler:handler}
  self188.processorMap["DoIcefsMkDir"] = &icefsThriftProcessorDoIcefsMkDir{handler:handler}
  self188.processorMap["DoIcefsUnlink"] = &icefsThriftProcessorDoIcefsUnlink{handler:handler}
  self188.processorMap["DoIcefsRmDir"] = &icefsThriftProcessorDoIcefsRmDir{handler:handler}
  self188.processorMap["DoIcefsSymLink"] = &icefsThriftProcessorDoIcefsSymLink{handler:handler}
  self188.processorMap["DoIcefsRename"] = &icefsThriftProcessorDoIcefsRename{handler:handler}
  self188.processorMap["DoIcefsLink"] = &icefsThriftProcessorDoIcefsLink{handler:handler}
  self188.processorMap["DoIcefsOpen"] = &icefsThriftProcessorDoIcefsOpen{handler:handler}
  self188.processorMap["DoIcefsRead"] = &icefsThriftProcessorDoIcefsRead{handler:handler}
  self188.processorMap["DoIcefsWrite"] = &icefsThriftProcessorDoIcefsWrite{handler:handler}
  self188.processorMap["DoIcefsFlush"] = &icefsThriftProcessorDoIcefsFlush{handler:handler}
  self188.processorMap["DoIcefsRelease"] = &icefsThriftProcessorDoIcefsRelease{handler:handler}
  self188.processorMap["DoIcefsFsync"] = &icefsThriftProcessorDoIcefsFsync{handler:handler}
  self188.processorMap["DoIcefsOpenDir"] = &icefsThriftProcessorDoIcefsOpenDir{handler:handler}
  self188.processorMap["DoIcefsReadDir"] = &icefsThriftProcessorDoIcefsReadDir{handler:handler}
  self188.processorMap["DoIcefsReleaseDir"] = &icefsThriftProcessorDoIcefsReleaseDir{handler:handler}
  self188.processorMap["DoIcefsFsyncDir"] = &icefsThriftProcessorDoIcefsFsyncDir{handler:handler}
  self188.processorMap["DoIcefsStatFS"] = &icefsThriftProcessorDoIcefsStatFS{handler:handler}
  self188.processorMap["DoIcefsSetXattr"] = &icefsThriftProcessorDoIcefsSetXattr{handler:handler}
  self188.processorMap["DoIcefsGetXattr"] = &icefsThriftProcessorDoIcefsGetXattr{handler:handler}
  self188.processorMap["DoIcefsListXattr"] = &icefsThriftProcessorDoIcefsListXattr{handler:handler}
  self188.processorMap["DoIcefsRemoveXattr"] = &icefsThriftProcessorDoIcefsRemoveXattr{handler:handler}
  self188.processorMap["DoIcefsAccess"] = &icefsThriftProcessorDoIcefsAccess{handler:handler}
  self188.processorMap["DoIcefsCreate"] = &icefsThriftProcessorDoIcefsCreate{handler:handler}
  self188.processorMap["DoIcefsGetLk"] = &icefsThriftProcessorDoIcefsGetLk{handler:handler}
  self188.processorMap["DoIcefsSetLk"] = &icefsThriftProcessorDoIcefsSetLk{handler:handler}
  self188.processorMap["DoIcefsBmap"] = &icefsThriftProcessorDoIcefsBmap{handler:handler}
  self188.processorMap["DoIcefsIoctl"] = &icefsThriftProcessorDoIcefsIoctl{handler:handler}
  self188.processorMap["DoIcefsPoll"] = &icefsThriftProcessorDoIcefsPoll{handler:handler}
  self188.processorMap["DoIcefsWriteBuf"] = &icefsThriftProcessorDoIcefsWriteBuf{handler:handler}
  self188.processorMap["DoIcefsRetrieveReply"] = &icefsThriftProcessorDoIcefsRetrieveReply{handler:handler}
  self188.processorMap["DoIcefsForgetMulti"] = &icefsThriftProcessorDoIcefsForgetMulti{handler:handler}
  self188.processorMap["DoIcefsFlock"] = &icefsThriftProcessorDoIcefsFlock{handler:handler}
  self188.processorMap["DoIcefsFallocate"] = &icefsThriftProcessorDoIcefsFallocate{handler:handler}
  self188.processorMap["DoIcefsReadDirPlus"] = &icefsThriftProcessorDoIcefsReadDirPlus{handler:handler}
  self188.processorMap["DoIcefsCopyFileRange"] = &icefsThriftProcessorDoIcefsCopyFileRange{handler:handler}
  self188.processorMap["DoIcefsLseek"] = &icefsThriftProcessorDoIcefsLseek{handler:handler}
return self188
}

func (p *IcefsThriftProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x189 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x189.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x189

}

type icefsThriftProcessorDoIcefsInit struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsInit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsInitArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsInit", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsInitResult{}
  var retval *IcefsInitRes
  if retval, err2 = p.handler.DoIcefsInit(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsInit: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsInit", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsInit", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsDestroy struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsDestroy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsDestroyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsDestroy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsDestroyResult{}
  var retval *IcefsDestroyRes
  if retval, err2 = p.handler.DoIcefsDestroy(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsDestroy: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsDestroy", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsDestroy", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsLookUp struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsLookUp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsLookUpArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsLookUp", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsLookUpResult{}
  var retval *IcefsLookUpRes
  if retval, err2 = p.handler.DoIcefsLookUp(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsLookUp: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsLookUp", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsLookUp", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsForget struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsForget) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsForgetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsForget", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsForgetResult{}
  var retval *IcefsForgetRes
  if retval, err2 = p.handler.DoIcefsForget(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsForget: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsForget", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsForget", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsGetAttr struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsGetAttr) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsGetAttrArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsGetAttr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsGetAttrResult{}
  var retval *IcefsGetAttrRes
  if retval, err2 = p.handler.DoIcefsGetAttr(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsGetAttr: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsGetAttr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsGetAttr", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsSetAttr struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsSetAttr) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsSetAttrArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsSetAttr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsSetAttrResult{}
  var retval *IcefsSetAttrRes
  if retval, err2 = p.handler.DoIcefsSetAttr(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsSetAttr: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsSetAttr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsSetAttr", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsReadLink struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsReadLink) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsReadLinkArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsReadLink", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsReadLinkResult{}
  var retval *IcefsReadLinkRes
  if retval, err2 = p.handler.DoIcefsReadLink(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsReadLink: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsReadLink", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsReadLink", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsMknod struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsMknod) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsMknodArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsMknod", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsMknodResult{}
  var retval *IcefsMknodRes
  if retval, err2 = p.handler.DoIcefsMknod(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsMknod: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsMknod", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsMknod", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsMkDir struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsMkDir) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsMkDirArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsMkDir", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsMkDirResult{}
  var retval *IcefsMkDirRes
  if retval, err2 = p.handler.DoIcefsMkDir(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsMkDir: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsMkDir", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsMkDir", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsUnlink struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsUnlink) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsUnlinkArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsUnlink", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsUnlinkResult{}
  var retval *IcefsUnlinkRes
  if retval, err2 = p.handler.DoIcefsUnlink(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsUnlink: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsUnlink", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsUnlink", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsRmDir struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsRmDir) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsRmDirArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsRmDir", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsRmDirResult{}
  var retval *IcefsRmDirRes
  if retval, err2 = p.handler.DoIcefsRmDir(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsRmDir: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsRmDir", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsRmDir", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsSymLink struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsSymLink) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsSymLinkArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsSymLink", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsSymLinkResult{}
  var retval *IcefsSymLinkRes
  if retval, err2 = p.handler.DoIcefsSymLink(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsSymLink: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsSymLink", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsSymLink", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsRename struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsRename) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsRenameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsRename", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsRenameResult{}
  var retval *IcefsRenameRes
  if retval, err2 = p.handler.DoIcefsRename(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsRename: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsRename", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsRename", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsLink struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsLink) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsLinkArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsLink", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsLinkResult{}
  var retval *IcefsLinkRes
  if retval, err2 = p.handler.DoIcefsLink(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsLink: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsLink", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsLink", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsOpen struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsOpen) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsOpenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsOpen", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsOpenResult{}
  var retval *IcefsOpenRes
  if retval, err2 = p.handler.DoIcefsOpen(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsOpen: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsOpen", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsOpen", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsRead struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsRead) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsReadArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsRead", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsReadResult{}
  var retval *IcefsReadRes
  if retval, err2 = p.handler.DoIcefsRead(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsRead: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsRead", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsRead", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsWrite struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsWrite) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsWriteArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsWrite", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsWriteResult{}
  var retval *IcefsWriteRes
  if retval, err2 = p.handler.DoIcefsWrite(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsWrite: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsWrite", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsWrite", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsFlush struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsFlush) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsFlushArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsFlush", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsFlushResult{}
  var retval *IcefsFlushRes
  if retval, err2 = p.handler.DoIcefsFlush(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsFlush: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsFlush", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsFlush", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsRelease struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsRelease) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsReleaseArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsRelease", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsReleaseResult{}
  var retval *IcefsReleaseRes
  if retval, err2 = p.handler.DoIcefsRelease(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsRelease: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsRelease", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsRelease", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsFsync struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsFsync) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsFsyncArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsFsync", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsFsyncResult{}
  var retval *IcefsFsyncRes
  if retval, err2 = p.handler.DoIcefsFsync(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsFsync: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsFsync", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsFsync", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsOpenDir struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsOpenDir) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsOpenDirArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsOpenDir", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsOpenDirResult{}
  var retval *IcefsOpenDirRes
  if retval, err2 = p.handler.DoIcefsOpenDir(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsOpenDir: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsOpenDir", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsOpenDir", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsReadDir struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsReadDir) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsReadDirArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsReadDir", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsReadDirResult{}
  var retval *IcefsReadDirRes
  if retval, err2 = p.handler.DoIcefsReadDir(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsReadDir: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsReadDir", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsReadDir", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsReleaseDir struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsReleaseDir) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsReleaseDirArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsReleaseDir", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsReleaseDirResult{}
  var retval *IcefsReleaseDirRes
  if retval, err2 = p.handler.DoIcefsReleaseDir(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsReleaseDir: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsReleaseDir", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsReleaseDir", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsFsyncDir struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsFsyncDir) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsFsyncDirArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsFsyncDir", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsFsyncDirResult{}
  var retval *IcefsFsyncDirRes
  if retval, err2 = p.handler.DoIcefsFsyncDir(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsFsyncDir: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsFsyncDir", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsFsyncDir", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsStatFS struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsStatFS) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsStatFSArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsStatFS", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsStatFSResult{}
  var retval *IcefsStatFSRes
  if retval, err2 = p.handler.DoIcefsStatFS(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsStatFS: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsStatFS", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsStatFS", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsSetXattr struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsSetXattr) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsSetXattrArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsSetXattr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsSetXattrResult{}
  var retval *IcefsSetXattrRes
  if retval, err2 = p.handler.DoIcefsSetXattr(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsSetXattr: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsSetXattr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsSetXattr", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsGetXattr struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsGetXattr) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsGetXattrArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsGetXattr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsGetXattrResult{}
  var retval *IcefsGetXattrRes
  if retval, err2 = p.handler.DoIcefsGetXattr(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsGetXattr: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsGetXattr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsGetXattr", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsListXattr struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsListXattr) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsListXattrArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsListXattr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsListXattrResult{}
  var retval *IcefsListXattrRes
  if retval, err2 = p.handler.DoIcefsListXattr(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsListXattr: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsListXattr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsListXattr", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsRemoveXattr struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsRemoveXattr) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsRemoveXattrArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsRemoveXattr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsRemoveXattrResult{}
  var retval *IcefsRemoveXattrRes
  if retval, err2 = p.handler.DoIcefsRemoveXattr(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsRemoveXattr: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsRemoveXattr", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsRemoveXattr", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsAccess struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsAccess) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsAccessArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsAccess", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsAccessResult{}
  var retval *IcefsAccessRes
  if retval, err2 = p.handler.DoIcefsAccess(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsAccess: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsAccess", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsAccess", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsCreate struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsCreate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsCreateArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsCreate", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsCreateResult{}
  var retval *IcefsCreateRes
  if retval, err2 = p.handler.DoIcefsCreate(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsCreate: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsCreate", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsCreate", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsGetLk struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsGetLk) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsGetLkArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsGetLk", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsGetLkResult{}
  var retval *IcefsGetLkRes
  if retval, err2 = p.handler.DoIcefsGetLk(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsGetLk: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsGetLk", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsGetLk", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsSetLk struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsSetLk) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsSetLkArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsSetLk", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsSetLkResult{}
  var retval *IcefsSetLkRes
  if retval, err2 = p.handler.DoIcefsSetLk(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsSetLk: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsSetLk", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsSetLk", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsBmap struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsBmap) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsBmapArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsBmap", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsBmapResult{}
  var retval *IcefsBmapRes
  if retval, err2 = p.handler.DoIcefsBmap(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsBmap: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsBmap", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsBmap", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsIoctl struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsIoctl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsIoctlArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsIoctl", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsIoctlResult{}
  var retval *IcefsIoctlRes
  if retval, err2 = p.handler.DoIcefsIoctl(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsIoctl: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsIoctl", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsIoctl", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsPoll struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsPoll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsPollArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsPoll", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsPollResult{}
  var retval *IcefsPollRes
  if retval, err2 = p.handler.DoIcefsPoll(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsPoll: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsPoll", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsPoll", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsWriteBuf struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsWriteBuf) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsWriteBufArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsWriteBuf", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsWriteBufResult{}
  var retval *IcefsWriteBufRes
  if retval, err2 = p.handler.DoIcefsWriteBuf(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsWriteBuf: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsWriteBuf", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsWriteBuf", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsRetrieveReply struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsRetrieveReply) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsRetrieveReplyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsRetrieveReply", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsRetrieveReplyResult{}
  var retval *IcefsRetrieveReplyRes
  if retval, err2 = p.handler.DoIcefsRetrieveReply(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsRetrieveReply: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsRetrieveReply", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsRetrieveReply", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsForgetMulti struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsForgetMulti) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsForgetMultiArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsForgetMulti", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsForgetMultiResult{}
  var retval *IcefsForgetMultiRes
  if retval, err2 = p.handler.DoIcefsForgetMulti(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsForgetMulti: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsForgetMulti", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsForgetMulti", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsFlock struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsFlock) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsFlockArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsFlock", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsFlockResult{}
  var retval *IcefsFlockRes
  if retval, err2 = p.handler.DoIcefsFlock(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsFlock: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsFlock", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsFlock", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsFallocate struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsFallocate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsFallocateArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsFallocate", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsFallocateResult{}
  var retval *IcefsFallocateRes
  if retval, err2 = p.handler.DoIcefsFallocate(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsFallocate: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsFallocate", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsFallocate", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsReadDirPlus struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsReadDirPlus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsReadDirPlusArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsReadDirPlus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsReadDirPlusResult{}
  var retval *IcefsReadDirPlusRes
  if retval, err2 = p.handler.DoIcefsReadDirPlus(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsReadDirPlus: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsReadDirPlus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsReadDirPlus", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsCopyFileRange struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsCopyFileRange) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsCopyFileRangeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsCopyFileRange", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsCopyFileRangeResult{}
  var retval *IcefsCopyFileRangeRes
  if retval, err2 = p.handler.DoIcefsCopyFileRange(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsCopyFileRange: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsCopyFileRange", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsCopyFileRange", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type icefsThriftProcessorDoIcefsLseek struct {
  handler IcefsThrift
}

func (p *icefsThriftProcessorDoIcefsLseek) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IcefsThriftDoIcefsLseekArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsLseek", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcefsThriftDoIcefsLseekResult{}
  var retval *IcefsLseekRes
  if retval, err2 = p.handler.DoIcefsLseek(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DoIcefsLseek: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "DoIcefsLseek", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "DoIcefsLseek", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type IcefsThriftDoIcefsInitArgs struct {
  Req *IcefsInitReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsInitArgs() *IcefsThriftDoIcefsInitArgs {
  return &IcefsThriftDoIcefsInitArgs{}
}

var IcefsThriftDoIcefsInitArgs_Req_DEFAULT *IcefsInitReq
func (p *IcefsThriftDoIcefsInitArgs) GetReq() *IcefsInitReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsInitArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsInitArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsInitArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsInitArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsInitReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsInitArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsInit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsInitArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsInitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsInitArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsInitResult struct {
  Success *IcefsInitRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsInitResult() *IcefsThriftDoIcefsInitResult {
  return &IcefsThriftDoIcefsInitResult{}
}

var IcefsThriftDoIcefsInitResult_Success_DEFAULT *IcefsInitRes
func (p *IcefsThriftDoIcefsInitResult) GetSuccess() *IcefsInitRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsInitResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsInitResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsInitResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsInitResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsInitRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsInitResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsInit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsInitResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsInitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsInitResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsDestroyArgs struct {
  Req *IcefsDestroyReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsDestroyArgs() *IcefsThriftDoIcefsDestroyArgs {
  return &IcefsThriftDoIcefsDestroyArgs{}
}

var IcefsThriftDoIcefsDestroyArgs_Req_DEFAULT *IcefsDestroyReq
func (p *IcefsThriftDoIcefsDestroyArgs) GetReq() *IcefsDestroyReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsDestroyArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsDestroyArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsDestroyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsDestroyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsDestroyReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsDestroyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsDestroy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsDestroyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsDestroyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsDestroyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsDestroyResult struct {
  Success *IcefsDestroyRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsDestroyResult() *IcefsThriftDoIcefsDestroyResult {
  return &IcefsThriftDoIcefsDestroyResult{}
}

var IcefsThriftDoIcefsDestroyResult_Success_DEFAULT *IcefsDestroyRes
func (p *IcefsThriftDoIcefsDestroyResult) GetSuccess() *IcefsDestroyRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsDestroyResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsDestroyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsDestroyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsDestroyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsDestroyRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsDestroyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsDestroy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsDestroyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsDestroyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsDestroyResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsLookUpArgs struct {
  Req *IcefsLookUpReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsLookUpArgs() *IcefsThriftDoIcefsLookUpArgs {
  return &IcefsThriftDoIcefsLookUpArgs{}
}

var IcefsThriftDoIcefsLookUpArgs_Req_DEFAULT *IcefsLookUpReq
func (p *IcefsThriftDoIcefsLookUpArgs) GetReq() *IcefsLookUpReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsLookUpArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsLookUpArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsLookUpArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsLookUpArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsLookUpReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsLookUpArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsLookUp_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsLookUpArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsLookUpArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsLookUpArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsLookUpResult struct {
  Success *IcefsLookUpRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsLookUpResult() *IcefsThriftDoIcefsLookUpResult {
  return &IcefsThriftDoIcefsLookUpResult{}
}

var IcefsThriftDoIcefsLookUpResult_Success_DEFAULT *IcefsLookUpRes
func (p *IcefsThriftDoIcefsLookUpResult) GetSuccess() *IcefsLookUpRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsLookUpResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsLookUpResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsLookUpResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsLookUpResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsLookUpRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsLookUpResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsLookUp_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsLookUpResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsLookUpResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsLookUpResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsForgetArgs struct {
  Req *IcefsForgetReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsForgetArgs() *IcefsThriftDoIcefsForgetArgs {
  return &IcefsThriftDoIcefsForgetArgs{}
}

var IcefsThriftDoIcefsForgetArgs_Req_DEFAULT *IcefsForgetReq
func (p *IcefsThriftDoIcefsForgetArgs) GetReq() *IcefsForgetReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsForgetArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsForgetArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsForgetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsForgetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsForgetReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsForgetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsForget_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsForgetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsForgetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsForgetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsForgetResult struct {
  Success *IcefsForgetRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsForgetResult() *IcefsThriftDoIcefsForgetResult {
  return &IcefsThriftDoIcefsForgetResult{}
}

var IcefsThriftDoIcefsForgetResult_Success_DEFAULT *IcefsForgetRes
func (p *IcefsThriftDoIcefsForgetResult) GetSuccess() *IcefsForgetRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsForgetResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsForgetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsForgetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsForgetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsForgetRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsForgetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsForget_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsForgetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsForgetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsForgetResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsGetAttrArgs struct {
  Req *IcefsGetAttrReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsGetAttrArgs() *IcefsThriftDoIcefsGetAttrArgs {
  return &IcefsThriftDoIcefsGetAttrArgs{}
}

var IcefsThriftDoIcefsGetAttrArgs_Req_DEFAULT *IcefsGetAttrReq
func (p *IcefsThriftDoIcefsGetAttrArgs) GetReq() *IcefsGetAttrReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsGetAttrArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsGetAttrArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsGetAttrArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsGetAttrArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsGetAttrReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsGetAttrArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsGetAttr_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsGetAttrArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsGetAttrArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsGetAttrArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsGetAttrResult struct {
  Success *IcefsGetAttrRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsGetAttrResult() *IcefsThriftDoIcefsGetAttrResult {
  return &IcefsThriftDoIcefsGetAttrResult{}
}

var IcefsThriftDoIcefsGetAttrResult_Success_DEFAULT *IcefsGetAttrRes
func (p *IcefsThriftDoIcefsGetAttrResult) GetSuccess() *IcefsGetAttrRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsGetAttrResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsGetAttrResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsGetAttrResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsGetAttrResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsGetAttrRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsGetAttrResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsGetAttr_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsGetAttrResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsGetAttrResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsGetAttrResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsSetAttrArgs struct {
  Req *IcefsSetAttrReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsSetAttrArgs() *IcefsThriftDoIcefsSetAttrArgs {
  return &IcefsThriftDoIcefsSetAttrArgs{}
}

var IcefsThriftDoIcefsSetAttrArgs_Req_DEFAULT *IcefsSetAttrReq
func (p *IcefsThriftDoIcefsSetAttrArgs) GetReq() *IcefsSetAttrReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsSetAttrArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsSetAttrArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsSetAttrArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSetAttrArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsSetAttrReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSetAttrArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsSetAttr_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsSetAttrArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsSetAttrArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsSetAttrArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsSetAttrResult struct {
  Success *IcefsSetAttrRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsSetAttrResult() *IcefsThriftDoIcefsSetAttrResult {
  return &IcefsThriftDoIcefsSetAttrResult{}
}

var IcefsThriftDoIcefsSetAttrResult_Success_DEFAULT *IcefsSetAttrRes
func (p *IcefsThriftDoIcefsSetAttrResult) GetSuccess() *IcefsSetAttrRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsSetAttrResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsSetAttrResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsSetAttrResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSetAttrResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsSetAttrRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSetAttrResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsSetAttr_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsSetAttrResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsSetAttrResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsSetAttrResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsReadLinkArgs struct {
  Req *IcefsReadLinkReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsReadLinkArgs() *IcefsThriftDoIcefsReadLinkArgs {
  return &IcefsThriftDoIcefsReadLinkArgs{}
}

var IcefsThriftDoIcefsReadLinkArgs_Req_DEFAULT *IcefsReadLinkReq
func (p *IcefsThriftDoIcefsReadLinkArgs) GetReq() *IcefsReadLinkReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsReadLinkArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsReadLinkArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsReadLinkArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadLinkArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsReadLinkReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadLinkArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsReadLink_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsReadLinkArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsReadLinkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsReadLinkArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsReadLinkResult struct {
  Success *IcefsReadLinkRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsReadLinkResult() *IcefsThriftDoIcefsReadLinkResult {
  return &IcefsThriftDoIcefsReadLinkResult{}
}

var IcefsThriftDoIcefsReadLinkResult_Success_DEFAULT *IcefsReadLinkRes
func (p *IcefsThriftDoIcefsReadLinkResult) GetSuccess() *IcefsReadLinkRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsReadLinkResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsReadLinkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsReadLinkResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadLinkResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsReadLinkRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadLinkResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsReadLink_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsReadLinkResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsReadLinkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsReadLinkResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsMknodArgs struct {
  Req *IcefsMknodReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsMknodArgs() *IcefsThriftDoIcefsMknodArgs {
  return &IcefsThriftDoIcefsMknodArgs{}
}

var IcefsThriftDoIcefsMknodArgs_Req_DEFAULT *IcefsMknodReq
func (p *IcefsThriftDoIcefsMknodArgs) GetReq() *IcefsMknodReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsMknodArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsMknodArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsMknodArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsMknodArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsMknodReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsMknodArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsMknod_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsMknodArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsMknodArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsMknodArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsMknodResult struct {
  Success *IcefsMknodRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsMknodResult() *IcefsThriftDoIcefsMknodResult {
  return &IcefsThriftDoIcefsMknodResult{}
}

var IcefsThriftDoIcefsMknodResult_Success_DEFAULT *IcefsMknodRes
func (p *IcefsThriftDoIcefsMknodResult) GetSuccess() *IcefsMknodRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsMknodResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsMknodResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsMknodResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsMknodResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsMknodRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsMknodResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsMknod_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsMknodResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsMknodResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsMknodResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsMkDirArgs struct {
  Req *IcefsMkDirReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsMkDirArgs() *IcefsThriftDoIcefsMkDirArgs {
  return &IcefsThriftDoIcefsMkDirArgs{}
}

var IcefsThriftDoIcefsMkDirArgs_Req_DEFAULT *IcefsMkDirReq
func (p *IcefsThriftDoIcefsMkDirArgs) GetReq() *IcefsMkDirReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsMkDirArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsMkDirArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsMkDirArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsMkDirArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsMkDirReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsMkDirArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsMkDir_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsMkDirArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsMkDirArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsMkDirArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsMkDirResult struct {
  Success *IcefsMkDirRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsMkDirResult() *IcefsThriftDoIcefsMkDirResult {
  return &IcefsThriftDoIcefsMkDirResult{}
}

var IcefsThriftDoIcefsMkDirResult_Success_DEFAULT *IcefsMkDirRes
func (p *IcefsThriftDoIcefsMkDirResult) GetSuccess() *IcefsMkDirRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsMkDirResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsMkDirResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsMkDirResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsMkDirResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsMkDirRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsMkDirResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsMkDir_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsMkDirResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsMkDirResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsMkDirResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsUnlinkArgs struct {
  Req *IcefsUnlinkReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsUnlinkArgs() *IcefsThriftDoIcefsUnlinkArgs {
  return &IcefsThriftDoIcefsUnlinkArgs{}
}

var IcefsThriftDoIcefsUnlinkArgs_Req_DEFAULT *IcefsUnlinkReq
func (p *IcefsThriftDoIcefsUnlinkArgs) GetReq() *IcefsUnlinkReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsUnlinkArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsUnlinkArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsUnlinkArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsUnlinkArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsUnlinkReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsUnlinkArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsUnlink_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsUnlinkArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsUnlinkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsUnlinkArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsUnlinkResult struct {
  Success *IcefsUnlinkRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsUnlinkResult() *IcefsThriftDoIcefsUnlinkResult {
  return &IcefsThriftDoIcefsUnlinkResult{}
}

var IcefsThriftDoIcefsUnlinkResult_Success_DEFAULT *IcefsUnlinkRes
func (p *IcefsThriftDoIcefsUnlinkResult) GetSuccess() *IcefsUnlinkRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsUnlinkResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsUnlinkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsUnlinkResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsUnlinkResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsUnlinkRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsUnlinkResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsUnlink_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsUnlinkResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsUnlinkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsUnlinkResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsRmDirArgs struct {
  Req *IcefsRmDirReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsRmDirArgs() *IcefsThriftDoIcefsRmDirArgs {
  return &IcefsThriftDoIcefsRmDirArgs{}
}

var IcefsThriftDoIcefsRmDirArgs_Req_DEFAULT *IcefsRmDirReq
func (p *IcefsThriftDoIcefsRmDirArgs) GetReq() *IcefsRmDirReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsRmDirArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsRmDirArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsRmDirArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRmDirArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsRmDirReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRmDirArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsRmDir_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsRmDirArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsRmDirArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsRmDirArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsRmDirResult struct {
  Success *IcefsRmDirRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsRmDirResult() *IcefsThriftDoIcefsRmDirResult {
  return &IcefsThriftDoIcefsRmDirResult{}
}

var IcefsThriftDoIcefsRmDirResult_Success_DEFAULT *IcefsRmDirRes
func (p *IcefsThriftDoIcefsRmDirResult) GetSuccess() *IcefsRmDirRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsRmDirResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsRmDirResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsRmDirResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRmDirResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsRmDirRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRmDirResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsRmDir_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsRmDirResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsRmDirResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsRmDirResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsSymLinkArgs struct {
  Req *IcefsSymLinkReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsSymLinkArgs() *IcefsThriftDoIcefsSymLinkArgs {
  return &IcefsThriftDoIcefsSymLinkArgs{}
}

var IcefsThriftDoIcefsSymLinkArgs_Req_DEFAULT *IcefsSymLinkReq
func (p *IcefsThriftDoIcefsSymLinkArgs) GetReq() *IcefsSymLinkReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsSymLinkArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsSymLinkArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsSymLinkArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSymLinkArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsSymLinkReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSymLinkArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsSymLink_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsSymLinkArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsSymLinkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsSymLinkArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsSymLinkResult struct {
  Success *IcefsSymLinkRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsSymLinkResult() *IcefsThriftDoIcefsSymLinkResult {
  return &IcefsThriftDoIcefsSymLinkResult{}
}

var IcefsThriftDoIcefsSymLinkResult_Success_DEFAULT *IcefsSymLinkRes
func (p *IcefsThriftDoIcefsSymLinkResult) GetSuccess() *IcefsSymLinkRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsSymLinkResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsSymLinkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsSymLinkResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSymLinkResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsSymLinkRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSymLinkResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsSymLink_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsSymLinkResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsSymLinkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsSymLinkResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsRenameArgs struct {
  Req *IcefsRenameReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsRenameArgs() *IcefsThriftDoIcefsRenameArgs {
  return &IcefsThriftDoIcefsRenameArgs{}
}

var IcefsThriftDoIcefsRenameArgs_Req_DEFAULT *IcefsRenameReq
func (p *IcefsThriftDoIcefsRenameArgs) GetReq() *IcefsRenameReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsRenameArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsRenameArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsRenameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRenameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsRenameReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRenameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsRename_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsRenameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsRenameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsRenameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsRenameResult struct {
  Success *IcefsRenameRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsRenameResult() *IcefsThriftDoIcefsRenameResult {
  return &IcefsThriftDoIcefsRenameResult{}
}

var IcefsThriftDoIcefsRenameResult_Success_DEFAULT *IcefsRenameRes
func (p *IcefsThriftDoIcefsRenameResult) GetSuccess() *IcefsRenameRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsRenameResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsRenameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsRenameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRenameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsRenameRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRenameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsRename_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsRenameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsRenameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsRenameResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsLinkArgs struct {
  Req *IcefsLinkReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsLinkArgs() *IcefsThriftDoIcefsLinkArgs {
  return &IcefsThriftDoIcefsLinkArgs{}
}

var IcefsThriftDoIcefsLinkArgs_Req_DEFAULT *IcefsLinkReq
func (p *IcefsThriftDoIcefsLinkArgs) GetReq() *IcefsLinkReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsLinkArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsLinkArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsLinkArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsLinkArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsLinkReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsLinkArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsLink_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsLinkArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsLinkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsLinkArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsLinkResult struct {
  Success *IcefsLinkRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsLinkResult() *IcefsThriftDoIcefsLinkResult {
  return &IcefsThriftDoIcefsLinkResult{}
}

var IcefsThriftDoIcefsLinkResult_Success_DEFAULT *IcefsLinkRes
func (p *IcefsThriftDoIcefsLinkResult) GetSuccess() *IcefsLinkRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsLinkResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsLinkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsLinkResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsLinkResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsLinkRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsLinkResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsLink_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsLinkResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsLinkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsLinkResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsOpenArgs struct {
  Req *IcefsOpenReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsOpenArgs() *IcefsThriftDoIcefsOpenArgs {
  return &IcefsThriftDoIcefsOpenArgs{}
}

var IcefsThriftDoIcefsOpenArgs_Req_DEFAULT *IcefsOpenReq
func (p *IcefsThriftDoIcefsOpenArgs) GetReq() *IcefsOpenReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsOpenArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsOpenArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsOpenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsOpenArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsOpenReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsOpenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsOpen_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsOpenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsOpenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsOpenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsOpenResult struct {
  Success *IcefsOpenRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsOpenResult() *IcefsThriftDoIcefsOpenResult {
  return &IcefsThriftDoIcefsOpenResult{}
}

var IcefsThriftDoIcefsOpenResult_Success_DEFAULT *IcefsOpenRes
func (p *IcefsThriftDoIcefsOpenResult) GetSuccess() *IcefsOpenRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsOpenResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsOpenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsOpenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsOpenResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsOpenRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsOpenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsOpen_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsOpenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsOpenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsOpenResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsReadArgs struct {
  Req *IcefsReadReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsReadArgs() *IcefsThriftDoIcefsReadArgs {
  return &IcefsThriftDoIcefsReadArgs{}
}

var IcefsThriftDoIcefsReadArgs_Req_DEFAULT *IcefsReadReq
func (p *IcefsThriftDoIcefsReadArgs) GetReq() *IcefsReadReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsReadArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsReadArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsReadArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsReadReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsRead_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsReadArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsReadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsReadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsReadResult struct {
  Success *IcefsReadRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsReadResult() *IcefsThriftDoIcefsReadResult {
  return &IcefsThriftDoIcefsReadResult{}
}

var IcefsThriftDoIcefsReadResult_Success_DEFAULT *IcefsReadRes
func (p *IcefsThriftDoIcefsReadResult) GetSuccess() *IcefsReadRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsReadResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsReadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsReadResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsReadRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsRead_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsReadResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsReadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsReadResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsWriteArgs struct {
  Req *IcefsWriteReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsWriteArgs() *IcefsThriftDoIcefsWriteArgs {
  return &IcefsThriftDoIcefsWriteArgs{}
}

var IcefsThriftDoIcefsWriteArgs_Req_DEFAULT *IcefsWriteReq
func (p *IcefsThriftDoIcefsWriteArgs) GetReq() *IcefsWriteReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsWriteArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsWriteArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsWriteArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsWriteArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsWriteReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsWriteArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsWrite_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsWriteArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsWriteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsWriteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsWriteResult struct {
  Success *IcefsWriteRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsWriteResult() *IcefsThriftDoIcefsWriteResult {
  return &IcefsThriftDoIcefsWriteResult{}
}

var IcefsThriftDoIcefsWriteResult_Success_DEFAULT *IcefsWriteRes
func (p *IcefsThriftDoIcefsWriteResult) GetSuccess() *IcefsWriteRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsWriteResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsWriteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsWriteResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsWriteResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsWriteRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsWriteResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsWrite_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsWriteResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsWriteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsWriteResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsFlushArgs struct {
  Req *IcefsFlushReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsFlushArgs() *IcefsThriftDoIcefsFlushArgs {
  return &IcefsThriftDoIcefsFlushArgs{}
}

var IcefsThriftDoIcefsFlushArgs_Req_DEFAULT *IcefsFlushReq
func (p *IcefsThriftDoIcefsFlushArgs) GetReq() *IcefsFlushReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsFlushArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsFlushArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsFlushArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFlushArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsFlushReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFlushArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsFlush_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsFlushArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsFlushArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsFlushArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsFlushResult struct {
  Success *IcefsFlushRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsFlushResult() *IcefsThriftDoIcefsFlushResult {
  return &IcefsThriftDoIcefsFlushResult{}
}

var IcefsThriftDoIcefsFlushResult_Success_DEFAULT *IcefsFlushRes
func (p *IcefsThriftDoIcefsFlushResult) GetSuccess() *IcefsFlushRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsFlushResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsFlushResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsFlushResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFlushResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsFlushRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFlushResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsFlush_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsFlushResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsFlushResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsFlushResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsReleaseArgs struct {
  Req *IcefsReleaseReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsReleaseArgs() *IcefsThriftDoIcefsReleaseArgs {
  return &IcefsThriftDoIcefsReleaseArgs{}
}

var IcefsThriftDoIcefsReleaseArgs_Req_DEFAULT *IcefsReleaseReq
func (p *IcefsThriftDoIcefsReleaseArgs) GetReq() *IcefsReleaseReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsReleaseArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsReleaseArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsReleaseArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReleaseArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsReleaseReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReleaseArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsRelease_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsReleaseArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsReleaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsReleaseArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsReleaseResult struct {
  Success *IcefsReleaseRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsReleaseResult() *IcefsThriftDoIcefsReleaseResult {
  return &IcefsThriftDoIcefsReleaseResult{}
}

var IcefsThriftDoIcefsReleaseResult_Success_DEFAULT *IcefsReleaseRes
func (p *IcefsThriftDoIcefsReleaseResult) GetSuccess() *IcefsReleaseRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsReleaseResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsReleaseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsReleaseResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReleaseResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsReleaseRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReleaseResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsRelease_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsReleaseResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsReleaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsReleaseResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsFsyncArgs struct {
  Req *IcefsFsyncReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsFsyncArgs() *IcefsThriftDoIcefsFsyncArgs {
  return &IcefsThriftDoIcefsFsyncArgs{}
}

var IcefsThriftDoIcefsFsyncArgs_Req_DEFAULT *IcefsFsyncReq
func (p *IcefsThriftDoIcefsFsyncArgs) GetReq() *IcefsFsyncReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsFsyncArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsFsyncArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsFsyncArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFsyncArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsFsyncReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFsyncArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsFsync_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsFsyncArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsFsyncArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsFsyncArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsFsyncResult struct {
  Success *IcefsFsyncRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsFsyncResult() *IcefsThriftDoIcefsFsyncResult {
  return &IcefsThriftDoIcefsFsyncResult{}
}

var IcefsThriftDoIcefsFsyncResult_Success_DEFAULT *IcefsFsyncRes
func (p *IcefsThriftDoIcefsFsyncResult) GetSuccess() *IcefsFsyncRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsFsyncResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsFsyncResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsFsyncResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFsyncResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsFsyncRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFsyncResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsFsync_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsFsyncResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsFsyncResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsFsyncResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsOpenDirArgs struct {
  Req *IcefsOpenDirReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsOpenDirArgs() *IcefsThriftDoIcefsOpenDirArgs {
  return &IcefsThriftDoIcefsOpenDirArgs{}
}

var IcefsThriftDoIcefsOpenDirArgs_Req_DEFAULT *IcefsOpenDirReq
func (p *IcefsThriftDoIcefsOpenDirArgs) GetReq() *IcefsOpenDirReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsOpenDirArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsOpenDirArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsOpenDirArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsOpenDirArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsOpenDirReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsOpenDirArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsOpenDir_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsOpenDirArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsOpenDirArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsOpenDirArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsOpenDirResult struct {
  Success *IcefsOpenDirRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsOpenDirResult() *IcefsThriftDoIcefsOpenDirResult {
  return &IcefsThriftDoIcefsOpenDirResult{}
}

var IcefsThriftDoIcefsOpenDirResult_Success_DEFAULT *IcefsOpenDirRes
func (p *IcefsThriftDoIcefsOpenDirResult) GetSuccess() *IcefsOpenDirRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsOpenDirResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsOpenDirResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsOpenDirResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsOpenDirResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsOpenDirRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsOpenDirResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsOpenDir_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsOpenDirResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsOpenDirResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsOpenDirResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsReadDirArgs struct {
  Req *IcefsReadDirReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsReadDirArgs() *IcefsThriftDoIcefsReadDirArgs {
  return &IcefsThriftDoIcefsReadDirArgs{}
}

var IcefsThriftDoIcefsReadDirArgs_Req_DEFAULT *IcefsReadDirReq
func (p *IcefsThriftDoIcefsReadDirArgs) GetReq() *IcefsReadDirReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsReadDirArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsReadDirArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsReadDirArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadDirArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsReadDirReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadDirArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsReadDir_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsReadDirArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsReadDirArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsReadDirArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsReadDirResult struct {
  Success *IcefsReadDirRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsReadDirResult() *IcefsThriftDoIcefsReadDirResult {
  return &IcefsThriftDoIcefsReadDirResult{}
}

var IcefsThriftDoIcefsReadDirResult_Success_DEFAULT *IcefsReadDirRes
func (p *IcefsThriftDoIcefsReadDirResult) GetSuccess() *IcefsReadDirRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsReadDirResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsReadDirResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsReadDirResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadDirResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsReadDirRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadDirResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsReadDir_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsReadDirResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsReadDirResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsReadDirResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsReleaseDirArgs struct {
  Req *IcefsReleaseDirReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsReleaseDirArgs() *IcefsThriftDoIcefsReleaseDirArgs {
  return &IcefsThriftDoIcefsReleaseDirArgs{}
}

var IcefsThriftDoIcefsReleaseDirArgs_Req_DEFAULT *IcefsReleaseDirReq
func (p *IcefsThriftDoIcefsReleaseDirArgs) GetReq() *IcefsReleaseDirReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsReleaseDirArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsReleaseDirArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsReleaseDirArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReleaseDirArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsReleaseDirReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReleaseDirArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsReleaseDir_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsReleaseDirArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsReleaseDirArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsReleaseDirArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsReleaseDirResult struct {
  Success *IcefsReleaseDirRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsReleaseDirResult() *IcefsThriftDoIcefsReleaseDirResult {
  return &IcefsThriftDoIcefsReleaseDirResult{}
}

var IcefsThriftDoIcefsReleaseDirResult_Success_DEFAULT *IcefsReleaseDirRes
func (p *IcefsThriftDoIcefsReleaseDirResult) GetSuccess() *IcefsReleaseDirRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsReleaseDirResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsReleaseDirResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsReleaseDirResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReleaseDirResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsReleaseDirRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReleaseDirResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsReleaseDir_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsReleaseDirResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsReleaseDirResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsReleaseDirResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsFsyncDirArgs struct {
  Req *IcefsFsyncDirReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsFsyncDirArgs() *IcefsThriftDoIcefsFsyncDirArgs {
  return &IcefsThriftDoIcefsFsyncDirArgs{}
}

var IcefsThriftDoIcefsFsyncDirArgs_Req_DEFAULT *IcefsFsyncDirReq
func (p *IcefsThriftDoIcefsFsyncDirArgs) GetReq() *IcefsFsyncDirReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsFsyncDirArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsFsyncDirArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsFsyncDirArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFsyncDirArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsFsyncDirReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFsyncDirArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsFsyncDir_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsFsyncDirArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsFsyncDirArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsFsyncDirArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsFsyncDirResult struct {
  Success *IcefsFsyncDirRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsFsyncDirResult() *IcefsThriftDoIcefsFsyncDirResult {
  return &IcefsThriftDoIcefsFsyncDirResult{}
}

var IcefsThriftDoIcefsFsyncDirResult_Success_DEFAULT *IcefsFsyncDirRes
func (p *IcefsThriftDoIcefsFsyncDirResult) GetSuccess() *IcefsFsyncDirRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsFsyncDirResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsFsyncDirResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsFsyncDirResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFsyncDirResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsFsyncDirRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFsyncDirResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsFsyncDir_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsFsyncDirResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsFsyncDirResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsFsyncDirResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsStatFSArgs struct {
  Req *IcefsStatFSReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsStatFSArgs() *IcefsThriftDoIcefsStatFSArgs {
  return &IcefsThriftDoIcefsStatFSArgs{}
}

var IcefsThriftDoIcefsStatFSArgs_Req_DEFAULT *IcefsStatFSReq
func (p *IcefsThriftDoIcefsStatFSArgs) GetReq() *IcefsStatFSReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsStatFSArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsStatFSArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsStatFSArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsStatFSArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsStatFSReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsStatFSArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsStatFS_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsStatFSArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsStatFSArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsStatFSArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsStatFSResult struct {
  Success *IcefsStatFSRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsStatFSResult() *IcefsThriftDoIcefsStatFSResult {
  return &IcefsThriftDoIcefsStatFSResult{}
}

var IcefsThriftDoIcefsStatFSResult_Success_DEFAULT *IcefsStatFSRes
func (p *IcefsThriftDoIcefsStatFSResult) GetSuccess() *IcefsStatFSRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsStatFSResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsStatFSResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsStatFSResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsStatFSResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsStatFSRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsStatFSResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsStatFS_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsStatFSResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsStatFSResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsStatFSResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsSetXattrArgs struct {
  Req *IcefsSetXattrReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsSetXattrArgs() *IcefsThriftDoIcefsSetXattrArgs {
  return &IcefsThriftDoIcefsSetXattrArgs{}
}

var IcefsThriftDoIcefsSetXattrArgs_Req_DEFAULT *IcefsSetXattrReq
func (p *IcefsThriftDoIcefsSetXattrArgs) GetReq() *IcefsSetXattrReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsSetXattrArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsSetXattrArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsSetXattrArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSetXattrArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsSetXattrReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSetXattrArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsSetXattr_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsSetXattrArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsSetXattrArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsSetXattrArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsSetXattrResult struct {
  Success *IcefsSetXattrRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsSetXattrResult() *IcefsThriftDoIcefsSetXattrResult {
  return &IcefsThriftDoIcefsSetXattrResult{}
}

var IcefsThriftDoIcefsSetXattrResult_Success_DEFAULT *IcefsSetXattrRes
func (p *IcefsThriftDoIcefsSetXattrResult) GetSuccess() *IcefsSetXattrRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsSetXattrResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsSetXattrResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsSetXattrResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSetXattrResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsSetXattrRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSetXattrResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsSetXattr_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsSetXattrResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsSetXattrResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsSetXattrResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsGetXattrArgs struct {
  Req *IcefsGetXattrReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsGetXattrArgs() *IcefsThriftDoIcefsGetXattrArgs {
  return &IcefsThriftDoIcefsGetXattrArgs{}
}

var IcefsThriftDoIcefsGetXattrArgs_Req_DEFAULT *IcefsGetXattrReq
func (p *IcefsThriftDoIcefsGetXattrArgs) GetReq() *IcefsGetXattrReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsGetXattrArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsGetXattrArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsGetXattrArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsGetXattrArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsGetXattrReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsGetXattrArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsGetXattr_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsGetXattrArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsGetXattrArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsGetXattrArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsGetXattrResult struct {
  Success *IcefsGetXattrRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsGetXattrResult() *IcefsThriftDoIcefsGetXattrResult {
  return &IcefsThriftDoIcefsGetXattrResult{}
}

var IcefsThriftDoIcefsGetXattrResult_Success_DEFAULT *IcefsGetXattrRes
func (p *IcefsThriftDoIcefsGetXattrResult) GetSuccess() *IcefsGetXattrRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsGetXattrResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsGetXattrResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsGetXattrResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsGetXattrResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsGetXattrRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsGetXattrResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsGetXattr_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsGetXattrResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsGetXattrResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsGetXattrResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsListXattrArgs struct {
  Req *IcefsListXattrReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsListXattrArgs() *IcefsThriftDoIcefsListXattrArgs {
  return &IcefsThriftDoIcefsListXattrArgs{}
}

var IcefsThriftDoIcefsListXattrArgs_Req_DEFAULT *IcefsListXattrReq
func (p *IcefsThriftDoIcefsListXattrArgs) GetReq() *IcefsListXattrReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsListXattrArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsListXattrArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsListXattrArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsListXattrArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsListXattrReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsListXattrArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsListXattr_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsListXattrArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsListXattrArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsListXattrArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsListXattrResult struct {
  Success *IcefsListXattrRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsListXattrResult() *IcefsThriftDoIcefsListXattrResult {
  return &IcefsThriftDoIcefsListXattrResult{}
}

var IcefsThriftDoIcefsListXattrResult_Success_DEFAULT *IcefsListXattrRes
func (p *IcefsThriftDoIcefsListXattrResult) GetSuccess() *IcefsListXattrRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsListXattrResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsListXattrResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsListXattrResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsListXattrResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsListXattrRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsListXattrResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsListXattr_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsListXattrResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsListXattrResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsListXattrResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsRemoveXattrArgs struct {
  Req *IcefsRemoveXattrReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsRemoveXattrArgs() *IcefsThriftDoIcefsRemoveXattrArgs {
  return &IcefsThriftDoIcefsRemoveXattrArgs{}
}

var IcefsThriftDoIcefsRemoveXattrArgs_Req_DEFAULT *IcefsRemoveXattrReq
func (p *IcefsThriftDoIcefsRemoveXattrArgs) GetReq() *IcefsRemoveXattrReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsRemoveXattrArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsRemoveXattrArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsRemoveXattrArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRemoveXattrArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsRemoveXattrReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRemoveXattrArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsRemoveXattr_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsRemoveXattrArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsRemoveXattrArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsRemoveXattrArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsRemoveXattrResult struct {
  Success *IcefsRemoveXattrRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsRemoveXattrResult() *IcefsThriftDoIcefsRemoveXattrResult {
  return &IcefsThriftDoIcefsRemoveXattrResult{}
}

var IcefsThriftDoIcefsRemoveXattrResult_Success_DEFAULT *IcefsRemoveXattrRes
func (p *IcefsThriftDoIcefsRemoveXattrResult) GetSuccess() *IcefsRemoveXattrRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsRemoveXattrResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsRemoveXattrResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsRemoveXattrResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRemoveXattrResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsRemoveXattrRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRemoveXattrResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsRemoveXattr_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsRemoveXattrResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsRemoveXattrResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsRemoveXattrResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsAccessArgs struct {
  Req *IcefsAccessReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsAccessArgs() *IcefsThriftDoIcefsAccessArgs {
  return &IcefsThriftDoIcefsAccessArgs{}
}

var IcefsThriftDoIcefsAccessArgs_Req_DEFAULT *IcefsAccessReq
func (p *IcefsThriftDoIcefsAccessArgs) GetReq() *IcefsAccessReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsAccessArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsAccessArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsAccessArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsAccessArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsAccessReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsAccessArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsAccess_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsAccessArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsAccessArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsAccessArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsAccessResult struct {
  Success *IcefsAccessRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsAccessResult() *IcefsThriftDoIcefsAccessResult {
  return &IcefsThriftDoIcefsAccessResult{}
}

var IcefsThriftDoIcefsAccessResult_Success_DEFAULT *IcefsAccessRes
func (p *IcefsThriftDoIcefsAccessResult) GetSuccess() *IcefsAccessRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsAccessResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsAccessResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsAccessResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsAccessResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsAccessRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsAccessResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsAccess_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsAccessResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsAccessResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsAccessResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsCreateArgs struct {
  Req *IcefsCreateReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsCreateArgs() *IcefsThriftDoIcefsCreateArgs {
  return &IcefsThriftDoIcefsCreateArgs{}
}

var IcefsThriftDoIcefsCreateArgs_Req_DEFAULT *IcefsCreateReq
func (p *IcefsThriftDoIcefsCreateArgs) GetReq() *IcefsCreateReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsCreateArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsCreateArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsCreateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsCreateArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsCreateReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsCreateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsCreate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsCreateArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsCreateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsCreateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsCreateResult struct {
  Success *IcefsCreateRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsCreateResult() *IcefsThriftDoIcefsCreateResult {
  return &IcefsThriftDoIcefsCreateResult{}
}

var IcefsThriftDoIcefsCreateResult_Success_DEFAULT *IcefsCreateRes
func (p *IcefsThriftDoIcefsCreateResult) GetSuccess() *IcefsCreateRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsCreateResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsCreateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsCreateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsCreateResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsCreateRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsCreateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsCreate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsCreateResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsCreateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsCreateResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsGetLkArgs struct {
  Req *IcefsGetLkReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsGetLkArgs() *IcefsThriftDoIcefsGetLkArgs {
  return &IcefsThriftDoIcefsGetLkArgs{}
}

var IcefsThriftDoIcefsGetLkArgs_Req_DEFAULT *IcefsGetLkReq
func (p *IcefsThriftDoIcefsGetLkArgs) GetReq() *IcefsGetLkReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsGetLkArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsGetLkArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsGetLkArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsGetLkArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsGetLkReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsGetLkArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsGetLk_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsGetLkArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsGetLkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsGetLkArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsGetLkResult struct {
  Success *IcefsGetLkRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsGetLkResult() *IcefsThriftDoIcefsGetLkResult {
  return &IcefsThriftDoIcefsGetLkResult{}
}

var IcefsThriftDoIcefsGetLkResult_Success_DEFAULT *IcefsGetLkRes
func (p *IcefsThriftDoIcefsGetLkResult) GetSuccess() *IcefsGetLkRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsGetLkResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsGetLkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsGetLkResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsGetLkResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsGetLkRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsGetLkResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsGetLk_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsGetLkResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsGetLkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsGetLkResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsSetLkArgs struct {
  Req *IcefsSetLkReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsSetLkArgs() *IcefsThriftDoIcefsSetLkArgs {
  return &IcefsThriftDoIcefsSetLkArgs{}
}

var IcefsThriftDoIcefsSetLkArgs_Req_DEFAULT *IcefsSetLkReq
func (p *IcefsThriftDoIcefsSetLkArgs) GetReq() *IcefsSetLkReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsSetLkArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsSetLkArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsSetLkArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSetLkArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsSetLkReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSetLkArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsSetLk_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsSetLkArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsSetLkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsSetLkArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsSetLkResult struct {
  Success *IcefsSetLkRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsSetLkResult() *IcefsThriftDoIcefsSetLkResult {
  return &IcefsThriftDoIcefsSetLkResult{}
}

var IcefsThriftDoIcefsSetLkResult_Success_DEFAULT *IcefsSetLkRes
func (p *IcefsThriftDoIcefsSetLkResult) GetSuccess() *IcefsSetLkRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsSetLkResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsSetLkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsSetLkResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSetLkResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsSetLkRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsSetLkResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsSetLk_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsSetLkResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsSetLkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsSetLkResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsBmapArgs struct {
  Req *IcefsBmapReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsBmapArgs() *IcefsThriftDoIcefsBmapArgs {
  return &IcefsThriftDoIcefsBmapArgs{}
}

var IcefsThriftDoIcefsBmapArgs_Req_DEFAULT *IcefsBmapReq
func (p *IcefsThriftDoIcefsBmapArgs) GetReq() *IcefsBmapReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsBmapArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsBmapArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsBmapArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsBmapArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsBmapReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsBmapArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsBmap_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsBmapArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsBmapArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsBmapArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsBmapResult struct {
  Success *IcefsBmapRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsBmapResult() *IcefsThriftDoIcefsBmapResult {
  return &IcefsThriftDoIcefsBmapResult{}
}

var IcefsThriftDoIcefsBmapResult_Success_DEFAULT *IcefsBmapRes
func (p *IcefsThriftDoIcefsBmapResult) GetSuccess() *IcefsBmapRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsBmapResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsBmapResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsBmapResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsBmapResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsBmapRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsBmapResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsBmap_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsBmapResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsBmapResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsBmapResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsIoctlArgs struct {
  Req *IcefsIoctlReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsIoctlArgs() *IcefsThriftDoIcefsIoctlArgs {
  return &IcefsThriftDoIcefsIoctlArgs{}
}

var IcefsThriftDoIcefsIoctlArgs_Req_DEFAULT *IcefsIoctlReq
func (p *IcefsThriftDoIcefsIoctlArgs) GetReq() *IcefsIoctlReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsIoctlArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsIoctlArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsIoctlArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsIoctlArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsIoctlReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsIoctlArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsIoctl_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsIoctlArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsIoctlArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsIoctlArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsIoctlResult struct {
  Success *IcefsIoctlRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsIoctlResult() *IcefsThriftDoIcefsIoctlResult {
  return &IcefsThriftDoIcefsIoctlResult{}
}

var IcefsThriftDoIcefsIoctlResult_Success_DEFAULT *IcefsIoctlRes
func (p *IcefsThriftDoIcefsIoctlResult) GetSuccess() *IcefsIoctlRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsIoctlResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsIoctlResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsIoctlResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsIoctlResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsIoctlRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsIoctlResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsIoctl_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsIoctlResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsIoctlResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsIoctlResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsPollArgs struct {
  Req *IcefsPollReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsPollArgs() *IcefsThriftDoIcefsPollArgs {
  return &IcefsThriftDoIcefsPollArgs{}
}

var IcefsThriftDoIcefsPollArgs_Req_DEFAULT *IcefsPollReq
func (p *IcefsThriftDoIcefsPollArgs) GetReq() *IcefsPollReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsPollArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsPollArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsPollArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsPollArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsPollReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsPollArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsPoll_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsPollArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsPollArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsPollArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsPollResult struct {
  Success *IcefsPollRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsPollResult() *IcefsThriftDoIcefsPollResult {
  return &IcefsThriftDoIcefsPollResult{}
}

var IcefsThriftDoIcefsPollResult_Success_DEFAULT *IcefsPollRes
func (p *IcefsThriftDoIcefsPollResult) GetSuccess() *IcefsPollRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsPollResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsPollResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsPollResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsPollResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsPollRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsPollResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsPoll_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsPollResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsPollResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsPollResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsWriteBufArgs struct {
  Req *IcefsWriteBufReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsWriteBufArgs() *IcefsThriftDoIcefsWriteBufArgs {
  return &IcefsThriftDoIcefsWriteBufArgs{}
}

var IcefsThriftDoIcefsWriteBufArgs_Req_DEFAULT *IcefsWriteBufReq
func (p *IcefsThriftDoIcefsWriteBufArgs) GetReq() *IcefsWriteBufReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsWriteBufArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsWriteBufArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsWriteBufArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsWriteBufArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsWriteBufReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsWriteBufArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsWriteBuf_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsWriteBufArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsWriteBufArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsWriteBufArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsWriteBufResult struct {
  Success *IcefsWriteBufRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsWriteBufResult() *IcefsThriftDoIcefsWriteBufResult {
  return &IcefsThriftDoIcefsWriteBufResult{}
}

var IcefsThriftDoIcefsWriteBufResult_Success_DEFAULT *IcefsWriteBufRes
func (p *IcefsThriftDoIcefsWriteBufResult) GetSuccess() *IcefsWriteBufRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsWriteBufResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsWriteBufResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsWriteBufResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsWriteBufResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsWriteBufRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsWriteBufResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsWriteBuf_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsWriteBufResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsWriteBufResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsWriteBufResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsRetrieveReplyArgs struct {
  Req *IcefsRetrieveReplyReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsRetrieveReplyArgs() *IcefsThriftDoIcefsRetrieveReplyArgs {
  return &IcefsThriftDoIcefsRetrieveReplyArgs{}
}

var IcefsThriftDoIcefsRetrieveReplyArgs_Req_DEFAULT *IcefsRetrieveReplyReq
func (p *IcefsThriftDoIcefsRetrieveReplyArgs) GetReq() *IcefsRetrieveReplyReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsRetrieveReplyArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsRetrieveReplyArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsRetrieveReplyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRetrieveReplyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsRetrieveReplyReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRetrieveReplyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsRetrieveReply_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsRetrieveReplyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsRetrieveReplyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsRetrieveReplyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsRetrieveReplyResult struct {
  Success *IcefsRetrieveReplyRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsRetrieveReplyResult() *IcefsThriftDoIcefsRetrieveReplyResult {
  return &IcefsThriftDoIcefsRetrieveReplyResult{}
}

var IcefsThriftDoIcefsRetrieveReplyResult_Success_DEFAULT *IcefsRetrieveReplyRes
func (p *IcefsThriftDoIcefsRetrieveReplyResult) GetSuccess() *IcefsRetrieveReplyRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsRetrieveReplyResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsRetrieveReplyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsRetrieveReplyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRetrieveReplyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsRetrieveReplyRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsRetrieveReplyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsRetrieveReply_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsRetrieveReplyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsRetrieveReplyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsRetrieveReplyResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsForgetMultiArgs struct {
  Req *IcefsForgetMultiReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsForgetMultiArgs() *IcefsThriftDoIcefsForgetMultiArgs {
  return &IcefsThriftDoIcefsForgetMultiArgs{}
}

var IcefsThriftDoIcefsForgetMultiArgs_Req_DEFAULT *IcefsForgetMultiReq
func (p *IcefsThriftDoIcefsForgetMultiArgs) GetReq() *IcefsForgetMultiReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsForgetMultiArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsForgetMultiArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsForgetMultiArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsForgetMultiArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsForgetMultiReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsForgetMultiArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsForgetMulti_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsForgetMultiArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsForgetMultiArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsForgetMultiArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsForgetMultiResult struct {
  Success *IcefsForgetMultiRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsForgetMultiResult() *IcefsThriftDoIcefsForgetMultiResult {
  return &IcefsThriftDoIcefsForgetMultiResult{}
}

var IcefsThriftDoIcefsForgetMultiResult_Success_DEFAULT *IcefsForgetMultiRes
func (p *IcefsThriftDoIcefsForgetMultiResult) GetSuccess() *IcefsForgetMultiRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsForgetMultiResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsForgetMultiResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsForgetMultiResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsForgetMultiResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsForgetMultiRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsForgetMultiResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsForgetMulti_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsForgetMultiResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsForgetMultiResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsForgetMultiResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsFlockArgs struct {
  Req *IcefsFlockReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsFlockArgs() *IcefsThriftDoIcefsFlockArgs {
  return &IcefsThriftDoIcefsFlockArgs{}
}

var IcefsThriftDoIcefsFlockArgs_Req_DEFAULT *IcefsFlockReq
func (p *IcefsThriftDoIcefsFlockArgs) GetReq() *IcefsFlockReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsFlockArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsFlockArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsFlockArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFlockArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsFlockReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFlockArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsFlock_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsFlockArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsFlockArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsFlockArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsFlockResult struct {
  Success *IcefsFlockRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsFlockResult() *IcefsThriftDoIcefsFlockResult {
  return &IcefsThriftDoIcefsFlockResult{}
}

var IcefsThriftDoIcefsFlockResult_Success_DEFAULT *IcefsFlockRes
func (p *IcefsThriftDoIcefsFlockResult) GetSuccess() *IcefsFlockRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsFlockResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsFlockResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsFlockResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFlockResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsFlockRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFlockResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsFlock_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsFlockResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsFlockResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsFlockResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsFallocateArgs struct {
  Req *IcefsFallocateReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsFallocateArgs() *IcefsThriftDoIcefsFallocateArgs {
  return &IcefsThriftDoIcefsFallocateArgs{}
}

var IcefsThriftDoIcefsFallocateArgs_Req_DEFAULT *IcefsFallocateReq
func (p *IcefsThriftDoIcefsFallocateArgs) GetReq() *IcefsFallocateReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsFallocateArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsFallocateArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsFallocateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFallocateArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsFallocateReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFallocateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsFallocate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsFallocateArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsFallocateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsFallocateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsFallocateResult struct {
  Success *IcefsFallocateRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsFallocateResult() *IcefsThriftDoIcefsFallocateResult {
  return &IcefsThriftDoIcefsFallocateResult{}
}

var IcefsThriftDoIcefsFallocateResult_Success_DEFAULT *IcefsFallocateRes
func (p *IcefsThriftDoIcefsFallocateResult) GetSuccess() *IcefsFallocateRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsFallocateResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsFallocateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsFallocateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFallocateResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsFallocateRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsFallocateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsFallocate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsFallocateResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsFallocateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsFallocateResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsReadDirPlusArgs struct {
  Req *IcefsReadDirPlusReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsReadDirPlusArgs() *IcefsThriftDoIcefsReadDirPlusArgs {
  return &IcefsThriftDoIcefsReadDirPlusArgs{}
}

var IcefsThriftDoIcefsReadDirPlusArgs_Req_DEFAULT *IcefsReadDirPlusReq
func (p *IcefsThriftDoIcefsReadDirPlusArgs) GetReq() *IcefsReadDirPlusReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsReadDirPlusArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsReadDirPlusArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsReadDirPlusArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadDirPlusArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsReadDirPlusReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadDirPlusArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsReadDirPlus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsReadDirPlusArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsReadDirPlusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsReadDirPlusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsReadDirPlusResult struct {
  Success *IcefsReadDirPlusRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsReadDirPlusResult() *IcefsThriftDoIcefsReadDirPlusResult {
  return &IcefsThriftDoIcefsReadDirPlusResult{}
}

var IcefsThriftDoIcefsReadDirPlusResult_Success_DEFAULT *IcefsReadDirPlusRes
func (p *IcefsThriftDoIcefsReadDirPlusResult) GetSuccess() *IcefsReadDirPlusRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsReadDirPlusResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsReadDirPlusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsReadDirPlusResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadDirPlusResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsReadDirPlusRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsReadDirPlusResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsReadDirPlus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsReadDirPlusResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsReadDirPlusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsReadDirPlusResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsCopyFileRangeArgs struct {
  Req *IcefsCopyFileRangeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsCopyFileRangeArgs() *IcefsThriftDoIcefsCopyFileRangeArgs {
  return &IcefsThriftDoIcefsCopyFileRangeArgs{}
}

var IcefsThriftDoIcefsCopyFileRangeArgs_Req_DEFAULT *IcefsCopyFileRangeReq
func (p *IcefsThriftDoIcefsCopyFileRangeArgs) GetReq() *IcefsCopyFileRangeReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsCopyFileRangeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsCopyFileRangeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsCopyFileRangeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsCopyFileRangeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsCopyFileRangeReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsCopyFileRangeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsCopyFileRange_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsCopyFileRangeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsCopyFileRangeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsCopyFileRangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsCopyFileRangeResult struct {
  Success *IcefsCopyFileRangeRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsCopyFileRangeResult() *IcefsThriftDoIcefsCopyFileRangeResult {
  return &IcefsThriftDoIcefsCopyFileRangeResult{}
}

var IcefsThriftDoIcefsCopyFileRangeResult_Success_DEFAULT *IcefsCopyFileRangeRes
func (p *IcefsThriftDoIcefsCopyFileRangeResult) GetSuccess() *IcefsCopyFileRangeRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsCopyFileRangeResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsCopyFileRangeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsCopyFileRangeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsCopyFileRangeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsCopyFileRangeRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsCopyFileRangeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsCopyFileRange_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsCopyFileRangeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsCopyFileRangeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsCopyFileRangeResult(%+v)", *p)
}

// Attributes:
//  - Req
type IcefsThriftDoIcefsLseekArgs struct {
  Req *IcefsLseekReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIcefsThriftDoIcefsLseekArgs() *IcefsThriftDoIcefsLseekArgs {
  return &IcefsThriftDoIcefsLseekArgs{}
}

var IcefsThriftDoIcefsLseekArgs_Req_DEFAULT *IcefsLseekReq
func (p *IcefsThriftDoIcefsLseekArgs) GetReq() *IcefsLseekReq {
  if !p.IsSetReq() {
    return IcefsThriftDoIcefsLseekArgs_Req_DEFAULT
  }
return p.Req
}
func (p *IcefsThriftDoIcefsLseekArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *IcefsThriftDoIcefsLseekArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsLseekArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &IcefsLseekReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsLseekArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsLseek_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsLseekArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *IcefsThriftDoIcefsLseekArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsLseekArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcefsThriftDoIcefsLseekResult struct {
  Success *IcefsLseekRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcefsThriftDoIcefsLseekResult() *IcefsThriftDoIcefsLseekResult {
  return &IcefsThriftDoIcefsLseekResult{}
}

var IcefsThriftDoIcefsLseekResult_Success_DEFAULT *IcefsLseekRes
func (p *IcefsThriftDoIcefsLseekResult) GetSuccess() *IcefsLseekRes {
  if !p.IsSetSuccess() {
    return IcefsThriftDoIcefsLseekResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcefsThriftDoIcefsLseekResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcefsThriftDoIcefsLseekResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsLseekResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IcefsLseekRes{
  Status: 5,
}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcefsThriftDoIcefsLseekResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DoIcefsLseek_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcefsThriftDoIcefsLseekResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcefsThriftDoIcefsLseekResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcefsThriftDoIcefsLseekResult(%+v)", *p)
}


